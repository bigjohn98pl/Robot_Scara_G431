
Robot_SCARA_G431.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fa94  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f8  0800fc78  0800fc78  0001fc78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010470  08010470  00030214  2**0
                  CONTENTS
  4 .ARM          00000008  08010470  08010470  00020470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010478  08010478  00030214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010478  08010478  00020478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801047c  0801047c  0002047c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08010480  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000800  20000218  08010694  00030218  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000a18  08010694  00030a18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac7b  00000000  00000000  00030244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e5b  00000000  00000000  0004aebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  0004dd20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f8  00000000  00000000  0004ef20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020083  00000000  00000000  00050018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001547f  00000000  00000000  0007009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8a35  00000000  00000000  0008551a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014df4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006688  00000000  00000000  0014dfa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000218 	.word	0x20000218
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800fc5c 	.word	0x0800fc5c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000021c 	.word	0x2000021c
 800021c:	0800fc5c 	.word	0x0800fc5c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a4 	b.w	8001038 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468c      	mov	ip, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f040 8083 	bne.w	8000e8a <__udivmoddi4+0x116>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d947      	bls.n	8000e1a <__udivmoddi4+0xa6>
 8000d8a:	fab2 f282 	clz	r2, r2
 8000d8e:	b142      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	f1c2 0020 	rsb	r0, r2, #32
 8000d94:	fa24 f000 	lsr.w	r0, r4, r0
 8000d98:	4091      	lsls	r1, r2
 8000d9a:	4097      	lsls	r7, r2
 8000d9c:	ea40 0c01 	orr.w	ip, r0, r1
 8000da0:	4094      	lsls	r4, r2
 8000da2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000da6:	0c23      	lsrs	r3, r4, #16
 8000da8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dac:	fa1f fe87 	uxth.w	lr, r7
 8000db0:	fb08 c116 	mls	r1, r8, r6, ip
 8000db4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dbc:	4299      	cmp	r1, r3
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x60>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dc6:	f080 8119 	bcs.w	8000ffc <__udivmoddi4+0x288>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 8116 	bls.w	8000ffc <__udivmoddi4+0x288>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ddc:	fb08 3310 	mls	r3, r8, r0, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d909      	bls.n	8000e00 <__udivmoddi4+0x8c>
 8000dec:	193c      	adds	r4, r7, r4
 8000dee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df2:	f080 8105 	bcs.w	8001000 <__udivmoddi4+0x28c>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f240 8102 	bls.w	8001000 <__udivmoddi4+0x28c>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	443c      	add	r4, r7
 8000e00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e04:	eba4 040e 	sub.w	r4, r4, lr
 8000e08:	2600      	movs	r6, #0
 8000e0a:	b11d      	cbz	r5, 8000e14 <__udivmoddi4+0xa0>
 8000e0c:	40d4      	lsrs	r4, r2
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e9c5 4300 	strd	r4, r3, [r5]
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	b902      	cbnz	r2, 8000e1e <__udivmoddi4+0xaa>
 8000e1c:	deff      	udf	#255	; 0xff
 8000e1e:	fab2 f282 	clz	r2, r2
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	d150      	bne.n	8000ec8 <__udivmoddi4+0x154>
 8000e26:	1bcb      	subs	r3, r1, r7
 8000e28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2c:	fa1f f887 	uxth.w	r8, r7
 8000e30:	2601      	movs	r6, #1
 8000e32:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e36:	0c21      	lsrs	r1, r4, #16
 8000e38:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb08 f30c 	mul.w	r3, r8, ip
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d907      	bls.n	8000e58 <__udivmoddi4+0xe4>
 8000e48:	1879      	adds	r1, r7, r1
 8000e4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0xe2>
 8000e50:	428b      	cmp	r3, r1
 8000e52:	f200 80e9 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e56:	4684      	mov	ip, r0
 8000e58:	1ac9      	subs	r1, r1, r3
 8000e5a:	b2a3      	uxth	r3, r4
 8000e5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e60:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e64:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e68:	fb08 f800 	mul.w	r8, r8, r0
 8000e6c:	45a0      	cmp	r8, r4
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0x10c>
 8000e70:	193c      	adds	r4, r7, r4
 8000e72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x10a>
 8000e78:	45a0      	cmp	r8, r4
 8000e7a:	f200 80d9 	bhi.w	8001030 <__udivmoddi4+0x2bc>
 8000e7e:	4618      	mov	r0, r3
 8000e80:	eba4 0408 	sub.w	r4, r4, r8
 8000e84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e88:	e7bf      	b.n	8000e0a <__udivmoddi4+0x96>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d909      	bls.n	8000ea2 <__udivmoddi4+0x12e>
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	f000 80b1 	beq.w	8000ff6 <__udivmoddi4+0x282>
 8000e94:	2600      	movs	r6, #0
 8000e96:	e9c5 0100 	strd	r0, r1, [r5]
 8000e9a:	4630      	mov	r0, r6
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	fab3 f683 	clz	r6, r3
 8000ea6:	2e00      	cmp	r6, #0
 8000ea8:	d14a      	bne.n	8000f40 <__udivmoddi4+0x1cc>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d302      	bcc.n	8000eb4 <__udivmoddi4+0x140>
 8000eae:	4282      	cmp	r2, r0
 8000eb0:	f200 80b8 	bhi.w	8001024 <__udivmoddi4+0x2b0>
 8000eb4:	1a84      	subs	r4, r0, r2
 8000eb6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eba:	2001      	movs	r0, #1
 8000ebc:	468c      	mov	ip, r1
 8000ebe:	2d00      	cmp	r5, #0
 8000ec0:	d0a8      	beq.n	8000e14 <__udivmoddi4+0xa0>
 8000ec2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ec6:	e7a5      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ed0:	4097      	lsls	r7, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eda:	40d9      	lsrs	r1, r3
 8000edc:	4330      	orrs	r0, r6
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ee4:	fa1f f887 	uxth.w	r8, r7
 8000ee8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ef0:	fb06 f108 	mul.w	r1, r6, r8
 8000ef4:	4299      	cmp	r1, r3
 8000ef6:	fa04 f402 	lsl.w	r4, r4, r2
 8000efa:	d909      	bls.n	8000f10 <__udivmoddi4+0x19c>
 8000efc:	18fb      	adds	r3, r7, r3
 8000efe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f02:	f080 808d 	bcs.w	8001020 <__udivmoddi4+0x2ac>
 8000f06:	4299      	cmp	r1, r3
 8000f08:	f240 808a 	bls.w	8001020 <__udivmoddi4+0x2ac>
 8000f0c:	3e02      	subs	r6, #2
 8000f0e:	443b      	add	r3, r7
 8000f10:	1a5b      	subs	r3, r3, r1
 8000f12:	b281      	uxth	r1, r0
 8000f14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f20:	fb00 f308 	mul.w	r3, r0, r8
 8000f24:	428b      	cmp	r3, r1
 8000f26:	d907      	bls.n	8000f38 <__udivmoddi4+0x1c4>
 8000f28:	1879      	adds	r1, r7, r1
 8000f2a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2e:	d273      	bcs.n	8001018 <__udivmoddi4+0x2a4>
 8000f30:	428b      	cmp	r3, r1
 8000f32:	d971      	bls.n	8001018 <__udivmoddi4+0x2a4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4439      	add	r1, r7
 8000f38:	1acb      	subs	r3, r1, r3
 8000f3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f3e:	e778      	b.n	8000e32 <__udivmoddi4+0xbe>
 8000f40:	f1c6 0c20 	rsb	ip, r6, #32
 8000f44:	fa03 f406 	lsl.w	r4, r3, r6
 8000f48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f4c:	431c      	orrs	r4, r3
 8000f4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f52:	fa01 f306 	lsl.w	r3, r1, r6
 8000f56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	0c3b      	lsrs	r3, r7, #16
 8000f62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f66:	fa1f f884 	uxth.w	r8, r4
 8000f6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f72:	fb09 fa08 	mul.w	sl, r9, r8
 8000f76:	458a      	cmp	sl, r1
 8000f78:	fa02 f206 	lsl.w	r2, r2, r6
 8000f7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x220>
 8000f82:	1861      	adds	r1, r4, r1
 8000f84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f88:	d248      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000f8a:	458a      	cmp	sl, r1
 8000f8c:	d946      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000f8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f92:	4421      	add	r1, r4
 8000f94:	eba1 010a 	sub.w	r1, r1, sl
 8000f98:	b2bf      	uxth	r7, r7
 8000f9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fa2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fa6:	fb00 f808 	mul.w	r8, r0, r8
 8000faa:	45b8      	cmp	r8, r7
 8000fac:	d907      	bls.n	8000fbe <__udivmoddi4+0x24a>
 8000fae:	19e7      	adds	r7, r4, r7
 8000fb0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fb4:	d22e      	bcs.n	8001014 <__udivmoddi4+0x2a0>
 8000fb6:	45b8      	cmp	r8, r7
 8000fb8:	d92c      	bls.n	8001014 <__udivmoddi4+0x2a0>
 8000fba:	3802      	subs	r0, #2
 8000fbc:	4427      	add	r7, r4
 8000fbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fc2:	eba7 0708 	sub.w	r7, r7, r8
 8000fc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fca:	454f      	cmp	r7, r9
 8000fcc:	46c6      	mov	lr, r8
 8000fce:	4649      	mov	r1, r9
 8000fd0:	d31a      	bcc.n	8001008 <__udivmoddi4+0x294>
 8000fd2:	d017      	beq.n	8001004 <__udivmoddi4+0x290>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x27a>
 8000fd6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fda:	eb67 0701 	sbc.w	r7, r7, r1
 8000fde:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fe2:	40f2      	lsrs	r2, r6
 8000fe4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fe8:	40f7      	lsrs	r7, r6
 8000fea:	e9c5 2700 	strd	r2, r7, [r5]
 8000fee:	2600      	movs	r6, #0
 8000ff0:	4631      	mov	r1, r6
 8000ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e70b      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e9      	b.n	8000dd4 <__udivmoddi4+0x60>
 8001000:	4618      	mov	r0, r3
 8001002:	e6fd      	b.n	8000e00 <__udivmoddi4+0x8c>
 8001004:	4543      	cmp	r3, r8
 8001006:	d2e5      	bcs.n	8000fd4 <__udivmoddi4+0x260>
 8001008:	ebb8 0e02 	subs.w	lr, r8, r2
 800100c:	eb69 0104 	sbc.w	r1, r9, r4
 8001010:	3801      	subs	r0, #1
 8001012:	e7df      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001014:	4608      	mov	r0, r1
 8001016:	e7d2      	b.n	8000fbe <__udivmoddi4+0x24a>
 8001018:	4660      	mov	r0, ip
 800101a:	e78d      	b.n	8000f38 <__udivmoddi4+0x1c4>
 800101c:	4681      	mov	r9, r0
 800101e:	e7b9      	b.n	8000f94 <__udivmoddi4+0x220>
 8001020:	4666      	mov	r6, ip
 8001022:	e775      	b.n	8000f10 <__udivmoddi4+0x19c>
 8001024:	4630      	mov	r0, r6
 8001026:	e74a      	b.n	8000ebe <__udivmoddi4+0x14a>
 8001028:	f1ac 0c02 	sub.w	ip, ip, #2
 800102c:	4439      	add	r1, r7
 800102e:	e713      	b.n	8000e58 <__udivmoddi4+0xe4>
 8001030:	3802      	subs	r0, #2
 8001032:	443c      	add	r4, r7
 8001034:	e724      	b.n	8000e80 <__udivmoddi4+0x10c>
 8001036:	bf00      	nop

08001038 <__aeabi_idiv0>:
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <TimerDelay_Init>:
#define TIMER  TIM4
volatile static TIM_HandleTypeDef HTIMx;
volatile static uint32_t gu32_ticks = 0;

void TimerDelay_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0
	gu32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8001042:	f004 f987 	bl	8005354 <HAL_RCC_GetHCLKFreq>
 8001046:	4603      	mov	r3, r0
 8001048:	4a28      	ldr	r2, [pc, #160]	; (80010ec <TimerDelay_Init+0xb0>)
 800104a:	fba2 2303 	umull	r2, r3, r2, r3
 800104e:	0c9b      	lsrs	r3, r3, #18
 8001050:	4a27      	ldr	r2, [pc, #156]	; (80010f0 <TimerDelay_Init+0xb4>)
 8001052:	6013      	str	r3, [r2, #0]
	HTIMx.Instance = TIMER;
 8001054:	4b27      	ldr	r3, [pc, #156]	; (80010f4 <TimerDelay_Init+0xb8>)
 8001056:	4a28      	ldr	r2, [pc, #160]	; (80010f8 <TimerDelay_Init+0xbc>)
 8001058:	601a      	str	r2, [r3, #0]

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800105a:	f107 0310 	add.w	r3, r7, #16
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]


    HTIMx.Init.Prescaler = gu32_ticks-1;
 8001072:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <TimerDelay_Init+0xb4>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	3b01      	subs	r3, #1
 8001078:	4a1e      	ldr	r2, [pc, #120]	; (80010f4 <TimerDelay_Init+0xb8>)
 800107a:	6053      	str	r3, [r2, #4]
    HTIMx.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107c:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <TimerDelay_Init+0xb8>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
    HTIMx.Init.Period = 65535;
 8001082:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <TimerDelay_Init+0xb8>)
 8001084:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001088:	60da      	str	r2, [r3, #12]
    HTIMx.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108a:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <TimerDelay_Init+0xb8>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
    HTIMx.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001090:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <TimerDelay_Init+0xb8>)
 8001092:	2280      	movs	r2, #128	; 0x80
 8001094:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&HTIMx) != HAL_OK)
 8001096:	4817      	ldr	r0, [pc, #92]	; (80010f4 <TimerDelay_Init+0xb8>)
 8001098:	f004 fbca 	bl	8005830 <HAL_TIM_Base_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <TimerDelay_Init+0x6a>
    {
      Error_Handler();
 80010a2:	f002 fa65 	bl	8003570 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010aa:	613b      	str	r3, [r7, #16]
    if (HAL_TIM_ConfigClockSource(&HTIMx, &sClockSourceConfig) != HAL_OK)
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	4619      	mov	r1, r3
 80010b2:	4810      	ldr	r0, [pc, #64]	; (80010f4 <TimerDelay_Init+0xb8>)
 80010b4:	f005 f9b0 	bl	8006418 <HAL_TIM_ConfigClockSource>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <TimerDelay_Init+0x86>
    {
      Error_Handler();
 80010be:	f002 fa57 	bl	8003570 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c2:	2300      	movs	r3, #0
 80010c4:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
    if (HAL_TIMEx_MasterConfigSynchronization(&HTIMx, &sMasterConfig) != HAL_OK)
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	4619      	mov	r1, r3
 80010ce:	4809      	ldr	r0, [pc, #36]	; (80010f4 <TimerDelay_Init+0xb8>)
 80010d0:	f005 ff16 	bl	8006f00 <HAL_TIMEx_MasterConfigSynchronization>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <TimerDelay_Init+0xa2>
    {
      Error_Handler();
 80010da:	f002 fa49 	bl	8003570 <Error_Handler>
    }

    HAL_TIM_Base_Start(&HTIMx);
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <TimerDelay_Init+0xb8>)
 80010e0:	f004 fbfe 	bl	80058e0 <HAL_TIM_Base_Start>

}
 80010e4:	bf00      	nop
 80010e6:	3720      	adds	r7, #32
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	431bde83 	.word	0x431bde83
 80010f0:	20000280 	.word	0x20000280
 80010f4:	20000234 	.word	0x20000234
 80010f8:	40000800 	.word	0x40000800

080010fc <delay_ms>:
	HTIMx.Instance->CNT = 0;
	while (HTIMx.Instance->CNT < au16_us);
}

void delay_ms(volatile uint16_t au16_ms)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	80fb      	strh	r3, [r7, #6]
	while(au16_ms > 0)
 8001106:	e00f      	b.n	8001128 <delay_ms+0x2c>
	{
		HTIMx.Instance->CNT = 0;
 8001108:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <delay_ms+0x44>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2200      	movs	r2, #0
 800110e:	625a      	str	r2, [r3, #36]	; 0x24
		au16_ms--;
 8001110:	88fb      	ldrh	r3, [r7, #6]
 8001112:	b29b      	uxth	r3, r3
 8001114:	3b01      	subs	r3, #1
 8001116:	b29b      	uxth	r3, r3
 8001118:	80fb      	strh	r3, [r7, #6]
		while (HTIMx.Instance->CNT < 1000);
 800111a:	bf00      	nop
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <delay_ms+0x44>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001122:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001126:	d3f9      	bcc.n	800111c <delay_ms+0x20>
	while(au16_ms > 0)
 8001128:	88fb      	ldrh	r3, [r7, #6]
 800112a:	b29b      	uxth	r3, r3
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1eb      	bne.n	8001108 <delay_ms+0xc>
	}
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000234 	.word	0x20000234

08001144 <HAL_UART_RxCpltCallback>:

/*
 * Funkcja wywołująca się przy zakończeniu odbierania ramki danych,
 * po zakończeniu funkcja analizuje buffor, wyciąga z niego dane, i wysyła dane z powrotem
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001148:	b08d      	sub	sp, #52	; 0x34
 800114a:	af0a      	add	r7, sp, #40	; 0x28
 800114c:	6078      	str	r0, [r7, #4]

	if(UART_IN[0] == ' ' && UART_IN[1] == ' '){
 800114e:	4b69      	ldr	r3, [pc, #420]	; (80012f4 <HAL_UART_RxCpltCallback+0x1b0>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b20      	cmp	r3, #32
 8001154:	d150      	bne.n	80011f8 <HAL_UART_RxCpltCallback+0xb4>
 8001156:	4b67      	ldr	r3, [pc, #412]	; (80012f4 <HAL_UART_RxCpltCallback+0x1b0>)
 8001158:	785b      	ldrb	r3, [r3, #1]
 800115a:	2b20      	cmp	r3, #32
 800115c:	d14c      	bne.n	80011f8 <HAL_UART_RxCpltCallback+0xb4>
		if(UART_IN[26]=='M'){
 800115e:	4b65      	ldr	r3, [pc, #404]	; (80012f4 <HAL_UART_RxCpltCallback+0x1b0>)
 8001160:	7e9b      	ldrb	r3, [r3, #26]
 8001162:	2b4d      	cmp	r3, #77	; 0x4d
 8001164:	d118      	bne.n	8001198 <HAL_UART_RxCpltCallback+0x54>
			set_settings(&Rob.M[0]);
 8001166:	4864      	ldr	r0, [pc, #400]	; (80012f8 <HAL_UART_RxCpltCallback+0x1b4>)
 8001168:	f001 fd48 	bl	8002bfc <set_settings>
			if(UART_IN[27]=='1'){
 800116c:	4b61      	ldr	r3, [pc, #388]	; (80012f4 <HAL_UART_RxCpltCallback+0x1b0>)
 800116e:	7edb      	ldrb	r3, [r3, #27]
 8001170:	2b31      	cmp	r3, #49	; 0x31
 8001172:	d102      	bne.n	800117a <HAL_UART_RxCpltCallback+0x36>
				set_settings(&Rob.M[0]);
 8001174:	4860      	ldr	r0, [pc, #384]	; (80012f8 <HAL_UART_RxCpltCallback+0x1b4>)
 8001176:	f001 fd41 	bl	8002bfc <set_settings>
			}
			if (UART_IN[27]=='2') {
 800117a:	4b5e      	ldr	r3, [pc, #376]	; (80012f4 <HAL_UART_RxCpltCallback+0x1b0>)
 800117c:	7edb      	ldrb	r3, [r3, #27]
 800117e:	2b32      	cmp	r3, #50	; 0x32
 8001180:	d102      	bne.n	8001188 <HAL_UART_RxCpltCallback+0x44>
				set_settings(&Rob.M[1]);
 8001182:	485e      	ldr	r0, [pc, #376]	; (80012fc <HAL_UART_RxCpltCallback+0x1b8>)
 8001184:	f001 fd3a 	bl	8002bfc <set_settings>
			}
			if (UART_IN[27]=='3') {
 8001188:	4b5a      	ldr	r3, [pc, #360]	; (80012f4 <HAL_UART_RxCpltCallback+0x1b0>)
 800118a:	7edb      	ldrb	r3, [r3, #27]
 800118c:	2b33      	cmp	r3, #51	; 0x33
 800118e:	d133      	bne.n	80011f8 <HAL_UART_RxCpltCallback+0xb4>
				set_settings(&Rob.M[2]);
 8001190:	485b      	ldr	r0, [pc, #364]	; (8001300 <HAL_UART_RxCpltCallback+0x1bc>)
 8001192:	f001 fd33 	bl	8002bfc <set_settings>
 8001196:	e02f      	b.n	80011f8 <HAL_UART_RxCpltCallback+0xb4>
			}
		}
		else{
			new_X = strtod((char*)UART_IN,&pEnd);
 8001198:	495a      	ldr	r1, [pc, #360]	; (8001304 <HAL_UART_RxCpltCallback+0x1c0>)
 800119a:	4856      	ldr	r0, [pc, #344]	; (80012f4 <HAL_UART_RxCpltCallback+0x1b0>)
 800119c:	f009 f9e0 	bl	800a560 <strtod>
 80011a0:	eeb0 7a40 	vmov.f32	s14, s0
 80011a4:	eef0 7a60 	vmov.f32	s15, s1
 80011a8:	4b57      	ldr	r3, [pc, #348]	; (8001308 <HAL_UART_RxCpltCallback+0x1c4>)
 80011aa:	ed83 7b00 	vstr	d7, [r3]
			new_Y = strtod(pEnd,&pEnd);
 80011ae:	4b55      	ldr	r3, [pc, #340]	; (8001304 <HAL_UART_RxCpltCallback+0x1c0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4954      	ldr	r1, [pc, #336]	; (8001304 <HAL_UART_RxCpltCallback+0x1c0>)
 80011b4:	4618      	mov	r0, r3
 80011b6:	f009 f9d3 	bl	800a560 <strtod>
 80011ba:	eeb0 7a40 	vmov.f32	s14, s0
 80011be:	eef0 7a60 	vmov.f32	s15, s1
 80011c2:	4b52      	ldr	r3, [pc, #328]	; (800130c <HAL_UART_RxCpltCallback+0x1c8>)
 80011c4:	ed83 7b00 	vstr	d7, [r3]
			new_Z = strtod(pEnd,&pEnd);
 80011c8:	4b4e      	ldr	r3, [pc, #312]	; (8001304 <HAL_UART_RxCpltCallback+0x1c0>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	494d      	ldr	r1, [pc, #308]	; (8001304 <HAL_UART_RxCpltCallback+0x1c0>)
 80011ce:	4618      	mov	r0, r3
 80011d0:	f009 f9c6 	bl	800a560 <strtod>
 80011d4:	eeb0 7a40 	vmov.f32	s14, s0
 80011d8:	eef0 7a60 	vmov.f32	s15, s1
 80011dc:	4b4c      	ldr	r3, [pc, #304]	; (8001310 <HAL_UART_RxCpltCallback+0x1cc>)
 80011de:	ed83 7b00 	vstr	d7, [r3]
			new_grab = strtol(pEnd,NULL,0);
 80011e2:	4b48      	ldr	r3, [pc, #288]	; (8001304 <HAL_UART_RxCpltCallback+0x1c0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2200      	movs	r2, #0
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f009 fa4a 	bl	800a684 <strtol>
 80011f0:	4603      	mov	r3, r0
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	4b47      	ldr	r3, [pc, #284]	; (8001314 <HAL_UART_RxCpltCallback+0x1d0>)
 80011f6:	801a      	strh	r2, [r3, #0]
		}
	}
	if(UART_IN[0]=='+'){
 80011f8:	4b3e      	ldr	r3, [pc, #248]	; (80012f4 <HAL_UART_RxCpltCallback+0x1b0>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b2b      	cmp	r3, #43	; 0x2b
 80011fe:	d102      	bne.n	8001206 <HAL_UART_RxCpltCallback+0xc2>
		sekwencja_save = true;
 8001200:	4b45      	ldr	r3, [pc, #276]	; (8001318 <HAL_UART_RxCpltCallback+0x1d4>)
 8001202:	2201      	movs	r2, #1
 8001204:	701a      	strb	r2, [r3, #0]
	}
	if(UART_IN[0]=='-'){
 8001206:	4b3b      	ldr	r3, [pc, #236]	; (80012f4 <HAL_UART_RxCpltCallback+0x1b0>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b2d      	cmp	r3, #45	; 0x2d
 800120c:	d102      	bne.n	8001214 <HAL_UART_RxCpltCallback+0xd0>
		sekwencja_save = false;
 800120e:	4b42      	ldr	r3, [pc, #264]	; (8001318 <HAL_UART_RxCpltCallback+0x1d4>)
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
	}
	if(UART_IN[1]=='+'){
 8001214:	4b37      	ldr	r3, [pc, #220]	; (80012f4 <HAL_UART_RxCpltCallback+0x1b0>)
 8001216:	785b      	ldrb	r3, [r3, #1]
 8001218:	2b2b      	cmp	r3, #43	; 0x2b
 800121a:	d102      	bne.n	8001222 <HAL_UART_RxCpltCallback+0xde>
		sekwencja_start = true;
 800121c:	4b3f      	ldr	r3, [pc, #252]	; (800131c <HAL_UART_RxCpltCallback+0x1d8>)
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
	}
	if(UART_IN[1]=='-'){
 8001222:	4b34      	ldr	r3, [pc, #208]	; (80012f4 <HAL_UART_RxCpltCallback+0x1b0>)
 8001224:	785b      	ldrb	r3, [r3, #1]
 8001226:	2b2d      	cmp	r3, #45	; 0x2d
 8001228:	d102      	bne.n	8001230 <HAL_UART_RxCpltCallback+0xec>
		sekwencja_start = false;
 800122a:	4b3c      	ldr	r3, [pc, #240]	; (800131c <HAL_UART_RxCpltCallback+0x1d8>)
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
	}
	if(UART_IN[2]=='-'){
 8001230:	4b30      	ldr	r3, [pc, #192]	; (80012f4 <HAL_UART_RxCpltCallback+0x1b0>)
 8001232:	789b      	ldrb	r3, [r3, #2]
 8001234:	2b2d      	cmp	r3, #45	; 0x2d
 8001236:	d101      	bne.n	800123c <HAL_UART_RxCpltCallback+0xf8>
		clear_sequence();
 8001238:	f001 faaa 	bl	8002790 <clear_sequence>
	}


	HAL_UART_Receive_DMA(&huart2,UART_IN, N_IN);
 800123c:	2221      	movs	r2, #33	; 0x21
 800123e:	492d      	ldr	r1, [pc, #180]	; (80012f4 <HAL_UART_RxCpltCallback+0x1b0>)
 8001240:	4837      	ldr	r0, [pc, #220]	; (8001320 <HAL_UART_RxCpltCallback+0x1dc>)
 8001242:	f006 f89d 	bl	8007380 <HAL_UART_Receive_DMA>
	if(move_done == true){
 8001246:	4b37      	ldr	r3, [pc, #220]	; (8001324 <HAL_UART_RxCpltCallback+0x1e0>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d12a      	bne.n	80012a4 <HAL_UART_RxCpltCallback+0x160>

		size = sprintf((char*)UART_OUT,	"X %7.2f %7.2f %7.2f %4d %7.2f %7.2f \r\n",Rob.X,Rob.Y,Rob.Z,Rob.grab,Rob.J1,Rob.J2); //50
 800124e:	4b36      	ldr	r3, [pc, #216]	; (8001328 <HAL_UART_RxCpltCallback+0x1e4>)
 8001250:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8001254:	4b34      	ldr	r3, [pc, #208]	; (8001328 <HAL_UART_RxCpltCallback+0x1e4>)
 8001256:	ed93 7b02 	vldr	d7, [r3, #8]
 800125a:	4933      	ldr	r1, [pc, #204]	; (8001328 <HAL_UART_RxCpltCallback+0x1e4>)
 800125c:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8001260:	4c31      	ldr	r4, [pc, #196]	; (8001328 <HAL_UART_RxCpltCallback+0x1e4>)
 8001262:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 8001266:	4c30      	ldr	r4, [pc, #192]	; (8001328 <HAL_UART_RxCpltCallback+0x1e4>)
 8001268:	e9d4 4512 	ldrd	r4, r5, [r4, #72]	; 0x48
 800126c:	4b2e      	ldr	r3, [pc, #184]	; (8001328 <HAL_UART_RxCpltCallback+0x1e4>)
 800126e:	e9d3 8914 	ldrd	r8, r9, [r3, #80]	; 0x50
 8001272:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8001276:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800127a:	9604      	str	r6, [sp, #16]
 800127c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001280:	ed8d 7b00 	vstr	d7, [sp]
 8001284:	4652      	mov	r2, sl
 8001286:	465b      	mov	r3, fp
 8001288:	4928      	ldr	r1, [pc, #160]	; (800132c <HAL_UART_RxCpltCallback+0x1e8>)
 800128a:	4829      	ldr	r0, [pc, #164]	; (8001330 <HAL_UART_RxCpltCallback+0x1ec>)
 800128c:	f008 fb1a 	bl	80098c4 <siprintf>
 8001290:	4603      	mov	r3, r0
 8001292:	b29a      	uxth	r2, r3
 8001294:	4b27      	ldr	r3, [pc, #156]	; (8001334 <HAL_UART_RxCpltCallback+0x1f0>)
 8001296:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart2, UART_OUT, N_OUT);
 8001298:	2232      	movs	r2, #50	; 0x32
 800129a:	4925      	ldr	r1, [pc, #148]	; (8001330 <HAL_UART_RxCpltCallback+0x1ec>)
 800129c:	4820      	ldr	r0, [pc, #128]	; (8001320 <HAL_UART_RxCpltCallback+0x1dc>)
 800129e:	f005 ffdd 	bl	800725c <HAL_UART_Transmit_DMA>
	else if(move_done == false){
		size = sprintf((char*)UART_OUT, "M %10.2f %10.2f %10.2f %6s      \r\n",Rob.M[0].angle,Rob.M[1].angle,Rob.M[2].angle,Mess2);
		HAL_UART_Transmit_DMA(&huart2, UART_OUT, N_OUT); // Rozpoczecie nadawania danych z wykorzystaniem przerwan
	}

}
 80012a2:	e022      	b.n	80012ea <HAL_UART_RxCpltCallback+0x1a6>
	else if(move_done == false){
 80012a4:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <HAL_UART_RxCpltCallback+0x1e0>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d11e      	bne.n	80012ea <HAL_UART_RxCpltCallback+0x1a6>
		size = sprintf((char*)UART_OUT, "M %10.2f %10.2f %10.2f %6s      \r\n",Rob.M[0].angle,Rob.M[1].angle,Rob.M[2].angle,Mess2);
 80012ac:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <HAL_UART_RxCpltCallback+0x1e4>)
 80012ae:	e9d3 4528 	ldrd	r4, r5, [r3, #160]	; 0xa0
 80012b2:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <HAL_UART_RxCpltCallback+0x1e4>)
 80012b4:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 80012b8:	491b      	ldr	r1, [pc, #108]	; (8001328 <HAL_UART_RxCpltCallback+0x1e4>)
 80012ba:	e9d1 0154 	ldrd	r0, r1, [r1, #336]	; 0x150
 80012be:	4e1e      	ldr	r6, [pc, #120]	; (8001338 <HAL_UART_RxCpltCallback+0x1f4>)
 80012c0:	6836      	ldr	r6, [r6, #0]
 80012c2:	9604      	str	r6, [sp, #16]
 80012c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80012c8:	e9cd 2300 	strd	r2, r3, [sp]
 80012cc:	4622      	mov	r2, r4
 80012ce:	462b      	mov	r3, r5
 80012d0:	491a      	ldr	r1, [pc, #104]	; (800133c <HAL_UART_RxCpltCallback+0x1f8>)
 80012d2:	4817      	ldr	r0, [pc, #92]	; (8001330 <HAL_UART_RxCpltCallback+0x1ec>)
 80012d4:	f008 faf6 	bl	80098c4 <siprintf>
 80012d8:	4603      	mov	r3, r0
 80012da:	b29a      	uxth	r2, r3
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <HAL_UART_RxCpltCallback+0x1f0>)
 80012de:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart2, UART_OUT, N_OUT); // Rozpoczecie nadawania danych z wykorzystaniem przerwan
 80012e0:	2232      	movs	r2, #50	; 0x32
 80012e2:	4913      	ldr	r1, [pc, #76]	; (8001330 <HAL_UART_RxCpltCallback+0x1ec>)
 80012e4:	480e      	ldr	r0, [pc, #56]	; (8001320 <HAL_UART_RxCpltCallback+0x1dc>)
 80012e6:	f005 ffb9 	bl	800725c <HAL_UART_Transmit_DMA>
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012f4:	200002dc 	.word	0x200002dc
 80012f8:	200004f8 	.word	0x200004f8
 80012fc:	20000550 	.word	0x20000550
 8001300:	200005a8 	.word	0x200005a8
 8001304:	20000308 	.word	0x20000308
 8001308:	20000010 	.word	0x20000010
 800130c:	20000288 	.word	0x20000288
 8001310:	20000018 	.word	0x20000018
 8001314:	20000020 	.word	0x20000020
 8001318:	2000030c 	.word	0x2000030c
 800131c:	2000030d 	.word	0x2000030d
 8001320:	20000928 	.word	0x20000928
 8001324:	20000022 	.word	0x20000022
 8001328:	20000470 	.word	0x20000470
 800132c:	0800fc78 	.word	0x0800fc78
 8001330:	200002a8 	.word	0x200002a8
 8001334:	20000304 	.word	0x20000304
 8001338:	20000300 	.word	0x20000300
 800133c:	0800fca0 	.word	0x0800fca0

08001340 <delay1>:

/*
 * Funkcja opóźnienia do generacji sygnału PWM
 */
void delay1(uint16_t time){
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	80fb      	strh	r3, [r7, #6]
	/* time = 1 equals 10 ns
	 * 1000000ns = 1ms*/
	__HAL_TIM_SET_COUNTER(&htim3,0);
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <delay1+0x30>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2200      	movs	r2, #0
 8001350:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim3) < time);
 8001352:	bf00      	nop
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <delay1+0x30>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	429a      	cmp	r2, r3
 800135e:	d3f9      	bcc.n	8001354 <delay1+0x14>
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000424 	.word	0x20000424

08001374 <delay2>:
/*
 * Funkcja opóźnienia do generacji sygnału PWM
 */
void delay2(uint16_t time){
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	80fb      	strh	r3, [r7, #6]
	/* time = 1 equals 10 ns
	 * 1000000ns = 1ms*/
	__HAL_TIM_SET_COUNTER(&htim7,0);
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <delay2+0x30>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2200      	movs	r2, #0
 8001384:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim7) < time);
 8001386:	bf00      	nop
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <delay2+0x30>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800138e:	88fb      	ldrh	r3, [r7, #6]
 8001390:	429a      	cmp	r2, r3
 8001392:	d3f9      	bcc.n	8001388 <delay2+0x14>
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	200009b8 	.word	0x200009b8

080013a8 <RPM_2_Delay>:
/*
 * Funkcja zamienia wartość PWM na okres opóźnienia w nano sekundach
 */
uint16_t RPM_2_Delay(uint16_t RPM){
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	80fb      	strh	r3, [r7, #6]
	return rot_time/RPM;
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <RPM_2_Delay+0x24>)
 80013b4:	881a      	ldrh	r2, [r3, #0]
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013bc:	b29b      	uxth	r3, r3
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000008 	.word	0x20000008

080013d0 <Delay_Set>:
/*
 * Funkcja pozwala wybrać opóźnienie na innym timerze
 */
void Delay_Set(uint16_t del, int timer){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	6039      	str	r1, [r7, #0]
 80013da:	80fb      	strh	r3, [r7, #6]
	switch(timer){
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d003      	beq.n	80013ea <Delay_Set+0x1a>
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d005      	beq.n	80013f4 <Delay_Set+0x24>
		break;
	case 2:
		delay2(del);
		break;
	}
}
 80013e8:	e009      	b.n	80013fe <Delay_Set+0x2e>
		delay1(del);
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ffa7 	bl	8001340 <delay1>
		break;
 80013f2:	e004      	b.n	80013fe <Delay_Set+0x2e>
		delay2(del);
 80013f4:	88fb      	ldrh	r3, [r7, #6]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff ffbc 	bl	8001374 <delay2>
		break;
 80013fc:	bf00      	nop
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <Rot_Deg_Fast_Acc2>:

/*
 * Funkcja realizuje obrót silnikiem o jeden skok w zależności od adresu obraca silnikiem M1 lub M2
 */
int Rot_Deg_Fast_Acc2(silnik *S, double angle,int step, int steps){
 8001408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800140c:	b088      	sub	sp, #32
 800140e:	af00      	add	r7, sp, #0
 8001410:	61f8      	str	r0, [r7, #28]
 8001412:	ed87 0b04 	vstr	d0, [r7, #16]
 8001416:	61b9      	str	r1, [r7, #24]
 8001418:	60fa      	str	r2, [r7, #12]

	if(S == &Rob.M[0]){
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	4ab4      	ldr	r2, [pc, #720]	; (80016f0 <Rot_Deg_Fast_Acc2+0x2e8>)
 800141e:	4293      	cmp	r3, r2
 8001420:	f040 816e 	bne.w	8001700 <Rot_Deg_Fast_Acc2+0x2f8>

		if(step < steps){
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	429a      	cmp	r2, r3
 800142a:	f280 814a 	bge.w	80016c2 <Rot_Deg_Fast_Acc2+0x2ba>

			if(angle<0.00){
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	f04f 0300 	mov.w	r3, #0
 8001436:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800143a:	f7ff fb77 	bl	8000b2c <__aeabi_dcmplt>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d01e      	beq.n	8001482 <Rot_Deg_Fast_Acc2+0x7a>
				HAL_GPIO_WritePin(S->GPIO_DIR, S->Dir_Pin,GPIO_PIN_RESET);
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	6818      	ldr	r0, [r3, #0]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	895b      	ldrh	r3, [r3, #10]
 800144c:	2200      	movs	r2, #0
 800144e:	4619      	mov	r1, r3
 8001450:	f003 f9fe 	bl	8004850 <HAL_GPIO_WritePin>
				S->angle = S->Last_angle + (double)step*deg_per_step*(-1);
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800145a:	69b8      	ldr	r0, [r7, #24]
 800145c:	f7ff f88a 	bl	8000574 <__aeabi_i2d>
 8001460:	4ba4      	ldr	r3, [pc, #656]	; (80016f4 <Rot_Deg_Fast_Acc2+0x2ec>)
 8001462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001466:	f7ff f8ef 	bl	8000648 <__aeabi_dmul>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	4620      	mov	r0, r4
 8001470:	4629      	mov	r1, r5
 8001472:	f7fe ff31 	bl	80002d8 <__aeabi_dsub>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	69f9      	ldr	r1, [r7, #28]
 800147c:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001480:	e01d      	b.n	80014be <Rot_Deg_Fast_Acc2+0xb6>
			}
			else{
				HAL_GPIO_WritePin(S->GPIO_DIR, S->Dir_Pin,GPIO_PIN_SET);
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	6818      	ldr	r0, [r3, #0]
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	895b      	ldrh	r3, [r3, #10]
 800148a:	2201      	movs	r2, #1
 800148c:	4619      	mov	r1, r3
 800148e:	f003 f9df 	bl	8004850 <HAL_GPIO_WritePin>
				S->angle = S->Last_angle + (double)step*deg_per_step;
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001498:	69b8      	ldr	r0, [r7, #24]
 800149a:	f7ff f86b 	bl	8000574 <__aeabi_i2d>
 800149e:	4b95      	ldr	r3, [pc, #596]	; (80016f4 <Rot_Deg_Fast_Acc2+0x2ec>)
 80014a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a4:	f7ff f8d0 	bl	8000648 <__aeabi_dmul>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4620      	mov	r0, r4
 80014ae:	4629      	mov	r1, r5
 80014b0:	f7fe ff14 	bl	80002dc <__adddf3>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	69f9      	ldr	r1, [r7, #28]
 80014ba:	e9c1 2306 	strd	r2, r3, [r1, #24]
			}

			if(step <= S->t1){
 80014be:	69b8      	ldr	r0, [r7, #24]
 80014c0:	f7ff f858 	bl	8000574 <__aeabi_i2d>
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80014ca:	f7ff fb39 	bl	8000b40 <__aeabi_dcmple>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d05e      	beq.n	8001592 <Rot_Deg_Fast_Acc2+0x18a>
				t_J1 = t_J1 + 0.01;
 80014d4:	4b88      	ldr	r3, [pc, #544]	; (80016f8 <Rot_Deg_Fast_Acc2+0x2f0>)
 80014d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014da:	a383      	add	r3, pc, #524	; (adr r3, 80016e8 <Rot_Deg_Fast_Acc2+0x2e0>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7fe fefc 	bl	80002dc <__adddf3>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4983      	ldr	r1, [pc, #524]	; (80016f8 <Rot_Deg_Fast_Acc2+0x2f0>)
 80014ea:	e9c1 2300 	strd	r2, r3, [r1]
				S->RPM = (RPM_2_Delay(S->RPM_Max)*(1-exp(-t_J1/S->tau)));
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ff57 	bl	80013a8 <RPM_2_Delay>
 80014fa:	4603      	mov	r3, r0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff f839 	bl	8000574 <__aeabi_i2d>
 8001502:	4604      	mov	r4, r0
 8001504:	460d      	mov	r5, r1
 8001506:	4b7c      	ldr	r3, [pc, #496]	; (80016f8 <Rot_Deg_Fast_Acc2+0x2f0>)
 8001508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150c:	603a      	str	r2, [r7, #0]
 800150e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800151a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800151e:	f7ff f9bd 	bl	800089c <__aeabi_ddiv>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	ec43 2b17 	vmov	d7, r2, r3
 800152a:	eeb0 0a47 	vmov.f32	s0, s14
 800152e:	eef0 0a67 	vmov.f32	s1, s15
 8001532:	f00c fa9d 	bl	800da70 <exp>
 8001536:	ec53 2b10 	vmov	r2, r3, d0
 800153a:	f04f 0000 	mov.w	r0, #0
 800153e:	496f      	ldr	r1, [pc, #444]	; (80016fc <Rot_Deg_Fast_Acc2+0x2f4>)
 8001540:	f7fe feca 	bl	80002d8 <__aeabi_dsub>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4620      	mov	r0, r4
 800154a:	4629      	mov	r1, r5
 800154c:	f7ff f87c 	bl	8000648 <__aeabi_dmul>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4610      	mov	r0, r2
 8001556:	4619      	mov	r1, r3
 8001558:	f7ff fb26 	bl	8000ba8 <__aeabi_d2iz>
 800155c:	4602      	mov	r2, r0
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	64da      	str	r2, [r3, #76]	; 0x4c
				//S->RPM = RPM_2_Delay(S->RPM_Max)/pow((1+exp(-k*t_J1)),a);
				HAL_GPIO_WritePin(S->GPIO_STEP,S->STEP_Pin,GPIO_PIN_SET);
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	6858      	ldr	r0, [r3, #4]
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	891b      	ldrh	r3, [r3, #8]
 800156a:	2201      	movs	r2, #1
 800156c:	4619      	mov	r1, r3
 800156e:	f003 f96f 	bl	8004850 <HAL_GPIO_WritePin>
				Delay_Set(S->RPM,1);
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001576:	b29b      	uxth	r3, r3
 8001578:	2101      	movs	r1, #1
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff ff28 	bl	80013d0 <Delay_Set>
				HAL_GPIO_WritePin(S->GPIO_STEP,S->STEP_Pin,GPIO_PIN_RESET);
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	6858      	ldr	r0, [r3, #4]
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	891b      	ldrh	r3, [r3, #8]
 8001588:	2200      	movs	r2, #0
 800158a:	4619      	mov	r1, r3
 800158c:	f003 f960 	bl	8004850 <HAL_GPIO_WritePin>
 8001590:	e095      	b.n	80016be <Rot_Deg_Fast_Acc2+0x2b6>
			}
			else if((step > S->t1) && (step < S->t2)){
 8001592:	69b8      	ldr	r0, [r7, #24]
 8001594:	f7fe ffee 	bl	8000574 <__aeabi_i2d>
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800159e:	f7ff fae3 	bl	8000b68 <__aeabi_dcmpgt>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d022      	beq.n	80015ee <Rot_Deg_Fast_Acc2+0x1e6>
 80015a8:	69b8      	ldr	r0, [r7, #24]
 80015aa:	f7fe ffe3 	bl	8000574 <__aeabi_i2d>
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80015b4:	f7ff faba 	bl	8000b2c <__aeabi_dcmplt>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d017      	beq.n	80015ee <Rot_Deg_Fast_Acc2+0x1e6>
				HAL_GPIO_WritePin(S->GPIO_STEP,S->STEP_Pin,GPIO_PIN_SET);
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	6858      	ldr	r0, [r3, #4]
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	891b      	ldrh	r3, [r3, #8]
 80015c6:	2201      	movs	r2, #1
 80015c8:	4619      	mov	r1, r3
 80015ca:	f003 f941 	bl	8004850 <HAL_GPIO_WritePin>
				Delay_Set(S->RPM,1);
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	2101      	movs	r1, #1
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fefa 	bl	80013d0 <Delay_Set>
				HAL_GPIO_WritePin(S->GPIO_STEP,S->STEP_Pin,GPIO_PIN_RESET);
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	6858      	ldr	r0, [r3, #4]
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	891b      	ldrh	r3, [r3, #8]
 80015e4:	2200      	movs	r2, #0
 80015e6:	4619      	mov	r1, r3
 80015e8:	f003 f932 	bl	8004850 <HAL_GPIO_WritePin>
 80015ec:	e067      	b.n	80016be <Rot_Deg_Fast_Acc2+0x2b6>
			}
			else if(step >= S->t1){
 80015ee:	69b8      	ldr	r0, [r7, #24]
 80015f0:	f7fe ffc0 	bl	8000574 <__aeabi_i2d>
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80015fa:	f7ff faab 	bl	8000b54 <__aeabi_dcmpge>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d05c      	beq.n	80016be <Rot_Deg_Fast_Acc2+0x2b6>
				t_J1 = t_J1 - 0.01;
 8001604:	4b3c      	ldr	r3, [pc, #240]	; (80016f8 <Rot_Deg_Fast_Acc2+0x2f0>)
 8001606:	e9d3 0100 	ldrd	r0, r1, [r3]
 800160a:	a337      	add	r3, pc, #220	; (adr r3, 80016e8 <Rot_Deg_Fast_Acc2+0x2e0>)
 800160c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001610:	f7fe fe62 	bl	80002d8 <__aeabi_dsub>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4937      	ldr	r1, [pc, #220]	; (80016f8 <Rot_Deg_Fast_Acc2+0x2f0>)
 800161a:	e9c1 2300 	strd	r2, r3, [r1]
				S->RPM = (RPM_2_Delay(S->RPM_Max)*(1-exp(-t_J1/S->tau)));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001622:	b29b      	uxth	r3, r3
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff febf 	bl	80013a8 <RPM_2_Delay>
 800162a:	4603      	mov	r3, r0
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe ffa1 	bl	8000574 <__aeabi_i2d>
 8001632:	4604      	mov	r4, r0
 8001634:	460d      	mov	r5, r1
 8001636:	4b30      	ldr	r3, [pc, #192]	; (80016f8 <Rot_Deg_Fast_Acc2+0x2f0>)
 8001638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163c:	4692      	mov	sl, r2
 800163e:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001648:	4650      	mov	r0, sl
 800164a:	4659      	mov	r1, fp
 800164c:	f7ff f926 	bl	800089c <__aeabi_ddiv>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	ec43 2b17 	vmov	d7, r2, r3
 8001658:	eeb0 0a47 	vmov.f32	s0, s14
 800165c:	eef0 0a67 	vmov.f32	s1, s15
 8001660:	f00c fa06 	bl	800da70 <exp>
 8001664:	ec53 2b10 	vmov	r2, r3, d0
 8001668:	f04f 0000 	mov.w	r0, #0
 800166c:	4923      	ldr	r1, [pc, #140]	; (80016fc <Rot_Deg_Fast_Acc2+0x2f4>)
 800166e:	f7fe fe33 	bl	80002d8 <__aeabi_dsub>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4620      	mov	r0, r4
 8001678:	4629      	mov	r1, r5
 800167a:	f7fe ffe5 	bl	8000648 <__aeabi_dmul>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4610      	mov	r0, r2
 8001684:	4619      	mov	r1, r3
 8001686:	f7ff fa8f 	bl	8000ba8 <__aeabi_d2iz>
 800168a:	4602      	mov	r2, r0
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	64da      	str	r2, [r3, #76]	; 0x4c
				//S->RPM = RPM_2_Delay(S->RPM_Max)/pow((1+exp(-k*t_J1)),a);
				HAL_GPIO_WritePin(S->GPIO_STEP,S->STEP_Pin,GPIO_PIN_SET);
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	6858      	ldr	r0, [r3, #4]
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	891b      	ldrh	r3, [r3, #8]
 8001698:	2201      	movs	r2, #1
 800169a:	4619      	mov	r1, r3
 800169c:	f003 f8d8 	bl	8004850 <HAL_GPIO_WritePin>
				Delay_Set(S->RPM,1);
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	2101      	movs	r1, #1
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fe91 	bl	80013d0 <Delay_Set>
				HAL_GPIO_WritePin(S->GPIO_STEP,S->STEP_Pin,GPIO_PIN_RESET);
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	6858      	ldr	r0, [r3, #4]
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	891b      	ldrh	r3, [r3, #8]
 80016b6:	2200      	movs	r2, #0
 80016b8:	4619      	mov	r1, r3
 80016ba:	f003 f8c9 	bl	8004850 <HAL_GPIO_WritePin>
			}
			return 1;
 80016be:	2301      	movs	r3, #1
 80016c0:	e186      	b.n	80019d0 <Rot_Deg_Fast_Acc2+0x5c8>
		}
		else{
			t_J1=0;
 80016c2:	490d      	ldr	r1, [pc, #52]	; (80016f8 <Rot_Deg_Fast_Acc2+0x2f0>)
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	e9c1 2300 	strd	r2, r3, [r1]
			S->RPM = 0;
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	2200      	movs	r2, #0
 80016d4:	64da      	str	r2, [r3, #76]	; 0x4c
			Delay_Set(S->RPM,1);
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016da:	b29b      	uxth	r3, r3
 80016dc:	2101      	movs	r1, #1
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fe76 	bl	80013d0 <Delay_Set>
			return 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	e173      	b.n	80019d0 <Rot_Deg_Fast_Acc2+0x5c8>
 80016e8:	47ae147b 	.word	0x47ae147b
 80016ec:	3f847ae1 	.word	0x3f847ae1
 80016f0:	200004f8 	.word	0x200004f8
 80016f4:	20000000 	.word	0x20000000
 80016f8:	20000290 	.word	0x20000290
 80016fc:	3ff00000 	.word	0x3ff00000
		}

	}
	else if(S == &Rob.M[1]){
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	4ab9      	ldr	r2, [pc, #740]	; (80019e8 <Rot_Deg_Fast_Acc2+0x5e0>)
 8001704:	4293      	cmp	r3, r2
 8001706:	f040 8161 	bne.w	80019cc <Rot_Deg_Fast_Acc2+0x5c4>

		if(step <= steps){	//kryterium stopu obrotu
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	429a      	cmp	r2, r3
 8001710:	f300 8149 	bgt.w	80019a6 <Rot_Deg_Fast_Acc2+0x59e>

			if(angle<0.00){
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	f04f 0300 	mov.w	r3, #0
 800171c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001720:	f7ff fa04 	bl	8000b2c <__aeabi_dcmplt>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d01e      	beq.n	8001768 <Rot_Deg_Fast_Acc2+0x360>
				HAL_GPIO_WritePin(S->GPIO_DIR, S->Dir_Pin,GPIO_PIN_RESET);
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	6818      	ldr	r0, [r3, #0]
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	895b      	ldrh	r3, [r3, #10]
 8001732:	2200      	movs	r2, #0
 8001734:	4619      	mov	r1, r3
 8001736:	f003 f88b 	bl	8004850 <HAL_GPIO_WritePin>
				S->angle = S->Last_angle + (double)step*deg_per_step*(-1);
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8001740:	69b8      	ldr	r0, [r7, #24]
 8001742:	f7fe ff17 	bl	8000574 <__aeabi_i2d>
 8001746:	4ba9      	ldr	r3, [pc, #676]	; (80019ec <Rot_Deg_Fast_Acc2+0x5e4>)
 8001748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174c:	f7fe ff7c 	bl	8000648 <__aeabi_dmul>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4650      	mov	r0, sl
 8001756:	4659      	mov	r1, fp
 8001758:	f7fe fdbe 	bl	80002d8 <__aeabi_dsub>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	69f9      	ldr	r1, [r7, #28]
 8001762:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001766:	e01d      	b.n	80017a4 <Rot_Deg_Fast_Acc2+0x39c>
			}
			else{
				HAL_GPIO_WritePin(S->GPIO_DIR, S->Dir_Pin,GPIO_PIN_SET);
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	6818      	ldr	r0, [r3, #0]
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	895b      	ldrh	r3, [r3, #10]
 8001770:	2201      	movs	r2, #1
 8001772:	4619      	mov	r1, r3
 8001774:	f003 f86c 	bl	8004850 <HAL_GPIO_WritePin>
				S->angle = S->Last_angle + (double)step*deg_per_step;
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 800177e:	69b8      	ldr	r0, [r7, #24]
 8001780:	f7fe fef8 	bl	8000574 <__aeabi_i2d>
 8001784:	4b99      	ldr	r3, [pc, #612]	; (80019ec <Rot_Deg_Fast_Acc2+0x5e4>)
 8001786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178a:	f7fe ff5d 	bl	8000648 <__aeabi_dmul>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4650      	mov	r0, sl
 8001794:	4659      	mov	r1, fp
 8001796:	f7fe fda1 	bl	80002dc <__adddf3>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	69f9      	ldr	r1, [r7, #28]
 80017a0:	e9c1 2306 	strd	r2, r3, [r1, #24]
			}

			if(step <= S->t1){
 80017a4:	69b8      	ldr	r0, [r7, #24]
 80017a6:	f7fe fee5 	bl	8000574 <__aeabi_i2d>
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80017b0:	f7ff f9c6 	bl	8000b40 <__aeabi_dcmple>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d05d      	beq.n	8001876 <Rot_Deg_Fast_Acc2+0x46e>

				t_J2 = t_J2 + 0.01;
 80017ba:	4b8d      	ldr	r3, [pc, #564]	; (80019f0 <Rot_Deg_Fast_Acc2+0x5e8>)
 80017bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017c0:	a387      	add	r3, pc, #540	; (adr r3, 80019e0 <Rot_Deg_Fast_Acc2+0x5d8>)
 80017c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c6:	f7fe fd89 	bl	80002dc <__adddf3>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4988      	ldr	r1, [pc, #544]	; (80019f0 <Rot_Deg_Fast_Acc2+0x5e8>)
 80017d0:	e9c1 2300 	strd	r2, r3, [r1]

				S->RPM = (RPM_2_Delay(S->RPM_Max)*(1-exp(-t_J2/S->tau)));
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017d8:	b29b      	uxth	r3, r3
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fde4 	bl	80013a8 <RPM_2_Delay>
 80017e0:	4603      	mov	r3, r0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fec6 	bl	8000574 <__aeabi_i2d>
 80017e8:	4604      	mov	r4, r0
 80017ea:	460d      	mov	r5, r1
 80017ec:	4b80      	ldr	r3, [pc, #512]	; (80019f0 <Rot_Deg_Fast_Acc2+0x5e8>)
 80017ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f2:	4690      	mov	r8, r2
 80017f4:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80017fe:	4640      	mov	r0, r8
 8001800:	4649      	mov	r1, r9
 8001802:	f7ff f84b 	bl	800089c <__aeabi_ddiv>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	ec43 2b17 	vmov	d7, r2, r3
 800180e:	eeb0 0a47 	vmov.f32	s0, s14
 8001812:	eef0 0a67 	vmov.f32	s1, s15
 8001816:	f00c f92b 	bl	800da70 <exp>
 800181a:	ec53 2b10 	vmov	r2, r3, d0
 800181e:	f04f 0000 	mov.w	r0, #0
 8001822:	4974      	ldr	r1, [pc, #464]	; (80019f4 <Rot_Deg_Fast_Acc2+0x5ec>)
 8001824:	f7fe fd58 	bl	80002d8 <__aeabi_dsub>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4620      	mov	r0, r4
 800182e:	4629      	mov	r1, r5
 8001830:	f7fe ff0a 	bl	8000648 <__aeabi_dmul>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4610      	mov	r0, r2
 800183a:	4619      	mov	r1, r3
 800183c:	f7ff f9b4 	bl	8000ba8 <__aeabi_d2iz>
 8001840:	4602      	mov	r2, r0
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	64da      	str	r2, [r3, #76]	; 0x4c
				//S->RPM = RPM_2_Delay(S->RPM_Max)/pow((1+exp(-k*t_J1)),a);
				HAL_GPIO_WritePin(S->GPIO_STEP,S->STEP_Pin,GPIO_PIN_SET);
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	6858      	ldr	r0, [r3, #4]
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	891b      	ldrh	r3, [r3, #8]
 800184e:	2201      	movs	r2, #1
 8001850:	4619      	mov	r1, r3
 8001852:	f002 fffd 	bl	8004850 <HAL_GPIO_WritePin>
				Delay_Set(S->RPM,2);	//Wylicza czas pomiedzy stanem wysokim i niskim i ustawia wartosc RPM
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185a:	b29b      	uxth	r3, r3
 800185c:	2102      	movs	r1, #2
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fdb6 	bl	80013d0 <Delay_Set>
				HAL_GPIO_WritePin(S->GPIO_STEP,S->STEP_Pin,GPIO_PIN_RESET);
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	6858      	ldr	r0, [r3, #4]
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	891b      	ldrh	r3, [r3, #8]
 800186c:	2200      	movs	r2, #0
 800186e:	4619      	mov	r1, r3
 8001870:	f002 ffee 	bl	8004850 <HAL_GPIO_WritePin>
 8001874:	e095      	b.n	80019a2 <Rot_Deg_Fast_Acc2+0x59a>
			}
			else if((step > S->t1) && (step< S->t2)){ //Predkosc stała
 8001876:	69b8      	ldr	r0, [r7, #24]
 8001878:	f7fe fe7c 	bl	8000574 <__aeabi_i2d>
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001882:	f7ff f971 	bl	8000b68 <__aeabi_dcmpgt>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d022      	beq.n	80018d2 <Rot_Deg_Fast_Acc2+0x4ca>
 800188c:	69b8      	ldr	r0, [r7, #24]
 800188e:	f7fe fe71 	bl	8000574 <__aeabi_i2d>
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001898:	f7ff f948 	bl	8000b2c <__aeabi_dcmplt>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d017      	beq.n	80018d2 <Rot_Deg_Fast_Acc2+0x4ca>
				HAL_GPIO_WritePin(S->GPIO_STEP,S->STEP_Pin,GPIO_PIN_SET);
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	6858      	ldr	r0, [r3, #4]
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	891b      	ldrh	r3, [r3, #8]
 80018aa:	2201      	movs	r2, #1
 80018ac:	4619      	mov	r1, r3
 80018ae:	f002 ffcf 	bl	8004850 <HAL_GPIO_WritePin>
				Delay_Set(S->RPM,2);
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	2102      	movs	r1, #2
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fd88 	bl	80013d0 <Delay_Set>
				HAL_GPIO_WritePin(S->GPIO_STEP,S->STEP_Pin,GPIO_PIN_RESET);
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	6858      	ldr	r0, [r3, #4]
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	891b      	ldrh	r3, [r3, #8]
 80018c8:	2200      	movs	r2, #0
 80018ca:	4619      	mov	r1, r3
 80018cc:	f002 ffc0 	bl	8004850 <HAL_GPIO_WritePin>
 80018d0:	e067      	b.n	80019a2 <Rot_Deg_Fast_Acc2+0x59a>
			}
			else if(step >= S->t2){ //zwalnianie
 80018d2:	69b8      	ldr	r0, [r7, #24]
 80018d4:	f7fe fe4e 	bl	8000574 <__aeabi_i2d>
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80018de:	f7ff f939 	bl	8000b54 <__aeabi_dcmpge>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d05c      	beq.n	80019a2 <Rot_Deg_Fast_Acc2+0x59a>
				t_J2 = t_J2 - 0.01;
 80018e8:	4b41      	ldr	r3, [pc, #260]	; (80019f0 <Rot_Deg_Fast_Acc2+0x5e8>)
 80018ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018ee:	a33c      	add	r3, pc, #240	; (adr r3, 80019e0 <Rot_Deg_Fast_Acc2+0x5d8>)
 80018f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f4:	f7fe fcf0 	bl	80002d8 <__aeabi_dsub>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	493c      	ldr	r1, [pc, #240]	; (80019f0 <Rot_Deg_Fast_Acc2+0x5e8>)
 80018fe:	e9c1 2300 	strd	r2, r3, [r1]
				S->RPM = (RPM_2_Delay(S->RPM_Max)*(1-exp(-t_J2/S->tau)));
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001906:	b29b      	uxth	r3, r3
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fd4d 	bl	80013a8 <RPM_2_Delay>
 800190e:	4603      	mov	r3, r0
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fe2f 	bl	8000574 <__aeabi_i2d>
 8001916:	4680      	mov	r8, r0
 8001918:	4689      	mov	r9, r1
 800191a:	4b35      	ldr	r3, [pc, #212]	; (80019f0 <Rot_Deg_Fast_Acc2+0x5e8>)
 800191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001920:	4614      	mov	r4, r2
 8001922:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800192c:	4620      	mov	r0, r4
 800192e:	4629      	mov	r1, r5
 8001930:	f7fe ffb4 	bl	800089c <__aeabi_ddiv>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	ec43 2b17 	vmov	d7, r2, r3
 800193c:	eeb0 0a47 	vmov.f32	s0, s14
 8001940:	eef0 0a67 	vmov.f32	s1, s15
 8001944:	f00c f894 	bl	800da70 <exp>
 8001948:	ec53 2b10 	vmov	r2, r3, d0
 800194c:	f04f 0000 	mov.w	r0, #0
 8001950:	4928      	ldr	r1, [pc, #160]	; (80019f4 <Rot_Deg_Fast_Acc2+0x5ec>)
 8001952:	f7fe fcc1 	bl	80002d8 <__aeabi_dsub>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4640      	mov	r0, r8
 800195c:	4649      	mov	r1, r9
 800195e:	f7fe fe73 	bl	8000648 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	f7ff f91d 	bl	8000ba8 <__aeabi_d2iz>
 800196e:	4602      	mov	r2, r0
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	64da      	str	r2, [r3, #76]	; 0x4c
				//S->RPM = RPM_2_Delay(S->RPM_Max)/pow((1+exp(-k*t_J1)),a);
				HAL_GPIO_WritePin(S->GPIO_STEP,S->STEP_Pin,GPIO_PIN_SET);
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	6858      	ldr	r0, [r3, #4]
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	891b      	ldrh	r3, [r3, #8]
 800197c:	2201      	movs	r2, #1
 800197e:	4619      	mov	r1, r3
 8001980:	f002 ff66 	bl	8004850 <HAL_GPIO_WritePin>
				Delay_Set(S->RPM,2);
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001988:	b29b      	uxth	r3, r3
 800198a:	2102      	movs	r1, #2
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fd1f 	bl	80013d0 <Delay_Set>
				HAL_GPIO_WritePin(S->GPIO_STEP,S->STEP_Pin,GPIO_PIN_RESET);
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	6858      	ldr	r0, [r3, #4]
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	891b      	ldrh	r3, [r3, #8]
 800199a:	2200      	movs	r2, #0
 800199c:	4619      	mov	r1, r3
 800199e:	f002 ff57 	bl	8004850 <HAL_GPIO_WritePin>
			}
			return 1;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e014      	b.n	80019d0 <Rot_Deg_Fast_Acc2+0x5c8>
		}
		else{
			t_J2=0;
 80019a6:	4912      	ldr	r1, [pc, #72]	; (80019f0 <Rot_Deg_Fast_Acc2+0x5e8>)
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	e9c1 2300 	strd	r2, r3, [r1]
			S->RPM = 0;
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	2200      	movs	r2, #0
 80019b8:	64da      	str	r2, [r3, #76]	; 0x4c
			Delay_Set(S->RPM,2);
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019be:	b29b      	uxth	r3, r3
 80019c0:	2102      	movs	r1, #2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fd04 	bl	80013d0 <Delay_Set>
			return 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	e001      	b.n	80019d0 <Rot_Deg_Fast_Acc2+0x5c8>
		}
	}
	else{
		return -1;
 80019cc:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3720      	adds	r7, #32
 80019d4:	46bd      	mov	sp, r7
 80019d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019da:	bf00      	nop
 80019dc:	f3af 8000 	nop.w
 80019e0:	47ae147b 	.word	0x47ae147b
 80019e4:	3f847ae1 	.word	0x3f847ae1
 80019e8:	20000550 	.word	0x20000550
 80019ec:	20000000 	.word	0x20000000
 80019f0:	20000298 	.word	0x20000298
 80019f4:	3ff00000 	.word	0x3ff00000

080019f8 <Move_J1_J2>:
/*
 * Funkcja Obraca na przemian 2 silnikami tworząc wrażenie, że poruszają się w tym samym czasie
 */
void Move_J1_J2(robot *R, double *ang1, double *ang2){
 80019f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019fc:	b086      	sub	sp, #24
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]

	//Wyliczenie ilosc kroków  na bazie podanego kąta
	steps1 = round((fabs(*ang1)/deg_per_step));	steps1 = steps1 * R->M[0].gear;
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0c:	4690      	mov	r8, r2
 8001a0e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001a12:	4b70      	ldr	r3, [pc, #448]	; (8001bd4 <Move_J1_J2+0x1dc>)
 8001a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a18:	4640      	mov	r0, r8
 8001a1a:	4649      	mov	r1, r9
 8001a1c:	f7fe ff3e 	bl	800089c <__aeabi_ddiv>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	ec43 2b17 	vmov	d7, r2, r3
 8001a28:	eeb0 0a47 	vmov.f32	s0, s14
 8001a2c:	eef0 0a67 	vmov.f32	s1, s15
 8001a30:	f00b ff80 	bl	800d934 <round>
 8001a34:	ec53 2b10 	vmov	r2, r3, d0
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f7ff f8b4 	bl	8000ba8 <__aeabi_d2iz>
 8001a40:	4603      	mov	r3, r0
 8001a42:	4a65      	ldr	r2, [pc, #404]	; (8001bd8 <Move_J1_J2+0x1e0>)
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8001a4c:	4a62      	ldr	r2, [pc, #392]	; (8001bd8 <Move_J1_J2+0x1e0>)
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	fb02 f303 	mul.w	r3, r2, r3
 8001a54:	4a60      	ldr	r2, [pc, #384]	; (8001bd8 <Move_J1_J2+0x1e0>)
 8001a56:	6013      	str	r3, [r2, #0]
	steps2 = round((fabs(*ang2)/deg_per_step));	steps2 = steps2 * R->M[0].gear;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5e:	4614      	mov	r4, r2
 8001a60:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001a64:	4b5b      	ldr	r3, [pc, #364]	; (8001bd4 <Move_J1_J2+0x1dc>)
 8001a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	4629      	mov	r1, r5
 8001a6e:	f7fe ff15 	bl	800089c <__aeabi_ddiv>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	ec43 2b17 	vmov	d7, r2, r3
 8001a7a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a7e:	eef0 0a67 	vmov.f32	s1, s15
 8001a82:	f00b ff57 	bl	800d934 <round>
 8001a86:	ec53 2b10 	vmov	r2, r3, d0
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f7ff f88b 	bl	8000ba8 <__aeabi_d2iz>
 8001a92:	4603      	mov	r3, r0
 8001a94:	4a51      	ldr	r2, [pc, #324]	; (8001bdc <Move_J1_J2+0x1e4>)
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8001a9e:	4a4f      	ldr	r2, [pc, #316]	; (8001bdc <Move_J1_J2+0x1e4>)
 8001aa0:	6812      	ldr	r2, [r2, #0]
 8001aa2:	fb02 f303 	mul.w	r3, r2, r3
 8001aa6:	4a4d      	ldr	r2, [pc, #308]	; (8001bdc <Move_J1_J2+0x1e4>)
 8001aa8:	6013      	str	r3, [r2, #0]
	int steps_max = steps1;
 8001aaa:	4b4b      	ldr	r3, [pc, #300]	; (8001bd8 <Move_J1_J2+0x1e0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	617b      	str	r3, [r7, #20]

	//Ustawianie maksymalnej ilosci krokow do przebycia
	if(steps1<steps2){
 8001ab0:	4b49      	ldr	r3, [pc, #292]	; (8001bd8 <Move_J1_J2+0x1e0>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4b49      	ldr	r3, [pc, #292]	; (8001bdc <Move_J1_J2+0x1e4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	da02      	bge.n	8001ac2 <Move_J1_J2+0xca>
		steps_max = steps2;
 8001abc:	4b47      	ldr	r3, [pc, #284]	; (8001bdc <Move_J1_J2+0x1e4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	617b      	str	r3, [r7, #20]
	}

	// Wyliczanie ti i t2 dla silników M1 i M2
	R->M[0].t1 = steps1*(R->M[0].t1_proc);
 8001ac2:	4b45      	ldr	r3, [pc, #276]	; (8001bd8 <Move_J1_J2+0x1e0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7fe fd54 	bl	8000574 <__aeabi_i2d>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8001ad2:	f7fe fdb9 	bl	8000648 <__aeabi_dmul>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	68f9      	ldr	r1, [r7, #12]
 8001adc:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
	R->M[0].t2 = steps1*(R->M[0].t2_proc);
 8001ae0:	4b3d      	ldr	r3, [pc, #244]	; (8001bd8 <Move_J1_J2+0x1e0>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fd45 	bl	8000574 <__aeabi_i2d>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 8001af0:	f7fe fdaa 	bl	8000648 <__aeabi_dmul>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	68f9      	ldr	r1, [r7, #12]
 8001afa:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
	R->M[1].t1 = steps2*(R->M[1].t1_proc);
 8001afe:	4b37      	ldr	r3, [pc, #220]	; (8001bdc <Move_J1_J2+0x1e4>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fd36 	bl	8000574 <__aeabi_i2d>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	; 0x100
 8001b0e:	f7fe fd9b 	bl	8000648 <__aeabi_dmul>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	68f9      	ldr	r1, [r7, #12]
 8001b18:	e9c1 2344 	strd	r2, r3, [r1, #272]	; 0x110
	R->M[1].t2 = steps2*(R->M[1].t2_proc);
 8001b1c:	4b2f      	ldr	r3, [pc, #188]	; (8001bdc <Move_J1_J2+0x1e4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fd27 	bl	8000574 <__aeabi_i2d>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 8001b2c:	f7fe fd8c 	bl	8000648 <__aeabi_dmul>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	68f9      	ldr	r1, [r7, #12]
 8001b36:	e9c1 2346 	strd	r2, r3, [r1, #280]	; 0x118

	for( int step=0; step <= steps_max ;step++ ){
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]
 8001b3e:	e032      	b.n	8001ba6 <Move_J1_J2+0x1ae>

		Rot_Deg_Fast_Acc2(&R->M[0], *ang1, step , steps1);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	ed93 7b00 	vldr	d7, [r3]
 8001b4c:	4b22      	ldr	r3, [pc, #136]	; (8001bd8 <Move_J1_J2+0x1e0>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	461a      	mov	r2, r3
 8001b52:	6939      	ldr	r1, [r7, #16]
 8001b54:	eeb0 0a47 	vmov.f32	s0, s14
 8001b58:	eef0 0a67 	vmov.f32	s1, s15
 8001b5c:	f7ff fc54 	bl	8001408 <Rot_Deg_Fast_Acc2>
		Rot_Deg_Fast_Acc2(&R->M[1], *ang2, step , steps2);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f103 00e0 	add.w	r0, r3, #224	; 0xe0
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	ed93 7b00 	vldr	d7, [r3]
 8001b6c:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <Move_J1_J2+0x1e4>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	6939      	ldr	r1, [r7, #16]
 8001b74:	eeb0 0a47 	vmov.f32	s0, s14
 8001b78:	eef0 0a67 	vmov.f32	s1, s15
 8001b7c:	f7ff fc44 	bl	8001408 <Rot_Deg_Fast_Acc2>
		delay2(1000);
 8001b80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b84:	f7ff fbf6 	bl	8001374 <delay2>
		if(!J2_limit_flag){
 8001b88:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <Move_J1_J2+0x1e8>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d107      	bne.n	8001ba0 <Move_J1_J2+0x1a8>
			if( HAL_GPIO_ReadPin(GPIOA, LIMIT_J2_Pin) == GPIO_PIN_SET ){
 8001b90:	2120      	movs	r1, #32
 8001b92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b96:	f002 fe43 	bl	8004820 <HAL_GPIO_ReadPin>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d007      	beq.n	8001bb0 <Move_J1_J2+0x1b8>
	for( int step=0; step <= steps_max ;step++ ){
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	ddc8      	ble.n	8001b40 <Move_J1_J2+0x148>
 8001bae:	e000      	b.n	8001bb2 <Move_J1_J2+0x1ba>
				break;
 8001bb0:	bf00      	nop
			}
		}
	}
	R->M[0].Last_angle = R->M[0].angle;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001bb8:	68f9      	ldr	r1, [r7, #12]
 8001bba:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
	R->M[1].Last_angle = R->M[1].angle;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8001bc4:	68f9      	ldr	r1, [r7, #12]
 8001bc6:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0

}
 8001bca:	bf00      	nop
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bd4:	20000000 	.word	0x20000000
 8001bd8:	200002a0 	.word	0x200002a0
 8001bdc:	200002a4 	.word	0x200002a4
 8001be0:	2000030f 	.word	0x2000030f
 8001be4:	00000000 	.word	0x00000000

08001be8 <Rot_Deg_Fast_Acc>:
/*
 * Funkcja realizuje obrót silnikiem o dany kąt
 */
void Rot_Deg_Fast_Acc(silnik *S, double angle){
 8001be8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bec:	b08c      	sub	sp, #48	; 0x30
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	61f8      	str	r0, [r7, #28]
 8001bf2:	ed87 0b04 	vstr	d0, [r7, #16]

	int steps = ceil((fabs(angle)/deg_per_step));
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	4b87      	ldr	r3, [pc, #540]	; (8001e20 <Rot_Deg_Fast_Acc+0x238>)
 8001c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c08:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c0c:	f7fe fe46 	bl	800089c <__aeabi_ddiv>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	ec43 2b17 	vmov	d7, r2, r3
 8001c18:	eeb0 0a47 	vmov.f32	s0, s14
 8001c1c:	eef0 0a67 	vmov.f32	s1, s15
 8001c20:	f00b fdaa 	bl	800d778 <ceil>
 8001c24:	ec53 2b10 	vmov	r2, r3, d0
 8001c28:	4610      	mov	r0, r2
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	f7fe ffbc 	bl	8000ba8 <__aeabi_d2iz>
 8001c30:	4603      	mov	r3, r0
 8001c32:	623b      	str	r3, [r7, #32]
	steps = (int)steps*S->gear;
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001c38:	6a3b      	ldr	r3, [r7, #32]
 8001c3a:	fb02 f303 	mul.w	r3, r2, r3
 8001c3e:	623b      	str	r3, [r7, #32]
	S->t1 = steps*(S->t1_proc);
 8001c40:	6a38      	ldr	r0, [r7, #32]
 8001c42:	f7fe fc97 	bl	8000574 <__aeabi_i2d>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001c4c:	f7fe fcfc 	bl	8000648 <__aeabi_dmul>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	69f9      	ldr	r1, [r7, #28]
 8001c56:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	S->t2 = steps*(S->t2_proc);
 8001c5a:	6a38      	ldr	r0, [r7, #32]
 8001c5c:	f7fe fc8a 	bl	8000574 <__aeabi_i2d>
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001c66:	f7fe fcef 	bl	8000648 <__aeabi_dmul>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	69f9      	ldr	r1, [r7, #28]
 8001c70:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	double t = 0;
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	f04f 0300 	mov.w	r3, #0
 8001c7c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	for(int step=0; step <= steps ;step++)
 8001c80:	2300      	movs	r3, #0
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
 8001c84:	e16b      	b.n	8001f5e <Rot_Deg_Fast_Acc+0x376>
	{

		if(angle<0.00){
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	f04f 0300 	mov.w	r3, #0
 8001c8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c92:	f7fe ff4b 	bl	8000b2c <__aeabi_dcmplt>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d01e      	beq.n	8001cda <Rot_Deg_Fast_Acc+0xf2>
			HAL_GPIO_WritePin(S->GPIO_DIR, S->Dir_Pin,GPIO_PIN_RESET);
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	6818      	ldr	r0, [r3, #0]
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	895b      	ldrh	r3, [r3, #10]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f002 fdd2 	bl	8004850 <HAL_GPIO_WritePin>
			S->angle = S->Last_angle + (double)step*deg_per_step*(-1);
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8001cb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001cb4:	f7fe fc5e 	bl	8000574 <__aeabi_i2d>
 8001cb8:	4b59      	ldr	r3, [pc, #356]	; (8001e20 <Rot_Deg_Fast_Acc+0x238>)
 8001cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbe:	f7fe fcc3 	bl	8000648 <__aeabi_dmul>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4640      	mov	r0, r8
 8001cc8:	4649      	mov	r1, r9
 8001cca:	f7fe fb05 	bl	80002d8 <__aeabi_dsub>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	69f9      	ldr	r1, [r7, #28]
 8001cd4:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001cd8:	e01d      	b.n	8001d16 <Rot_Deg_Fast_Acc+0x12e>
		}
		else{
			HAL_GPIO_WritePin(S->GPIO_DIR, S->Dir_Pin,GPIO_PIN_SET);
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	6818      	ldr	r0, [r3, #0]
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	895b      	ldrh	r3, [r3, #10]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f002 fdb3 	bl	8004850 <HAL_GPIO_WritePin>
			S->angle = S->Last_angle + (double)step*deg_per_step;
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8001cf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001cf2:	f7fe fc3f 	bl	8000574 <__aeabi_i2d>
 8001cf6:	4b4a      	ldr	r3, [pc, #296]	; (8001e20 <Rot_Deg_Fast_Acc+0x238>)
 8001cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfc:	f7fe fca4 	bl	8000648 <__aeabi_dmul>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4640      	mov	r0, r8
 8001d06:	4649      	mov	r1, r9
 8001d08:	f7fe fae8 	bl	80002dc <__adddf3>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	69f9      	ldr	r1, [r7, #28]
 8001d12:	e9c1 2306 	strd	r2, r3, [r1, #24]
		}

		if(!z_limit_flag){
 8001d16:	4b43      	ldr	r3, [pc, #268]	; (8001e24 <Rot_Deg_Fast_Acc+0x23c>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d108      	bne.n	8001d30 <Rot_Deg_Fast_Acc+0x148>
			if( HAL_GPIO_ReadPin(GPIOA, LIMIT_Z_Pin) == GPIO_PIN_SET ){
 8001d1e:	2140      	movs	r1, #64	; 0x40
 8001d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d24:	f002 fd7c 	bl	8004820 <HAL_GPIO_ReadPin>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d10d      	bne.n	8001d4a <Rot_Deg_Fast_Acc+0x162>
				break;
 8001d2e:	e11d      	b.n	8001f6c <Rot_Deg_Fast_Acc+0x384>
			}
		}
		else if(!J2_limit_flag){
 8001d30:	4b3d      	ldr	r3, [pc, #244]	; (8001e28 <Rot_Deg_Fast_Acc+0x240>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d108      	bne.n	8001d4a <Rot_Deg_Fast_Acc+0x162>
			if( HAL_GPIO_ReadPin(GPIOA, LIMIT_J2_Pin) == GPIO_PIN_SET ){
 8001d38:	2120      	movs	r1, #32
 8001d3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d3e:	f002 fd6f 	bl	8004820 <HAL_GPIO_ReadPin>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	f000 8110 	beq.w	8001f6a <Rot_Deg_Fast_Acc+0x382>
				break;
			}
		}
		if(step <=S->t1){
 8001d4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d4c:	f7fe fc12 	bl	8000574 <__aeabi_i2d>
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001d56:	f7fe fef3 	bl	8000b40 <__aeabi_dcmple>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d067      	beq.n	8001e30 <Rot_Deg_Fast_Acc+0x248>
			t = t + 0.001;
 8001d60:	a32d      	add	r3, pc, #180	; (adr r3, 8001e18 <Rot_Deg_Fast_Acc+0x230>)
 8001d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d6a:	f7fe fab7 	bl	80002dc <__adddf3>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			S->RPM = (RPM_2_Delay(S->RPM_Max)*(1-exp(-t/(S->tau))));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fb13 	bl	80013a8 <RPM_2_Delay>
 8001d82:	4603      	mov	r3, r0
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fbf5 	bl	8000574 <__aeabi_i2d>
 8001d8a:	4680      	mov	r8, r0
 8001d8c:	4689      	mov	r9, r1
 8001d8e:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8001d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d92:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	4629      	mov	r1, r5
 8001da0:	f7fe fd7c 	bl	800089c <__aeabi_ddiv>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	ec43 2b17 	vmov	d7, r2, r3
 8001dac:	eeb0 0a47 	vmov.f32	s0, s14
 8001db0:	eef0 0a67 	vmov.f32	s1, s15
 8001db4:	f00b fe5c 	bl	800da70 <exp>
 8001db8:	ec53 2b10 	vmov	r2, r3, d0
 8001dbc:	f04f 0000 	mov.w	r0, #0
 8001dc0:	491a      	ldr	r1, [pc, #104]	; (8001e2c <Rot_Deg_Fast_Acc+0x244>)
 8001dc2:	f7fe fa89 	bl	80002d8 <__aeabi_dsub>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4640      	mov	r0, r8
 8001dcc:	4649      	mov	r1, r9
 8001dce:	f7fe fc3b 	bl	8000648 <__aeabi_dmul>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f7fe fee5 	bl	8000ba8 <__aeabi_d2iz>
 8001dde:	4602      	mov	r2, r0
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	64da      	str	r2, [r3, #76]	; 0x4c
			HAL_GPIO_WritePin(S->GPIO_STEP,S->STEP_Pin,GPIO_PIN_SET);
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	6858      	ldr	r0, [r3, #4]
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	891b      	ldrh	r3, [r3, #8]
 8001dec:	2201      	movs	r2, #1
 8001dee:	4619      	mov	r1, r3
 8001df0:	f002 fd2e 	bl	8004850 <HAL_GPIO_WritePin>
			Delay_Set(S->RPM,1);
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fae7 	bl	80013d0 <Delay_Set>
			HAL_GPIO_WritePin(S->GPIO_STEP,S->STEP_Pin,GPIO_PIN_RESET);
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	6858      	ldr	r0, [r3, #4]
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	891b      	ldrh	r3, [r3, #8]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f002 fd1f 	bl	8004850 <HAL_GPIO_WritePin>
 8001e12:	e0a1      	b.n	8001f58 <Rot_Deg_Fast_Acc+0x370>
 8001e14:	f3af 8000 	nop.w
 8001e18:	d2f1a9fc 	.word	0xd2f1a9fc
 8001e1c:	3f50624d 	.word	0x3f50624d
 8001e20:	20000000 	.word	0x20000000
 8001e24:	2000030e 	.word	0x2000030e
 8001e28:	2000030f 	.word	0x2000030f
 8001e2c:	3ff00000 	.word	0x3ff00000
		}

		else if(step >=S->t2){
 8001e30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e32:	f7fe fb9f 	bl	8000574 <__aeabi_i2d>
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001e3c:	f7fe fe8a 	bl	8000b54 <__aeabi_dcmpge>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d05b      	beq.n	8001efe <Rot_Deg_Fast_Acc+0x316>
			t = t - 0.001;
 8001e46:	a359      	add	r3, pc, #356	; (adr r3, 8001fac <Rot_Deg_Fast_Acc+0x3c4>)
 8001e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e50:	f7fe fa42 	bl	80002d8 <__aeabi_dsub>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			S->RPM = (RPM_2_Delay(S->RPM_Max)*(1-exp(-t/(S->tau))));
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff faa0 	bl	80013a8 <RPM_2_Delay>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fb82 	bl	8000574 <__aeabi_i2d>
 8001e70:	4680      	mov	r8, r0
 8001e72:	4689      	mov	r9, r1
 8001e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e7e:	607b      	str	r3, [r7, #4]
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001e86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e8a:	f7fe fd07 	bl	800089c <__aeabi_ddiv>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	ec43 2b17 	vmov	d7, r2, r3
 8001e96:	eeb0 0a47 	vmov.f32	s0, s14
 8001e9a:	eef0 0a67 	vmov.f32	s1, s15
 8001e9e:	f00b fde7 	bl	800da70 <exp>
 8001ea2:	ec53 2b10 	vmov	r2, r3, d0
 8001ea6:	f04f 0000 	mov.w	r0, #0
 8001eaa:	493f      	ldr	r1, [pc, #252]	; (8001fa8 <Rot_Deg_Fast_Acc+0x3c0>)
 8001eac:	f7fe fa14 	bl	80002d8 <__aeabi_dsub>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4640      	mov	r0, r8
 8001eb6:	4649      	mov	r1, r9
 8001eb8:	f7fe fbc6 	bl	8000648 <__aeabi_dmul>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f7fe fe70 	bl	8000ba8 <__aeabi_d2iz>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	64da      	str	r2, [r3, #76]	; 0x4c
			HAL_GPIO_WritePin(S->GPIO_STEP,S->STEP_Pin,GPIO_PIN_SET);
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	6858      	ldr	r0, [r3, #4]
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	891b      	ldrh	r3, [r3, #8]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f002 fcb9 	bl	8004850 <HAL_GPIO_WritePin>
			Delay_Set(S->RPM,1);
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fa72 	bl	80013d0 <Delay_Set>
			HAL_GPIO_WritePin(S->GPIO_STEP,S->STEP_Pin,GPIO_PIN_RESET);
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	6858      	ldr	r0, [r3, #4]
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	891b      	ldrh	r3, [r3, #8]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	f002 fcaa 	bl	8004850 <HAL_GPIO_WritePin>
 8001efc:	e02c      	b.n	8001f58 <Rot_Deg_Fast_Acc+0x370>
		}
		else if((step > S->t1) && (step < S->t2)){
 8001efe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f00:	f7fe fb38 	bl	8000574 <__aeabi_i2d>
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001f0a:	f7fe fe2d 	bl	8000b68 <__aeabi_dcmpgt>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d021      	beq.n	8001f58 <Rot_Deg_Fast_Acc+0x370>
 8001f14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f16:	f7fe fb2d 	bl	8000574 <__aeabi_i2d>
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001f20:	f7fe fe04 	bl	8000b2c <__aeabi_dcmplt>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d016      	beq.n	8001f58 <Rot_Deg_Fast_Acc+0x370>
			HAL_GPIO_WritePin(S->GPIO_STEP,S->STEP_Pin,GPIO_PIN_SET);
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	6858      	ldr	r0, [r3, #4]
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	891b      	ldrh	r3, [r3, #8]
 8001f32:	2201      	movs	r2, #1
 8001f34:	4619      	mov	r1, r3
 8001f36:	f002 fc8b 	bl	8004850 <HAL_GPIO_WritePin>
			Delay_Set(S->RPM,1);
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	2101      	movs	r1, #1
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff fa44 	bl	80013d0 <Delay_Set>
			HAL_GPIO_WritePin(S->GPIO_STEP,S->STEP_Pin,GPIO_PIN_RESET);
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	6858      	ldr	r0, [r3, #4]
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	891b      	ldrh	r3, [r3, #8]
 8001f50:	2200      	movs	r2, #0
 8001f52:	4619      	mov	r1, r3
 8001f54:	f002 fc7c 	bl	8004850 <HAL_GPIO_WritePin>
	for(int step=0; step <= steps ;step++)
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	f77f ae8f 	ble.w	8001c86 <Rot_Deg_Fast_Acc+0x9e>
 8001f68:	e000      	b.n	8001f6c <Rot_Deg_Fast_Acc+0x384>
				break;
 8001f6a:	bf00      	nop
		}
	}
	S->Last_angle = S->angle;
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001f72:	69f9      	ldr	r1, [r7, #28]
 8001f74:	e9c1 2304 	strd	r2, r3, [r1, #16]
	S->RPM = 0;
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	64da      	str	r2, [r3, #76]	; 0x4c
	Delay_Set(S->RPM,1);
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	2101      	movs	r1, #1
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fa22 	bl	80013d0 <Delay_Set>
	t=0;
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
}
 8001f98:	bf00      	nop
 8001f9a:	3730      	adds	r7, #48	; 0x30
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001fa2:	bf00      	nop
 8001fa4:	f3af 8000 	nop.w
 8001fa8:	3ff00000 	.word	0x3ff00000
 8001fac:	d2f1a9fc 	.word	0xd2f1a9fc
 8001fb0:	3f50624d 	.word	0x3f50624d
 8001fb4:	00000000 	.word	0x00000000

08001fb8 <kinematic>:
/*
 * Obliczanie kinematyki prostej
 */
void kinematic( double deg_J1, double deg_J2,double *X, double *Y){
 8001fb8:	b5b0      	push	{r4, r5, r7, lr}
 8001fba:	b08a      	sub	sp, #40	; 0x28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	ed87 0b04 	vstr	d0, [r7, #16]
 8001fc2:	ed87 1b02 	vstr	d1, [r7, #8]
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]

	double J1=(deg_J1*PI)/180.00,J2=(deg_J2*PI)/180.00;;
 8001fca:	a353      	add	r3, pc, #332	; (adr r3, 8002118 <kinematic+0x160>)
 8001fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001fd4:	f7fe fb38 	bl	8000648 <__aeabi_dmul>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4610      	mov	r0, r2
 8001fde:	4619      	mov	r1, r3
 8001fe0:	f04f 0200 	mov.w	r2, #0
 8001fe4:	4b4e      	ldr	r3, [pc, #312]	; (8002120 <kinematic+0x168>)
 8001fe6:	f7fe fc59 	bl	800089c <__aeabi_ddiv>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001ff2:	a349      	add	r3, pc, #292	; (adr r3, 8002118 <kinematic+0x160>)
 8001ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ffc:	f7fe fb24 	bl	8000648 <__aeabi_dmul>
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	4610      	mov	r0, r2
 8002006:	4619      	mov	r1, r3
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	4b44      	ldr	r3, [pc, #272]	; (8002120 <kinematic+0x168>)
 800200e:	f7fe fc45 	bl	800089c <__aeabi_ddiv>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	e9c7 2306 	strd	r2, r3, [r7, #24]

	*X = round( L1 * cos(J1) + L2 * cos(J1 + J2) );
 800201a:	ed97 0b08 	vldr	d0, [r7, #32]
 800201e:	f00b fc2f 	bl	800d880 <cos>
 8002022:	ec51 0b10 	vmov	r0, r1, d0
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	4b3e      	ldr	r3, [pc, #248]	; (8002124 <kinematic+0x16c>)
 800202c:	f7fe fb0c 	bl	8000648 <__aeabi_dmul>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4614      	mov	r4, r2
 8002036:	461d      	mov	r5, r3
 8002038:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800203c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002040:	f7fe f94c 	bl	80002dc <__adddf3>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	ec43 2b17 	vmov	d7, r2, r3
 800204c:	eeb0 0a47 	vmov.f32	s0, s14
 8002050:	eef0 0a67 	vmov.f32	s1, s15
 8002054:	f00b fc14 	bl	800d880 <cos>
 8002058:	ec51 0b10 	vmov	r0, r1, d0
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	4b31      	ldr	r3, [pc, #196]	; (8002128 <kinematic+0x170>)
 8002062:	f7fe faf1 	bl	8000648 <__aeabi_dmul>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	4620      	mov	r0, r4
 800206c:	4629      	mov	r1, r5
 800206e:	f7fe f935 	bl	80002dc <__adddf3>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	ec43 2b17 	vmov	d7, r2, r3
 800207a:	eeb0 0a47 	vmov.f32	s0, s14
 800207e:	eef0 0a67 	vmov.f32	s1, s15
 8002082:	f00b fc57 	bl	800d934 <round>
 8002086:	eeb0 7a40 	vmov.f32	s14, s0
 800208a:	eef0 7a60 	vmov.f32	s15, s1
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	ed83 7b00 	vstr	d7, [r3]
	*Y = round( L1 * sin(J1) + L2 * sin(J1 + J2) );
 8002094:	ed97 0b08 	vldr	d0, [r7, #32]
 8002098:	f00b fc92 	bl	800d9c0 <sin>
 800209c:	ec51 0b10 	vmov	r0, r1, d0
 80020a0:	f04f 0200 	mov.w	r2, #0
 80020a4:	4b1f      	ldr	r3, [pc, #124]	; (8002124 <kinematic+0x16c>)
 80020a6:	f7fe facf 	bl	8000648 <__aeabi_dmul>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4614      	mov	r4, r2
 80020b0:	461d      	mov	r5, r3
 80020b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020b6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80020ba:	f7fe f90f 	bl	80002dc <__adddf3>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	ec43 2b17 	vmov	d7, r2, r3
 80020c6:	eeb0 0a47 	vmov.f32	s0, s14
 80020ca:	eef0 0a67 	vmov.f32	s1, s15
 80020ce:	f00b fc77 	bl	800d9c0 <sin>
 80020d2:	ec51 0b10 	vmov	r0, r1, d0
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	4b13      	ldr	r3, [pc, #76]	; (8002128 <kinematic+0x170>)
 80020dc:	f7fe fab4 	bl	8000648 <__aeabi_dmul>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4620      	mov	r0, r4
 80020e6:	4629      	mov	r1, r5
 80020e8:	f7fe f8f8 	bl	80002dc <__adddf3>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	ec43 2b17 	vmov	d7, r2, r3
 80020f4:	eeb0 0a47 	vmov.f32	s0, s14
 80020f8:	eef0 0a67 	vmov.f32	s1, s15
 80020fc:	f00b fc1a 	bl	800d934 <round>
 8002100:	eeb0 7a40 	vmov.f32	s14, s0
 8002104:	eef0 7a60 	vmov.f32	s15, s1
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	ed83 7b00 	vstr	d7, [r3]

}
 800210e:	bf00      	nop
 8002110:	3728      	adds	r7, #40	; 0x28
 8002112:	46bd      	mov	sp, r7
 8002114:	bdb0      	pop	{r4, r5, r7, pc}
 8002116:	bf00      	nop
 8002118:	54442eea 	.word	0x54442eea
 800211c:	400921fb 	.word	0x400921fb
 8002120:	40668000 	.word	0x40668000
 8002124:	40690000 	.word	0x40690000
 8002128:	40604000 	.word	0x40604000
 800212c:	00000000 	.word	0x00000000

08002130 <inverse_kinematic>:
/*
 * Obliczanie kinematyki odwrotnej
 * + zabezpieczenie przed przekroczeniem obszaru roboczego ramienia
 */
void inverse_kinematic(double X,double Y, double *J1, double *J2){
 8002130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002134:	b08c      	sub	sp, #48	; 0x30
 8002136:	af00      	add	r7, sp, #0
 8002138:	ed87 0b04 	vstr	d0, [r7, #16]
 800213c:	ed87 1b02 	vstr	d1, [r7, #8]
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	6039      	str	r1, [r7, #0]
	double J1_rad = PI,J2_rad = PI;
 8002144:	a331      	add	r3, pc, #196	; (adr r3, 800220c <inverse_kinematic+0xdc>)
 8002146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800214e:	a32f      	add	r3, pc, #188	; (adr r3, 800220c <inverse_kinematic+0xdc>)
 8002150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002154:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double R = sqrtl(X*X+Y*Y);
 8002158:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800215c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002160:	f7fe fa72 	bl	8000648 <__aeabi_dmul>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4692      	mov	sl, r2
 800216a:	469b      	mov	fp, r3
 800216c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002170:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002174:	f7fe fa68 	bl	8000648 <__aeabi_dmul>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	4650      	mov	r0, sl
 800217e:	4659      	mov	r1, fp
 8002180:	f7fe f8ac 	bl	80002dc <__adddf3>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	ec43 2b17 	vmov	d7, r2, r3
 800218c:	eeb0 0a47 	vmov.f32	s0, s14
 8002190:	eef0 0a67 	vmov.f32	s1, s15
 8002194:	f00b fc68 	bl	800da68 <sqrtl>
 8002198:	ed87 0b06 	vstr	d0, [r7, #24]
	if(2*PI*R < OBSZAR_MIN || 2*PI*R > OBSZAR_MAX){
 800219c:	a31d      	add	r3, pc, #116	; (adr r3, 8002214 <inverse_kinematic+0xe4>)
 800219e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021a6:	f7fe fa4f 	bl	8000648 <__aeabi_dmul>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4610      	mov	r0, r2
 80021b0:	4619      	mov	r1, r3
 80021b2:	a31a      	add	r3, pc, #104	; (adr r3, 800221c <inverse_kinematic+0xec>)
 80021b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b8:	f7fe fcb8 	bl	8000b2c <__aeabi_dcmplt>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d112      	bne.n	80021e8 <inverse_kinematic+0xb8>
 80021c2:	a314      	add	r3, pc, #80	; (adr r3, 8002214 <inverse_kinematic+0xe4>)
 80021c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021cc:	f7fe fa3c 	bl	8000648 <__aeabi_dmul>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4610      	mov	r0, r2
 80021d6:	4619      	mov	r1, r3
 80021d8:	a312      	add	r3, pc, #72	; (adr r3, 8002224 <inverse_kinematic+0xf4>)
 80021da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021de:	f7fe fcc3 	bl	8000b68 <__aeabi_dcmpgt>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d021      	beq.n	800222c <inverse_kinematic+0xfc>
		*J1 = 69.00;
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	f04f 0200 	mov.w	r2, #0
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <inverse_kinematic+0xd8>)
 80021f0:	e9c1 2300 	strd	r2, r3, [r1]
		*J2 = 69.00;
 80021f4:	6839      	ldr	r1, [r7, #0]
 80021f6:	f04f 0200 	mov.w	r2, #0
 80021fa:	4b03      	ldr	r3, [pc, #12]	; (8002208 <inverse_kinematic+0xd8>)
 80021fc:	e9c1 2300 	strd	r2, r3, [r1]
 8002200:	e1f5      	b.n	80025ee <inverse_kinematic+0x4be>
 8002202:	bf00      	nop
 8002204:	f3af 8000 	nop.w
 8002208:	40514000 	.word	0x40514000
 800220c:	54442eea 	.word	0x54442eea
 8002210:	400921fb 	.word	0x400921fb
 8002214:	54442eea 	.word	0x54442eea
 8002218:	401921fb 	.word	0x401921fb
 800221c:	020c49ba 	.word	0x020c49ba
 8002220:	408b7d2b 	.word	0x408b7d2b
 8002224:	851eb852 	.word	0x851eb852
 8002228:	40a032eb 	.word	0x40a032eb
	}
	else{
		J1_rad = 2*atan((400*Y - pow((- X*X*X*X - 2*X*X*Y*Y + 113800*X*X - Y*Y*Y*Y + 113800*Y*Y - 533610000),(0.5)))/(X*X + 400*X + Y*Y + 23100));
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	4bd5      	ldr	r3, [pc, #852]	; (8002588 <inverse_kinematic+0x458>)
 8002232:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002236:	f7fe fa07 	bl	8000648 <__aeabi_dmul>
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	4692      	mov	sl, r2
 8002240:	469b      	mov	fp, r3
 8002242:	693c      	ldr	r4, [r7, #16]
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800224a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800224e:	4620      	mov	r0, r4
 8002250:	4629      	mov	r1, r5
 8002252:	f7fe f9f9 	bl	8000648 <__aeabi_dmul>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4610      	mov	r0, r2
 800225c:	4619      	mov	r1, r3
 800225e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002262:	f7fe f9f1 	bl	8000648 <__aeabi_dmul>
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	4610      	mov	r0, r2
 800226c:	4619      	mov	r1, r3
 800226e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002272:	f7fe f9e9 	bl	8000648 <__aeabi_dmul>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	4614      	mov	r4, r2
 800227c:	461d      	mov	r5, r3
 800227e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002282:	4602      	mov	r2, r0
 8002284:	460b      	mov	r3, r1
 8002286:	f7fe f829 	bl	80002dc <__adddf3>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4610      	mov	r0, r2
 8002290:	4619      	mov	r1, r3
 8002292:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002296:	f7fe f9d7 	bl	8000648 <__aeabi_dmul>
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	4610      	mov	r0, r2
 80022a0:	4619      	mov	r1, r3
 80022a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022a6:	f7fe f9cf 	bl	8000648 <__aeabi_dmul>
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	4610      	mov	r0, r2
 80022b0:	4619      	mov	r1, r3
 80022b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022b6:	f7fe f9c7 	bl	8000648 <__aeabi_dmul>
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	4620      	mov	r0, r4
 80022c0:	4629      	mov	r1, r5
 80022c2:	f7fe f809 	bl	80002d8 <__aeabi_dsub>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4614      	mov	r4, r2
 80022cc:	461d      	mov	r5, r3
 80022ce:	a3a2      	add	r3, pc, #648	; (adr r3, 8002558 <inverse_kinematic+0x428>)
 80022d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022d8:	f7fe f9b6 	bl	8000648 <__aeabi_dmul>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4610      	mov	r0, r2
 80022e2:	4619      	mov	r1, r3
 80022e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80022e8:	f7fe f9ae 	bl	8000648 <__aeabi_dmul>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	4620      	mov	r0, r4
 80022f2:	4629      	mov	r1, r5
 80022f4:	f7fd fff2 	bl	80002dc <__adddf3>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	4614      	mov	r4, r2
 80022fe:	461d      	mov	r5, r3
 8002300:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002304:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002308:	f7fe f99e 	bl	8000648 <__aeabi_dmul>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4610      	mov	r0, r2
 8002312:	4619      	mov	r1, r3
 8002314:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002318:	f7fe f996 	bl	8000648 <__aeabi_dmul>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	4610      	mov	r0, r2
 8002322:	4619      	mov	r1, r3
 8002324:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002328:	f7fe f98e 	bl	8000648 <__aeabi_dmul>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	4620      	mov	r0, r4
 8002332:	4629      	mov	r1, r5
 8002334:	f7fd ffd0 	bl	80002d8 <__aeabi_dsub>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4614      	mov	r4, r2
 800233e:	461d      	mov	r5, r3
 8002340:	a385      	add	r3, pc, #532	; (adr r3, 8002558 <inverse_kinematic+0x428>)
 8002342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002346:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800234a:	f7fe f97d 	bl	8000648 <__aeabi_dmul>
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	4610      	mov	r0, r2
 8002354:	4619      	mov	r1, r3
 8002356:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800235a:	f7fe f975 	bl	8000648 <__aeabi_dmul>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4620      	mov	r0, r4
 8002364:	4629      	mov	r1, r5
 8002366:	f7fd ffb9 	bl	80002dc <__adddf3>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	4610      	mov	r0, r2
 8002370:	4619      	mov	r1, r3
 8002372:	a37b      	add	r3, pc, #492	; (adr r3, 8002560 <inverse_kinematic+0x430>)
 8002374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002378:	f7fd ffae 	bl	80002d8 <__aeabi_dsub>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	ec43 2b17 	vmov	d7, r2, r3
 8002384:	ed9f 1b78 	vldr	d1, [pc, #480]	; 8002568 <inverse_kinematic+0x438>
 8002388:	eeb0 0a47 	vmov.f32	s0, s14
 800238c:	eef0 0a67 	vmov.f32	s1, s15
 8002390:	f00b fbbc 	bl	800db0c <pow>
 8002394:	ec53 2b10 	vmov	r2, r3, d0
 8002398:	4650      	mov	r0, sl
 800239a:	4659      	mov	r1, fp
 800239c:	f7fd ff9c 	bl	80002d8 <__aeabi_dsub>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4614      	mov	r4, r2
 80023a6:	461d      	mov	r5, r3
 80023a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80023ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023b0:	f7fe f94a 	bl	8000648 <__aeabi_dmul>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4692      	mov	sl, r2
 80023ba:	469b      	mov	fp, r3
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	4b71      	ldr	r3, [pc, #452]	; (8002588 <inverse_kinematic+0x458>)
 80023c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023c6:	f7fe f93f 	bl	8000648 <__aeabi_dmul>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	4650      	mov	r0, sl
 80023d0:	4659      	mov	r1, fp
 80023d2:	f7fd ff83 	bl	80002dc <__adddf3>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	4692      	mov	sl, r2
 80023dc:	469b      	mov	fp, r3
 80023de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023e6:	f7fe f92f 	bl	8000648 <__aeabi_dmul>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4650      	mov	r0, sl
 80023f0:	4659      	mov	r1, fp
 80023f2:	f7fd ff73 	bl	80002dc <__adddf3>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	4610      	mov	r0, r2
 80023fc:	4619      	mov	r1, r3
 80023fe:	a35c      	add	r3, pc, #368	; (adr r3, 8002570 <inverse_kinematic+0x440>)
 8002400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002404:	f7fd ff6a 	bl	80002dc <__adddf3>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4620      	mov	r0, r4
 800240e:	4629      	mov	r1, r5
 8002410:	f7fe fa44 	bl	800089c <__aeabi_ddiv>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	ec43 2b17 	vmov	d7, r2, r3
 800241c:	eeb0 0a47 	vmov.f32	s0, s14
 8002420:	eef0 0a67 	vmov.f32	s1, s15
 8002424:	f00b f808 	bl	800d438 <atan>
 8002428:	ec51 0b10 	vmov	r0, r1, d0
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	f7fd ff54 	bl	80002dc <__adddf3>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		J2_rad = -2*atan(pow((-(X*X + Y*Y - 4900)*(X*X + Y*Y - 108900)),(0.5))/(X*X + Y*Y - 4900));
 800243c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002440:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002444:	f7fe f900 	bl	8000648 <__aeabi_dmul>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	4614      	mov	r4, r2
 800244e:	461d      	mov	r5, r3
 8002450:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002454:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002458:	f7fe f8f6 	bl	8000648 <__aeabi_dmul>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4620      	mov	r0, r4
 8002462:	4629      	mov	r1, r5
 8002464:	f7fd ff3a 	bl	80002dc <__adddf3>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4610      	mov	r0, r2
 800246e:	4619      	mov	r1, r3
 8002470:	a341      	add	r3, pc, #260	; (adr r3, 8002578 <inverse_kinematic+0x448>)
 8002472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002476:	f7fd ff2f 	bl	80002d8 <__aeabi_dsub>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4690      	mov	r8, r2
 8002480:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8002484:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002488:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800248c:	f7fe f8dc 	bl	8000648 <__aeabi_dmul>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4614      	mov	r4, r2
 8002496:	461d      	mov	r5, r3
 8002498:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800249c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024a0:	f7fe f8d2 	bl	8000648 <__aeabi_dmul>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4620      	mov	r0, r4
 80024aa:	4629      	mov	r1, r5
 80024ac:	f7fd ff16 	bl	80002dc <__adddf3>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	4610      	mov	r0, r2
 80024b6:	4619      	mov	r1, r3
 80024b8:	a331      	add	r3, pc, #196	; (adr r3, 8002580 <inverse_kinematic+0x450>)
 80024ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024be:	f7fd ff0b 	bl	80002d8 <__aeabi_dsub>
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	4640      	mov	r0, r8
 80024c8:	4649      	mov	r1, r9
 80024ca:	f7fe f8bd 	bl	8000648 <__aeabi_dmul>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	ec43 2b17 	vmov	d7, r2, r3
 80024d6:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8002568 <inverse_kinematic+0x438>
 80024da:	eeb0 0a47 	vmov.f32	s0, s14
 80024de:	eef0 0a67 	vmov.f32	s1, s15
 80024e2:	f00b fb13 	bl	800db0c <pow>
 80024e6:	ec59 8b10 	vmov	r8, r9, d0
 80024ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80024ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024f2:	f7fe f8a9 	bl	8000648 <__aeabi_dmul>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	4614      	mov	r4, r2
 80024fc:	461d      	mov	r5, r3
 80024fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002502:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002506:	f7fe f89f 	bl	8000648 <__aeabi_dmul>
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	4620      	mov	r0, r4
 8002510:	4629      	mov	r1, r5
 8002512:	f7fd fee3 	bl	80002dc <__adddf3>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	4610      	mov	r0, r2
 800251c:	4619      	mov	r1, r3
 800251e:	a316      	add	r3, pc, #88	; (adr r3, 8002578 <inverse_kinematic+0x448>)
 8002520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002524:	f7fd fed8 	bl	80002d8 <__aeabi_dsub>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4640      	mov	r0, r8
 800252e:	4649      	mov	r1, r9
 8002530:	f7fe f9b4 	bl	800089c <__aeabi_ddiv>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	ec43 2b17 	vmov	d7, r2, r3
 800253c:	eeb0 0a47 	vmov.f32	s0, s14
 8002540:	eef0 0a67 	vmov.f32	s1, s15
 8002544:	f00a ff78 	bl	800d438 <atan>
 8002548:	ec51 0b10 	vmov	r0, r1, d0
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8002554:	e01a      	b.n	800258c <inverse_kinematic+0x45c>
 8002556:	bf00      	nop
 8002558:	00000000 	.word	0x00000000
 800255c:	40fbc880 	.word	0x40fbc880
 8002560:	10000000 	.word	0x10000000
 8002564:	41bfce3e 	.word	0x41bfce3e
 8002568:	00000000 	.word	0x00000000
 800256c:	3fe00000 	.word	0x3fe00000
 8002570:	00000000 	.word	0x00000000
 8002574:	40d68f00 	.word	0x40d68f00
 8002578:	00000000 	.word	0x00000000
 800257c:	40b32400 	.word	0x40b32400
 8002580:	00000000 	.word	0x00000000
 8002584:	40fa9640 	.word	0x40fa9640
 8002588:	40790000 	.word	0x40790000
 800258c:	f7fe f85c 	bl	8000648 <__aeabi_dmul>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	e9c7 2308 	strd	r2, r3, [r7, #32]
		*J1 = (J1_rad*180.0)/ PI;
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	4b18      	ldr	r3, [pc, #96]	; (8002600 <inverse_kinematic+0x4d0>)
 800259e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80025a2:	f7fe f851 	bl	8000648 <__aeabi_dmul>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	4610      	mov	r0, r2
 80025ac:	4619      	mov	r1, r3
 80025ae:	a312      	add	r3, pc, #72	; (adr r3, 80025f8 <inverse_kinematic+0x4c8>)
 80025b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b4:	f7fe f972 	bl	800089c <__aeabi_ddiv>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	e9c1 2300 	strd	r2, r3, [r1]
		*J2 = (J2_rad*180.0)/ PI;
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <inverse_kinematic+0x4d0>)
 80025c8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80025cc:	f7fe f83c 	bl	8000648 <__aeabi_dmul>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4610      	mov	r0, r2
 80025d6:	4619      	mov	r1, r3
 80025d8:	a307      	add	r3, pc, #28	; (adr r3, 80025f8 <inverse_kinematic+0x4c8>)
 80025da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025de:	f7fe f95d 	bl	800089c <__aeabi_ddiv>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	6839      	ldr	r1, [r7, #0]
 80025e8:	e9c1 2300 	strd	r2, r3, [r1]
	}
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	3730      	adds	r7, #48	; 0x30
 80025f2:	46bd      	mov	sp, r7
 80025f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025f8:	54442eea 	.word	0x54442eea
 80025fc:	400921fb 	.word	0x400921fb
 8002600:	40668000 	.word	0x40668000

08002604 <Z_move>:
/*
 * Zamiana współrzędnych kartezjańskich Z na odlegość kątową, jaką musi przebyć silnik,
 *  aby osiągnąć odpowiednią wysokość
 */
void Z_move(robot *R,double Move_Z){
 8002604:	b5b0      	push	{r4, r5, r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	ed87 0b00 	vstr	d0, [r7]
	double skok = 2.00;
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002618:	e9c7 2304 	strd	r2, r3, [r7, #16]

	R->Move_JZ = (360.00/skok) * Move_Z;
 800261c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002620:	f04f 0000 	mov.w	r0, #0
 8002624:	4910      	ldr	r1, [pc, #64]	; (8002668 <Z_move+0x64>)
 8002626:	f7fe f939 	bl	800089c <__aeabi_ddiv>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	4610      	mov	r0, r2
 8002630:	4619      	mov	r1, r3
 8002632:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002636:	f7fe f807 	bl	8000648 <__aeabi_dmul>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	68f9      	ldr	r1, [r7, #12]
 8002640:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	//	R->M[2].angle = R->M[2].angle + R->Move_JZ;
	Rot_Deg_Fast_Acc(&R->M[2],-R->Move_JZ);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002650:	4614      	mov	r4, r2
 8002652:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002656:	ec45 4b10 	vmov	d0, r4, r5
 800265a:	4608      	mov	r0, r1
 800265c:	f7ff fac4 	bl	8001be8 <Rot_Deg_Fast_Acc>
}
 8002660:	bf00      	nop
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bdb0      	pop	{r4, r5, r7, pc}
 8002668:	40768000 	.word	0x40768000

0800266c <save_sequence>:
/*
 * Zapisywanie współrzędnych i stanu chwytaka do tablicy sekwencji
 */
int save_sequence(robot *R,bool sequence){
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	70fb      	strb	r3, [r7, #3]
	static int count = 0;

	if((count < N_seq && sequence) ){
 8002678:	4b1e      	ldr	r3, [pc, #120]	; (80026f4 <save_sequence+0x88>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b13      	cmp	r3, #19
 800267e:	dc31      	bgt.n	80026e4 <save_sequence+0x78>
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d02e      	beq.n	80026e4 <save_sequence+0x78>
		R->sekwencja.X[count] 			= R->X;
 8002686:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <save_sequence+0x88>)
 8002688:	6819      	ldr	r1, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	3132      	adds	r1, #50	; 0x32
 8002694:	00c9      	lsls	r1, r1, #3
 8002696:	4401      	add	r1, r0
 8002698:	e9c1 2300 	strd	r2, r3, [r1]
		R->sekwencja.Y[count] 			= R->Y;
 800269c:	4b15      	ldr	r3, [pc, #84]	; (80026f4 <save_sequence+0x88>)
 800269e:	6819      	ldr	r1, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	3146      	adds	r1, #70	; 0x46
 80026aa:	00c9      	lsls	r1, r1, #3
 80026ac:	4401      	add	r1, r0
 80026ae:	e9c1 2300 	strd	r2, r3, [r1]
		R->sekwencja.Z[count] 			= R->Z;
 80026b2:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <save_sequence+0x88>)
 80026b4:	6819      	ldr	r1, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	315a      	adds	r1, #90	; 0x5a
 80026c0:	00c9      	lsls	r1, r1, #3
 80026c2:	4401      	add	r1, r0
 80026c4:	e9c1 2300 	strd	r2, r3, [r1]
		R->sekwencja.grab[count] 		= R->grab;
 80026c8:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <save_sequence+0x88>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	32dc      	adds	r2, #220	; 0xdc
 80026d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		count++;
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <save_sequence+0x88>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	3301      	adds	r3, #1
 80026e0:	4a04      	ldr	r2, [pc, #16]	; (80026f4 <save_sequence+0x88>)
 80026e2:	6013      	str	r3, [r2, #0]
	}
	return count;
 80026e4:	4b03      	ldr	r3, [pc, #12]	; (80026f4 <save_sequence+0x88>)
 80026e6:	681b      	ldr	r3, [r3, #0]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	20000310 	.word	0x20000310

080026f8 <sequence>:
/*
 * Realizacjia sekwencji, przechodzenie po elementach tablicy sekwencji
 */
void sequence(robot *R){
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
	int move_nr = save_sequence(R,false);
 8002700:	2100      	movs	r1, #0
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7ff ffb2 	bl	800266c <save_sequence>
 8002708:	60b8      	str	r0, [r7, #8]
	//tempp = move_nr;
	for(int i = 0; i<move_nr ; i++){
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	e030      	b.n	8002772 <sequence+0x7a>
		move_xyz(R,R->sekwencja.X[i] ,R->sekwencja.Y[i] ,R->sekwencja.Z[i],R->sekwencja.grab[i], false );
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	3332      	adds	r3, #50	; 0x32
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	4413      	add	r3, r2
 800271a:	ed93 7b00 	vldr	d7, [r3]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	3346      	adds	r3, #70	; 0x46
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4413      	add	r3, r2
 8002728:	ed93 6b00 	vldr	d6, [r3]
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	335a      	adds	r3, #90	; 0x5a
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	4413      	add	r3, r2
 8002736:	ed93 5b00 	vldr	d5, [r3]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	32dc      	adds	r2, #220	; 0xdc
 8002740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002744:	2200      	movs	r2, #0
 8002746:	4619      	mov	r1, r3
 8002748:	eeb0 2a45 	vmov.f32	s4, s10
 800274c:	eef0 2a65 	vmov.f32	s5, s11
 8002750:	eeb0 1a46 	vmov.f32	s2, s12
 8002754:	eef0 1a66 	vmov.f32	s3, s13
 8002758:	eeb0 0a47 	vmov.f32	s0, s14
 800275c:	eef0 0a67 	vmov.f32	s1, s15
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f893 	bl	800288c <move_xyz>
		HAL_UART_RxCpltCallback(&huart2);
 8002766:	4808      	ldr	r0, [pc, #32]	; (8002788 <sequence+0x90>)
 8002768:	f7fe fcec 	bl	8001144 <HAL_UART_RxCpltCallback>
	for(int i = 0; i<move_nr ; i++){
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	3301      	adds	r3, #1
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	429a      	cmp	r2, r3
 8002778:	dbca      	blt.n	8002710 <sequence+0x18>
	}
	delay_ms(100);
 800277a:	2064      	movs	r0, #100	; 0x64
 800277c:	f7fe fcbe 	bl	80010fc <delay_ms>
}
 8002780:	bf00      	nop
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	20000928 	.word	0x20000928
 800278c:	00000000 	.word	0x00000000

08002790 <clear_sequence>:
/*
 * Czyszczenie tablicy
 */
void clear_sequence(){
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
	for (int i = 0; i < N_seq; i++) {
 8002796:	2300      	movs	r3, #0
 8002798:	607b      	str	r3, [r7, #4]
 800279a:	e028      	b.n	80027ee <clear_sequence+0x5e>
		Rob.sekwencja.X[i] = 330;
 800279c:	4a1c      	ldr	r2, [pc, #112]	; (8002810 <clear_sequence+0x80>)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3332      	adds	r3, #50	; 0x32
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	18d1      	adds	r1, r2, r3
 80027a6:	a318      	add	r3, pc, #96	; (adr r3, 8002808 <clear_sequence+0x78>)
 80027a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ac:	e9c1 2300 	strd	r2, r3, [r1]
		Rob.sekwencja.Y[i] = 0;
 80027b0:	4a17      	ldr	r2, [pc, #92]	; (8002810 <clear_sequence+0x80>)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3346      	adds	r3, #70	; 0x46
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	18d1      	adds	r1, r2, r3
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	f04f 0300 	mov.w	r3, #0
 80027c2:	e9c1 2300 	strd	r2, r3, [r1]
		Rob.sekwencja.Z[i] = 70;
 80027c6:	4a12      	ldr	r2, [pc, #72]	; (8002810 <clear_sequence+0x80>)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	335a      	adds	r3, #90	; 0x5a
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	18d1      	adds	r1, r2, r3
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <clear_sequence+0x84>)
 80027d6:	e9c1 2300 	strd	r2, r3, [r1]
		Rob.sekwencja.grab[i] = OPEN;
 80027da:	4a0d      	ldr	r2, [pc, #52]	; (8002810 <clear_sequence+0x80>)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	33dc      	adds	r3, #220	; 0xdc
 80027e0:	f640 0134 	movw	r1, #2100	; 0x834
 80027e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < N_seq; i++) {
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3301      	adds	r3, #1
 80027ec:	607b      	str	r3, [r7, #4]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b13      	cmp	r3, #19
 80027f2:	ddd3      	ble.n	800279c <clear_sequence+0xc>
	}

}
 80027f4:	bf00      	nop
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	f3af 8000 	nop.w
 8002808:	00000000 	.word	0x00000000
 800280c:	4074a000 	.word	0x4074a000
 8002810:	20000470 	.word	0x20000470
 8002814:	40518000 	.word	0x40518000

08002818 <grabbing>:
/*
 * Funkcja sterująca otwieraniem i zamykaniem chwytakiem
 */
void grabbing(robot *R, int grb){
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
	if(grb == OPEN){
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	f640 0234 	movw	r2, #2100	; 0x834
 8002828:	4293      	cmp	r3, r2
 800282a:	d108      	bne.n	800283e <grabbing+0x26>
		Mess2 = "Open";
 800282c:	4b13      	ldr	r3, [pc, #76]	; (800287c <grabbing+0x64>)
 800282e:	4a14      	ldr	r2, [pc, #80]	; (8002880 <grabbing+0x68>)
 8002830:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,OPEN);
 8002832:	4b14      	ldr	r3, [pc, #80]	; (8002884 <grabbing+0x6c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f640 0234 	movw	r2, #2100	; 0x834
 800283a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,CLOSE);
	}
	else{
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,grb);
	}
}
 800283c:	e01a      	b.n	8002874 <grabbing+0x5c>
	else if(grb == CLOSE){
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002844:	4293      	cmp	r3, r2
 8002846:	d111      	bne.n	800286c <grabbing+0x54>
		Mess2 = "Close";
 8002848:	4b0c      	ldr	r3, [pc, #48]	; (800287c <grabbing+0x64>)
 800284a:	4a0f      	ldr	r2, [pc, #60]	; (8002888 <grabbing+0x70>)
 800284c:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,CLOSE-100);
 800284e:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <grabbing+0x6c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8002856:	635a      	str	r2, [r3, #52]	; 0x34
		delay_ms(300);
 8002858:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800285c:	f7fe fc4e 	bl	80010fc <delay_ms>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,CLOSE);
 8002860:	4b08      	ldr	r3, [pc, #32]	; (8002884 <grabbing+0x6c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002868:	635a      	str	r2, [r3, #52]	; 0x34
}
 800286a:	e003      	b.n	8002874 <grabbing+0x5c>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,grb);
 800286c:	4b05      	ldr	r3, [pc, #20]	; (8002884 <grabbing+0x6c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002874:	bf00      	nop
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	20000300 	.word	0x20000300
 8002880:	0800fcc4 	.word	0x0800fcc4
 8002884:	200008dc 	.word	0x200008dc
 8002888:	0800fccc 	.word	0x0800fccc

0800288c <move_xyz>:
 * Przechodzenie do wskazanego punktu (x,y,z,chwytak)
 * Możliwość zapisywania punktu do którego się przeniosło
 * sequence = true 	-> zapisuj
 * sequence = false -> nie zapisuj
 */
void move_xyz(robot *R,double x,double y,double z,int grb, bool sequence){
 800288c:	b580      	push	{r7, lr}
 800288e:	b08a      	sub	sp, #40	; 0x28
 8002890:	af00      	add	r7, sp, #0
 8002892:	6278      	str	r0, [r7, #36]	; 0x24
 8002894:	ed87 0b06 	vstr	d0, [r7, #24]
 8002898:	ed87 1b04 	vstr	d1, [r7, #16]
 800289c:	ed87 2b02 	vstr	d2, [r7, #8]
 80028a0:	6239      	str	r1, [r7, #32]
 80028a2:	4613      	mov	r3, r2
 80028a4:	71fb      	strb	r3, [r7, #7]

	if(move_done){
 80028a6:	4b6f      	ldr	r3, [pc, #444]	; (8002a64 <move_xyz+0x1d8>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 8150 	beq.w	8002b50 <move_xyz+0x2c4>
		R->Last_X = R->X;       R->Last_Y = R->Y;   R->Last_Z = R->Z;	R->Last_grab = R->grab;
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028b8:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80028c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028c4:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80028ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028d0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		R->X = x;               R->Y = y;           R->Z = z;	R->grab = grb;
 80028e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028e6:	e9c1 2300 	strd	r2, r3, [r1]
 80028ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80028f0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80028f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028fa:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	6a3a      	ldr	r2, [r7, #32]
 8002902:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		inverse_kinematic( R->Last_X, R->Last_Y,&R->Last_J1,&R->Last_J2);
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	ed93 7b06 	vldr	d7, [r3, #24]
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	ed93 6b08 	vldr	d6, [r3, #32]
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	3360      	adds	r3, #96	; 0x60
 800291c:	4619      	mov	r1, r3
 800291e:	4610      	mov	r0, r2
 8002920:	eeb0 1a46 	vmov.f32	s2, s12
 8002924:	eef0 1a66 	vmov.f32	s3, s13
 8002928:	eeb0 0a47 	vmov.f32	s0, s14
 800292c:	eef0 0a67 	vmov.f32	s1, s15
 8002930:	f7ff fbfe 	bl	8002130 <inverse_kinematic>
		inverse_kinematic(x,y,&R->J1,&R->J2);
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	3350      	adds	r3, #80	; 0x50
 800293e:	4619      	mov	r1, r3
 8002940:	4610      	mov	r0, r2
 8002942:	ed97 1b04 	vldr	d1, [r7, #16]
 8002946:	ed97 0b06 	vldr	d0, [r7, #24]
 800294a:	f7ff fbf1 	bl	8002130 <inverse_kinematic>

		if(R->J1 != R->Last_J1 && R->J2 != R->Last_J2){
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800295a:	f7fe f8dd 	bl	8000b18 <__aeabi_dcmpeq>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d150      	bne.n	8002a06 <move_xyz+0x17a>
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002970:	f7fe f8d2 	bl	8000b18 <__aeabi_dcmpeq>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d145      	bne.n	8002a06 <move_xyz+0x17a>
			move_done = false;
 800297a:	4b3a      	ldr	r3, [pc, #232]	; (8002a64 <move_xyz+0x1d8>)
 800297c:	2200      	movs	r2, #0
 800297e:	701a      	strb	r2, [r3, #0]
			save_sequence(R,sequence);
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	4619      	mov	r1, r3
 8002984:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002986:	f7ff fe71 	bl	800266c <save_sequence>

			R->Move_X =  R->Last_X - R->X;
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002996:	f7fd fc9f 	bl	80002d8 <__aeabi_dsub>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029a0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			R->Move_Y =  R->Last_Y - R->Y;
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80029b0:	f7fd fc92 	bl	80002d8 <__aeabi_dsub>
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029ba:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

			R->Move_J1 = R->Last_J1 - R->J1;
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80029ca:	f7fd fc85 	bl	80002d8 <__aeabi_dsub>
 80029ce:	4602      	mov	r2, r0
 80029d0:	460b      	mov	r3, r1
 80029d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029d4:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
			R->Move_J2 = R->Last_J2 - R->J2;
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80029e4:	f7fd fc78 	bl	80002d8 <__aeabi_dsub>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029ee:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

			Move_J1_J2(R, &R->Move_J1, &R->Move_J2);
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	f103 0168 	add.w	r1, r3, #104	; 0x68
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	3370      	adds	r3, #112	; 0x70
 80029fc:	461a      	mov	r2, r3
 80029fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a00:	f7fe fffa 	bl	80019f8 <Move_J1_J2>
 8002a04:	e05d      	b.n	8002ac2 <move_xyz+0x236>

		}
		else if(R->J1 != R->Last_J1){
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8002a12:	f7fe f881 	bl	8000b18 <__aeabi_dcmpeq>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d125      	bne.n	8002a68 <move_xyz+0x1dc>
			move_done = false;
 8002a1c:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <move_xyz+0x1d8>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	701a      	strb	r2, [r3, #0]
			save_sequence(R,sequence);
 8002a22:	79fb      	ldrb	r3, [r7, #7]
 8002a24:	4619      	mov	r1, r3
 8002a26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a28:	f7ff fe20 	bl	800266c <save_sequence>

			R->Move_J1 = R->Last_J1 - R->J1;
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002a38:	f7fd fc4e 	bl	80002d8 <__aeabi_dsub>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a42:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

			Rot_Deg_Fast_Acc(&R->M[0] , R->Move_J1);
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	f103 0288 	add.w	r2, r3, #136	; 0x88
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8002a52:	eeb0 0a47 	vmov.f32	s0, s14
 8002a56:	eef0 0a67 	vmov.f32	s1, s15
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	f7ff f8c4 	bl	8001be8 <Rot_Deg_Fast_Acc>
 8002a60:	e02f      	b.n	8002ac2 <move_xyz+0x236>
 8002a62:	bf00      	nop
 8002a64:	20000022 	.word	0x20000022
		}
		else if(R->J2 != R->Last_J2){
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002a74:	f7fe f850 	bl	8000b18 <__aeabi_dcmpeq>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d121      	bne.n	8002ac2 <move_xyz+0x236>
			move_done = false;
 8002a7e:	4b36      	ldr	r3, [pc, #216]	; (8002b58 <move_xyz+0x2cc>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	701a      	strb	r2, [r3, #0]
			save_sequence(R,sequence);
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	4619      	mov	r1, r3
 8002a88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a8a:	f7ff fdef 	bl	800266c <save_sequence>

			R->Move_J2 = R->Last_J2 - R->J2;
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002a9a:	f7fd fc1d 	bl	80002d8 <__aeabi_dsub>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aa4:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

			Rot_Deg_Fast_Acc(&R->M[1] , R->Move_J2);
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8002ab4:	eeb0 0a47 	vmov.f32	s0, s14
 8002ab8:	eef0 0a67 	vmov.f32	s1, s15
 8002abc:	4610      	mov	r0, r2
 8002abe:	f7ff f893 	bl	8001be8 <Rot_Deg_Fast_Acc>
		}
		if(R->Z != R->Last_Z){
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002ace:	f7fe f823 	bl	8000b18 <__aeabi_dcmpeq>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d11e      	bne.n	8002b16 <move_xyz+0x28a>
			move_done = false;
 8002ad8:	4b1f      	ldr	r3, [pc, #124]	; (8002b58 <move_xyz+0x2cc>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	701a      	strb	r2, [r3, #0]
			save_sequence(R,sequence);
 8002ade:	79fb      	ldrb	r3, [r7, #7]
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ae4:	f7ff fdc2 	bl	800266c <save_sequence>

			R->Move_Z =  R->Last_Z - R->Z;
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002af4:	f7fd fbf0 	bl	80002d8 <__aeabi_dsub>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002afe:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

			Z_move(R,R->Move_Z);
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8002b08:	eeb0 0a47 	vmov.f32	s0, s14
 8002b0c:	eef0 0a67 	vmov.f32	s1, s15
 8002b10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b12:	f7ff fd77 	bl	8002604 <Z_move>
		}
		if(R->grab != R->Last_grab){
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d00e      	beq.n	8002b44 <move_xyz+0x2b8>
			move_done = false;
 8002b26:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <move_xyz+0x2cc>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	701a      	strb	r2, [r3, #0]
			save_sequence(R,sequence);
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	4619      	mov	r1, r3
 8002b30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b32:	f7ff fd9b 	bl	800266c <save_sequence>
			grabbing(R,R->grab);
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b40:	f7ff fe6a 	bl	8002818 <grabbing>
		}
		move_done = true;
 8002b44:	4b04      	ldr	r3, [pc, #16]	; (8002b58 <move_xyz+0x2cc>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	701a      	strb	r2, [r3, #0]
		delay_ms(100);
 8002b4a:	2064      	movs	r0, #100	; 0x64
 8002b4c:	f7fe fad6 	bl	80010fc <delay_ms>
	}
}
 8002b50:	bf00      	nop
 8002b52:	3728      	adds	r7, #40	; 0x28
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	20000022 	.word	0x20000022
 8002b5c:	00000000 	.word	0x00000000

08002b60 <setup>:

/*
 * Konfiguracja ramienia względem realnego położenia, dojazd do krańcówki, kalibracja osi Z
 */
void setup(robot *R, int RPM_Max_Z,int RPM_Max_J2){
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
	Z_move(R,-1500);
 8002b6c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8002be0 <setup+0x80>
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f7ff fd47 	bl	8002604 <Z_move>
	z_limit_flag = true;
 8002b76:	4b1e      	ldr	r3, [pc, #120]	; (8002bf0 <setup+0x90>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	701a      	strb	r2, [r3, #0]
	delay_ms(100);
 8002b7c:	2064      	movs	r0, #100	; 0x64
 8002b7e:	f7fe fabd 	bl	80010fc <delay_ms>
	Z_move(R,2);
 8002b82:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8002be8 <setup+0x88>
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f7ff fd3c 	bl	8002604 <Z_move>
	z_limit_flag = false;
 8002b8c:	4b18      	ldr	r3, [pc, #96]	; (8002bf0 <setup+0x90>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	701a      	strb	r2, [r3, #0]
	R->M[2].RPM_Max = 10;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	220a      	movs	r2, #10
 8002b96:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	Z_move(R, -1500);
 8002b9a:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8002be0 <setup+0x80>
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f7ff fd30 	bl	8002604 <Z_move>
	z_limit_flag = true;
 8002ba4:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <setup+0x90>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	701a      	strb	r2, [r3, #0]
	R->M[2].RPM_Max = RPM_Max_Z;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	new_Z = 70;
 8002bb2:	4910      	ldr	r1, [pc, #64]	; (8002bf4 <setup+0x94>)
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	4b0f      	ldr	r3, [pc, #60]	; (8002bf8 <setup+0x98>)
 8002bba:	e9c1 2300 	strd	r2, r3, [r1]
	R->M[2].angle = 0;
 8002bbe:	68f9      	ldr	r1, [r7, #12]
 8002bc0:	f04f 0200 	mov.w	r2, #0
 8002bc4:	f04f 0300 	mov.w	r3, #0
 8002bc8:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150
	delay_ms(500);
 8002bcc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002bd0:	f7fe fa94 	bl	80010fc <delay_ms>

}
 8002bd4:	bf00      	nop
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	f3af 8000 	nop.w
 8002be0:	00000000 	.word	0x00000000
 8002be4:	c0977000 	.word	0xc0977000
 8002be8:	00000000 	.word	0x00000000
 8002bec:	40000000 	.word	0x40000000
 8002bf0:	2000030e 	.word	0x2000030e
 8002bf4:	20000018 	.word	0x20000018
 8002bf8:	40518000 	.word	0x40518000

08002bfc <set_settings>:
/*
 * Przypisywanie ustawień do silnika
 */
void set_settings(silnik *M){
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
	M->RPM_Max 	= strtol((char*)UART_IN,&pEnd,0);
 8002c04:	2200      	movs	r2, #0
 8002c06:	4919      	ldr	r1, [pc, #100]	; (8002c6c <set_settings+0x70>)
 8002c08:	4819      	ldr	r0, [pc, #100]	; (8002c70 <set_settings+0x74>)
 8002c0a:	f007 fd3b 	bl	800a684 <strtol>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	651a      	str	r2, [r3, #80]	; 0x50
	M->tau 	 	= strtod(pEnd,&pEnd);
 8002c14:	4b15      	ldr	r3, [pc, #84]	; (8002c6c <set_settings+0x70>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4914      	ldr	r1, [pc, #80]	; (8002c6c <set_settings+0x70>)
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f007 fca0 	bl	800a560 <strtod>
 8002c20:	eeb0 7a40 	vmov.f32	s14, s0
 8002c24:	eef0 7a60 	vmov.f32	s15, s1
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	M->t1_proc 	= strtod(pEnd,&pEnd);
 8002c2e:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <set_settings+0x70>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	490e      	ldr	r1, [pc, #56]	; (8002c6c <set_settings+0x70>)
 8002c34:	4618      	mov	r0, r3
 8002c36:	f007 fc93 	bl	800a560 <strtod>
 8002c3a:	eeb0 7a40 	vmov.f32	s14, s0
 8002c3e:	eef0 7a60 	vmov.f32	s15, s1
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	ed83 7b08 	vstr	d7, [r3, #32]
	M->t2_proc 	= strtod(pEnd,NULL);
 8002c48:	4b08      	ldr	r3, [pc, #32]	; (8002c6c <set_settings+0x70>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f007 fc86 	bl	800a560 <strtod>
 8002c54:	eeb0 7a40 	vmov.f32	s14, s0
 8002c58:	eef0 7a60 	vmov.f32	s15, s1
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
}
 8002c62:	bf00      	nop
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000308 	.word	0x20000308
 8002c70:	200002dc 	.word	0x200002dc
 8002c74:	00000000 	.word	0x00000000

08002c78 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002c7c:	f000 ff9b 	bl	8003bb6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002c80:	f000 f9c2 	bl	8003008 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002c84:	f000 fbe2 	bl	800344c <MX_GPIO_Init>
	MX_TIM2_Init();
 8002c88:	f000 fa0a 	bl	80030a0 <MX_TIM2_Init>
	MX_TIM6_Init();
 8002c8c:	f000 faf2 	bl	8003274 <MX_TIM6_Init>
	MX_TIM7_Init();
 8002c90:	f000 fb28 	bl	80032e4 <MX_TIM7_Init>
	MX_DMA_Init();
 8002c94:	f000 fba8 	bl	80033e8 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8002c98:	f000 fb5a 	bl	8003350 <MX_USART2_UART_Init>
	MX_TIM3_Init();
 8002c9c:	f000 fa76 	bl	800318c <MX_TIM3_Init>
	//MX_TIM4_Init();
	/* USER CODE BEGIN 2 */
	TimerDelay_Init();
 8002ca0:	f7fe f9cc 	bl	800103c <TimerDelay_Init>
	HAL_TIM_Base_Start_IT(&htim7); //Generowanie impulsów do silników
 8002ca4:	48b0      	ldr	r0, [pc, #704]	; (8002f68 <main+0x2f0>)
 8002ca6:	f002 fe7d 	bl	80059a4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6); //komunikacja uart
 8002caa:	48b0      	ldr	r0, [pc, #704]	; (8002f6c <main+0x2f4>)
 8002cac:	f002 fe7a 	bl	80059a4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8002cb0:	48af      	ldr	r0, [pc, #700]	; (8002f70 <main+0x2f8>)
 8002cb2:	f002 fe77 	bl	80059a4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //PWM serwo
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	48ae      	ldr	r0, [pc, #696]	; (8002f74 <main+0x2fc>)
 8002cba:	f002 ff9f 	bl	8005bfc <HAL_TIM_PWM_Start>

	HAL_GPIO_WritePin(GPIOA, ENABLE_Pin,GPIO_PIN_RESET);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2180      	movs	r1, #128	; 0x80
 8002cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cc6:	f001 fdc3 	bl	8004850 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M_1_2_3_Pin,GPIO_PIN_SET);
 8002cca:	2201      	movs	r2, #1
 8002ccc:	2140      	movs	r1, #64	; 0x40
 8002cce:	48aa      	ldr	r0, [pc, #680]	; (8002f78 <main+0x300>)
 8002cd0:	f001 fdbe 	bl	8004850 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SLEEP_Pin,GPIO_PIN_SET);
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cde:	f001 fdb7 	bl	8004850 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, RESET_Pin,GPIO_PIN_SET);
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	2180      	movs	r1, #128	; 0x80
 8002ce6:	48a5      	ldr	r0, [pc, #660]	; (8002f7c <main+0x304>)
 8002ce8:	f001 fdb2 	bl	8004850 <HAL_GPIO_WritePin>

	//Silnik J1
	Rob.M[0].GPIO_DIR = GPIOA;
 8002cec:	4ba4      	ldr	r3, [pc, #656]	; (8002f80 <main+0x308>)
 8002cee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002cf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	Rob.M[0].GPIO_STEP = GPIOB;
 8002cf6:	4ba2      	ldr	r3, [pc, #648]	; (8002f80 <main+0x308>)
 8002cf8:	4a9f      	ldr	r2, [pc, #636]	; (8002f78 <main+0x300>)
 8002cfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	Rob.M[0].Dir_Pin = DIR3_Pin;
 8002cfe:	4ba0      	ldr	r3, [pc, #640]	; (8002f80 <main+0x308>)
 8002d00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d04:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	Rob.M[0].STEP_Pin = STEP3_Pin;
 8002d08:	4b9d      	ldr	r3, [pc, #628]	; (8002f80 <main+0x308>)
 8002d0a:	2210      	movs	r2, #16
 8002d0c:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	Rob.M[0].gear = 1;
 8002d10:	4b9b      	ldr	r3, [pc, #620]	; (8002f80 <main+0x308>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	Rob.M[0].RPM = 0;
 8002d18:	4b99      	ldr	r3, [pc, #612]	; (8002f80 <main+0x308>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	Rob.M[0].RPM_Max = 5;
 8002d20:	4b97      	ldr	r3, [pc, #604]	; (8002f80 <main+0x308>)
 8002d22:	2205      	movs	r2, #5
 8002d24:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	Rob.M[0].angle = 0;
 8002d28:	4995      	ldr	r1, [pc, #596]	; (8002f80 <main+0x308>)
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	f04f 0300 	mov.w	r3, #0
 8002d32:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
	Rob.M[0].Last_angle = Rob.M[0].angle;
 8002d36:	4b92      	ldr	r3, [pc, #584]	; (8002f80 <main+0x308>)
 8002d38:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8002d3c:	4990      	ldr	r1, [pc, #576]	; (8002f80 <main+0x308>)
 8002d3e:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
	Rob.M[0].angle = 0;
 8002d42:	498f      	ldr	r1, [pc, #572]	; (8002f80 <main+0x308>)
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
	Rob.M[0].t1_proc = 0.40;
 8002d50:	498b      	ldr	r1, [pc, #556]	; (8002f80 <main+0x308>)
 8002d52:	a37d      	add	r3, pc, #500	; (adr r3, 8002f48 <main+0x2d0>)
 8002d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d58:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
	Rob.M[0].t2_proc = 0.60;
 8002d5c:	4988      	ldr	r1, [pc, #544]	; (8002f80 <main+0x308>)
 8002d5e:	a37c      	add	r3, pc, #496	; (adr r3, 8002f50 <main+0x2d8>)
 8002d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d64:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
	Rob.M[0].tau = 0;
 8002d68:	4985      	ldr	r1, [pc, #532]	; (8002f80 <main+0x308>)
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	f04f 0300 	mov.w	r3, #0
 8002d72:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8

	//Silnik J2
	Rob.M[1].GPIO_DIR = GPIOB;
 8002d76:	4b82      	ldr	r3, [pc, #520]	; (8002f80 <main+0x308>)
 8002d78:	4a7f      	ldr	r2, [pc, #508]	; (8002f78 <main+0x300>)
 8002d7a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	Rob.M[1].GPIO_STEP = GPIOB;
 8002d7e:	4b80      	ldr	r3, [pc, #512]	; (8002f80 <main+0x308>)
 8002d80:	4a7d      	ldr	r2, [pc, #500]	; (8002f78 <main+0x300>)
 8002d82:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	Rob.M[1].Dir_Pin = DIR2_Pin;
 8002d86:	4b7e      	ldr	r3, [pc, #504]	; (8002f80 <main+0x308>)
 8002d88:	2208      	movs	r2, #8
 8002d8a:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
	Rob.M[1].STEP_Pin = STEP2_Pin;
 8002d8e:	4b7c      	ldr	r3, [pc, #496]	; (8002f80 <main+0x308>)
 8002d90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d94:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
	Rob.M[1].gear = 1;
 8002d98:	4b79      	ldr	r3, [pc, #484]	; (8002f80 <main+0x308>)
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	Rob.M[1].RPM = 0;
 8002da0:	4b77      	ldr	r3, [pc, #476]	; (8002f80 <main+0x308>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	Rob.M[1].RPM_Max = 10;
 8002da8:	4b75      	ldr	r3, [pc, #468]	; (8002f80 <main+0x308>)
 8002daa:	220a      	movs	r2, #10
 8002dac:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	Rob.M[1].angle = 0;
 8002db0:	4973      	ldr	r1, [pc, #460]	; (8002f80 <main+0x308>)
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	e9c1 233e 	strd	r2, r3, [r1, #248]	; 0xf8
	Rob.M[1].Last_angle = Rob.M[1].angle;
 8002dbe:	4b70      	ldr	r3, [pc, #448]	; (8002f80 <main+0x308>)
 8002dc0:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8002dc4:	496e      	ldr	r1, [pc, #440]	; (8002f80 <main+0x308>)
 8002dc6:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
	Rob.M[1].t1_proc = 0.40;
 8002dca:	496d      	ldr	r1, [pc, #436]	; (8002f80 <main+0x308>)
 8002dcc:	a35e      	add	r3, pc, #376	; (adr r3, 8002f48 <main+0x2d0>)
 8002dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd2:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
	Rob.M[1].t2_proc = 0.60;
 8002dd6:	496a      	ldr	r1, [pc, #424]	; (8002f80 <main+0x308>)
 8002dd8:	a35d      	add	r3, pc, #372	; (adr r3, 8002f50 <main+0x2d8>)
 8002dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dde:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
	Rob.M[1].tau = 0;
 8002de2:	4967      	ldr	r1, [pc, #412]	; (8002f80 <main+0x308>)
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120

	//Silnik JZ
	Rob.M[2].GPIO_DIR = GPIOB;
 8002df0:	4b63      	ldr	r3, [pc, #396]	; (8002f80 <main+0x308>)
 8002df2:	4a61      	ldr	r2, [pc, #388]	; (8002f78 <main+0x300>)
 8002df4:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	Rob.M[2].GPIO_STEP = GPIOA;
 8002df8:	4b61      	ldr	r3, [pc, #388]	; (8002f80 <main+0x308>)
 8002dfa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002dfe:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	Rob.M[2].Dir_Pin = DIR1_Pin;
 8002e02:	4b5f      	ldr	r3, [pc, #380]	; (8002f80 <main+0x308>)
 8002e04:	2220      	movs	r2, #32
 8002e06:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
	Rob.M[2].STEP_Pin = STEP1_Pin;
 8002e0a:	4b5d      	ldr	r3, [pc, #372]	; (8002f80 <main+0x308>)
 8002e0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e10:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
	Rob.M[2].gear = 1;
 8002e14:	4b5a      	ldr	r3, [pc, #360]	; (8002f80 <main+0x308>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	Rob.M[2].RPM = 0;
 8002e1c:	4b58      	ldr	r3, [pc, #352]	; (8002f80 <main+0x308>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	Rob.M[2].RPM_Max = 400;
 8002e24:	4b56      	ldr	r3, [pc, #344]	; (8002f80 <main+0x308>)
 8002e26:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002e2a:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	Rob.M[2].angle = 0;
 8002e2e:	4954      	ldr	r1, [pc, #336]	; (8002f80 <main+0x308>)
 8002e30:	f04f 0200 	mov.w	r2, #0
 8002e34:	f04f 0300 	mov.w	r3, #0
 8002e38:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150
	Rob.M[2].Last_angle = Rob.M[2].angle;
 8002e3c:	4b50      	ldr	r3, [pc, #320]	; (8002f80 <main+0x308>)
 8002e3e:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 8002e42:	494f      	ldr	r1, [pc, #316]	; (8002f80 <main+0x308>)
 8002e44:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
	Rob.M[2].t1_proc = 0.30;
 8002e48:	494d      	ldr	r1, [pc, #308]	; (8002f80 <main+0x308>)
 8002e4a:	a343      	add	r3, pc, #268	; (adr r3, 8002f58 <main+0x2e0>)
 8002e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e50:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
	Rob.M[2].t2_proc = 0.70;
 8002e54:	494a      	ldr	r1, [pc, #296]	; (8002f80 <main+0x308>)
 8002e56:	a342      	add	r3, pc, #264	; (adr r3, 8002f60 <main+0x2e8>)
 8002e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5c:	e9c1 2358 	strd	r2, r3, [r1, #352]	; 0x160
	Rob.M[2].tau = 0.5;
 8002e60:	4947      	ldr	r1, [pc, #284]	; (8002f80 <main+0x308>)
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	4b47      	ldr	r3, [pc, #284]	; (8002f84 <main+0x30c>)
 8002e68:	e9c1 235e 	strd	r2, r3, [r1, #376]	; 0x178

	HAL_GPIO_WritePin(Rob.M[0].GPIO_DIR, Rob.M[0].Dir_Pin,GPIO_PIN_SET);
 8002e6c:	4b44      	ldr	r3, [pc, #272]	; (8002f80 <main+0x308>)
 8002e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e72:	4a43      	ldr	r2, [pc, #268]	; (8002f80 <main+0x308>)
 8002e74:	f8b2 1092 	ldrh.w	r1, [r2, #146]	; 0x92
 8002e78:	2201      	movs	r2, #1
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f001 fce8 	bl	8004850 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Rob.M[1].GPIO_DIR, Rob.M[1].Dir_Pin,GPIO_PIN_SET);
 8002e80:	4b3f      	ldr	r3, [pc, #252]	; (8002f80 <main+0x308>)
 8002e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e86:	4a3e      	ldr	r2, [pc, #248]	; (8002f80 <main+0x308>)
 8002e88:	f8b2 10ea 	ldrh.w	r1, [r2, #234]	; 0xea
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f001 fcde 	bl	8004850 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Rob.M[2].GPIO_DIR, Rob.M[2].Dir_Pin,GPIO_PIN_SET);
 8002e94:	4b3a      	ldr	r3, [pc, #232]	; (8002f80 <main+0x308>)
 8002e96:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8002e9a:	4a39      	ldr	r2, [pc, #228]	; (8002f80 <main+0x308>)
 8002e9c:	f8b2 1142 	ldrh.w	r1, [r2, #322]	; 0x142
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f001 fcd4 	bl	8004850 <HAL_GPIO_WritePin>

	delay_ms(5000);
 8002ea8:	f241 3088 	movw	r0, #5000	; 0x1388
 8002eac:	f7fe f926 	bl	80010fc <delay_ms>
	setup(&Rob,400,10);
 8002eb0:	220a      	movs	r2, #10
 8002eb2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002eb6:	4832      	ldr	r0, [pc, #200]	; (8002f80 <main+0x308>)
 8002eb8:	f7ff fe52 	bl	8002b60 <setup>

	HAL_UART_Receive_DMA(&huart2, UART_IN, N_IN);
 8002ebc:	2221      	movs	r2, #33	; 0x21
 8002ebe:	4932      	ldr	r1, [pc, #200]	; (8002f88 <main+0x310>)
 8002ec0:	4832      	ldr	r0, [pc, #200]	; (8002f8c <main+0x314>)
 8002ec2:	f004 fa5d 	bl	8007380 <HAL_UART_Receive_DMA>
	size = sprintf((char*)UART_OUT,"Start transferu...\r\n");
 8002ec6:	4932      	ldr	r1, [pc, #200]	; (8002f90 <main+0x318>)
 8002ec8:	4832      	ldr	r0, [pc, #200]	; (8002f94 <main+0x31c>)
 8002eca:	f006 fcfb 	bl	80098c4 <siprintf>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	4b31      	ldr	r3, [pc, #196]	; (8002f98 <main+0x320>)
 8002ed4:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart2, UART_OUT, size); // Rozpoczecie nadawania danych z wykorzystaniem przerwan
 8002ed6:	4b30      	ldr	r3, [pc, #192]	; (8002f98 <main+0x320>)
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	492d      	ldr	r1, [pc, #180]	; (8002f94 <main+0x31c>)
 8002ede:	482b      	ldr	r0, [pc, #172]	; (8002f8c <main+0x314>)
 8002ee0:	f004 f9bc 	bl	800725c <HAL_UART_Transmit_DMA>

	kinematic(Rob.M[0].angle,Rob.M[1].angle,&Rob.X,&Rob.Y);
 8002ee4:	4b26      	ldr	r3, [pc, #152]	; (8002f80 <main+0x308>)
 8002ee6:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 8002eea:	4b25      	ldr	r3, [pc, #148]	; (8002f80 <main+0x308>)
 8002eec:	ed93 6b3e 	vldr	d6, [r3, #248]	; 0xf8
 8002ef0:	492a      	ldr	r1, [pc, #168]	; (8002f9c <main+0x324>)
 8002ef2:	4823      	ldr	r0, [pc, #140]	; (8002f80 <main+0x308>)
 8002ef4:	eeb0 1a46 	vmov.f32	s2, s12
 8002ef8:	eef0 1a66 	vmov.f32	s3, s13
 8002efc:	eeb0 0a47 	vmov.f32	s0, s14
 8002f00:	eef0 0a67 	vmov.f32	s1, s15
 8002f04:	f7ff f858 	bl	8001fb8 <kinematic>

	Rob.Z = new_Z;
 8002f08:	4b25      	ldr	r3, [pc, #148]	; (8002fa0 <main+0x328>)
 8002f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0e:	491c      	ldr	r1, [pc, #112]	; (8002f80 <main+0x308>)
 8002f10:	e9c1 2304 	strd	r2, r3, [r1, #16]
	Rob.Last_X = Rob.X;
 8002f14:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <main+0x308>)
 8002f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1a:	4919      	ldr	r1, [pc, #100]	; (8002f80 <main+0x308>)
 8002f1c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Rob.Last_Y = Rob.Y;
 8002f20:	4b17      	ldr	r3, [pc, #92]	; (8002f80 <main+0x308>)
 8002f22:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002f26:	4916      	ldr	r1, [pc, #88]	; (8002f80 <main+0x308>)
 8002f28:	e9c1 2308 	strd	r2, r3, [r1, #32]
	Rob.Last_Z = Rob.Z;
 8002f2c:	4b14      	ldr	r3, [pc, #80]	; (8002f80 <main+0x308>)
 8002f2e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002f32:	4913      	ldr	r1, [pc, #76]	; (8002f80 <main+0x308>)
 8002f34:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if(sekwencja_start){
 8002f38:	4b1a      	ldr	r3, [pc, #104]	; (8002fa4 <main+0x32c>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d033      	beq.n	8002fa8 <main+0x330>
			sequence(&Rob);
 8002f40:	480f      	ldr	r0, [pc, #60]	; (8002f80 <main+0x308>)
 8002f42:	f7ff fbd9 	bl	80026f8 <sequence>
 8002f46:	e7f7      	b.n	8002f38 <main+0x2c0>
 8002f48:	9999999a 	.word	0x9999999a
 8002f4c:	3fd99999 	.word	0x3fd99999
 8002f50:	33333333 	.word	0x33333333
 8002f54:	3fe33333 	.word	0x3fe33333
 8002f58:	33333333 	.word	0x33333333
 8002f5c:	3fd33333 	.word	0x3fd33333
 8002f60:	66666666 	.word	0x66666666
 8002f64:	3fe66666 	.word	0x3fe66666
 8002f68:	200009b8 	.word	0x200009b8
 8002f6c:	20000890 	.word	0x20000890
 8002f70:	20000424 	.word	0x20000424
 8002f74:	200008dc 	.word	0x200008dc
 8002f78:	48000400 	.word	0x48000400
 8002f7c:	48000800 	.word	0x48000800
 8002f80:	20000470 	.word	0x20000470
 8002f84:	3fe00000 	.word	0x3fe00000
 8002f88:	20000348 	.word	0x20000348
 8002f8c:	20000928 	.word	0x20000928
 8002f90:	0800fcd4 	.word	0x0800fcd4
 8002f94:	20000314 	.word	0x20000314
 8002f98:	20000304 	.word	0x20000304
 8002f9c:	20000478 	.word	0x20000478
 8002fa0:	20000018 	.word	0x20000018
 8002fa4:	2000030d 	.word	0x2000030d
		}
		else{
			move_xyz(&Rob,new_X,new_Y,new_Z,new_grab,sekwencja_save);
 8002fa8:	4b11      	ldr	r3, [pc, #68]	; (8002ff0 <main+0x378>)
 8002faa:	ed93 7b00 	vldr	d7, [r3]
 8002fae:	4b11      	ldr	r3, [pc, #68]	; (8002ff4 <main+0x37c>)
 8002fb0:	ed93 6b00 	vldr	d6, [r3]
 8002fb4:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <main+0x380>)
 8002fb6:	ed93 5b00 	vldr	d5, [r3]
 8002fba:	4b10      	ldr	r3, [pc, #64]	; (8002ffc <main+0x384>)
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4b0f      	ldr	r3, [pc, #60]	; (8003000 <main+0x388>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	bf14      	ite	ne
 8002fc8:	2301      	movne	r3, #1
 8002fca:	2300      	moveq	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	461a      	mov	r2, r3
 8002fd0:	eeb0 2a45 	vmov.f32	s4, s10
 8002fd4:	eef0 2a65 	vmov.f32	s5, s11
 8002fd8:	eeb0 1a46 	vmov.f32	s2, s12
 8002fdc:	eef0 1a66 	vmov.f32	s3, s13
 8002fe0:	eeb0 0a47 	vmov.f32	s0, s14
 8002fe4:	eef0 0a67 	vmov.f32	s1, s15
 8002fe8:	4806      	ldr	r0, [pc, #24]	; (8003004 <main+0x38c>)
 8002fea:	f7ff fc4f 	bl	800288c <move_xyz>
		if(sekwencja_start){
 8002fee:	e7a3      	b.n	8002f38 <main+0x2c0>
 8002ff0:	20000010 	.word	0x20000010
 8002ff4:	20000288 	.word	0x20000288
 8002ff8:	20000018 	.word	0x20000018
 8002ffc:	20000020 	.word	0x20000020
 8003000:	2000030c 	.word	0x2000030c
 8003004:	20000470 	.word	0x20000470

08003008 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b094      	sub	sp, #80	; 0x50
 800300c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800300e:	f107 0318 	add.w	r3, r7, #24
 8003012:	2238      	movs	r2, #56	; 0x38
 8003014:	2100      	movs	r1, #0
 8003016:	4618      	mov	r0, r3
 8003018:	f005 fdcc 	bl	8008bb4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800301c:	1d3b      	adds	r3, r7, #4
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	605a      	str	r2, [r3, #4]
 8003024:	609a      	str	r2, [r3, #8]
 8003026:	60da      	str	r2, [r3, #12]
 8003028:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800302a:	2000      	movs	r0, #0
 800302c:	f001 fc28 	bl	8004880 <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003030:	2302      	movs	r3, #2
 8003032:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003034:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003038:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800303a:	2340      	movs	r3, #64	; 0x40
 800303c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800303e:	2302      	movs	r3, #2
 8003040:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003042:	2302      	movs	r3, #2
 8003044:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003046:	2304      	movs	r3, #4
 8003048:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800304a:	2355      	movs	r3, #85	; 0x55
 800304c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800304e:	2302      	movs	r3, #2
 8003050:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003052:	2302      	movs	r3, #2
 8003054:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003056:	2302      	movs	r3, #2
 8003058:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800305a:	f107 0318 	add.w	r3, r7, #24
 800305e:	4618      	mov	r0, r3
 8003060:	f001 fcc2 	bl	80049e8 <HAL_RCC_OscConfig>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <SystemClock_Config+0x66>
	{
		Error_Handler();
 800306a:	f000 fa81 	bl	8003570 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800306e:	230f      	movs	r3, #15
 8003070:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003072:	2303      	movs	r3, #3
 8003074:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800307a:	2300      	movs	r3, #0
 800307c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003082:	1d3b      	adds	r3, r7, #4
 8003084:	2104      	movs	r1, #4
 8003086:	4618      	mov	r0, r3
 8003088:	f001 ffc6 	bl	8005018 <HAL_RCC_ClockConfig>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <SystemClock_Config+0x8e>
	{
		Error_Handler();
 8003092:	f000 fa6d 	bl	8003570 <Error_Handler>
	}
}
 8003096:	bf00      	nop
 8003098:	3750      	adds	r7, #80	; 0x50
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08e      	sub	sp, #56	; 0x38
 80030a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	605a      	str	r2, [r3, #4]
 80030b0:	609a      	str	r2, [r3, #8]
 80030b2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030b4:	f107 031c 	add.w	r3, r7, #28
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	605a      	str	r2, [r3, #4]
 80030be:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80030c0:	463b      	mov	r3, r7
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	605a      	str	r2, [r3, #4]
 80030c8:	609a      	str	r2, [r3, #8]
 80030ca:	60da      	str	r2, [r3, #12]
 80030cc:	611a      	str	r2, [r3, #16]
 80030ce:	615a      	str	r2, [r3, #20]
 80030d0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80030d2:	4b2d      	ldr	r3, [pc, #180]	; (8003188 <MX_TIM2_Init+0xe8>)
 80030d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030d8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 170-1;
 80030da:	4b2b      	ldr	r3, [pc, #172]	; (8003188 <MX_TIM2_Init+0xe8>)
 80030dc:	22a9      	movs	r2, #169	; 0xa9
 80030de:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030e0:	4b29      	ldr	r3, [pc, #164]	; (8003188 <MX_TIM2_Init+0xe8>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 19999;
 80030e6:	4b28      	ldr	r3, [pc, #160]	; (8003188 <MX_TIM2_Init+0xe8>)
 80030e8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80030ec:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030ee:	4b26      	ldr	r3, [pc, #152]	; (8003188 <MX_TIM2_Init+0xe8>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030f4:	4b24      	ldr	r3, [pc, #144]	; (8003188 <MX_TIM2_Init+0xe8>)
 80030f6:	2280      	movs	r2, #128	; 0x80
 80030f8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80030fa:	4823      	ldr	r0, [pc, #140]	; (8003188 <MX_TIM2_Init+0xe8>)
 80030fc:	f002 fb98 	bl	8005830 <HAL_TIM_Base_Init>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <MX_TIM2_Init+0x6a>
	{
		Error_Handler();
 8003106:	f000 fa33 	bl	8003570 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800310a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800310e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003110:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003114:	4619      	mov	r1, r3
 8003116:	481c      	ldr	r0, [pc, #112]	; (8003188 <MX_TIM2_Init+0xe8>)
 8003118:	f003 f97e 	bl	8006418 <HAL_TIM_ConfigClockSource>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <MX_TIM2_Init+0x86>
	{
		Error_Handler();
 8003122:	f000 fa25 	bl	8003570 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003126:	4818      	ldr	r0, [pc, #96]	; (8003188 <MX_TIM2_Init+0xe8>)
 8003128:	f002 fd07 	bl	8005b3a <HAL_TIM_PWM_Init>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <MX_TIM2_Init+0x96>
	{
		Error_Handler();
 8003132:	f000 fa1d 	bl	8003570 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003136:	2300      	movs	r3, #0
 8003138:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800313a:	2300      	movs	r3, #0
 800313c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800313e:	f107 031c 	add.w	r3, r7, #28
 8003142:	4619      	mov	r1, r3
 8003144:	4810      	ldr	r0, [pc, #64]	; (8003188 <MX_TIM2_Init+0xe8>)
 8003146:	f003 fedb 	bl	8006f00 <HAL_TIMEx_MasterConfigSynchronization>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 8003150:	f000 fa0e 	bl	8003570 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003154:	2360      	movs	r3, #96	; 0x60
 8003156:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8003158:	2300      	movs	r3, #0
 800315a:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800315c:	2300      	movs	r3, #0
 800315e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003160:	2300      	movs	r3, #0
 8003162:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003164:	463b      	mov	r3, r7
 8003166:	2200      	movs	r2, #0
 8003168:	4619      	mov	r1, r3
 800316a:	4807      	ldr	r0, [pc, #28]	; (8003188 <MX_TIM2_Init+0xe8>)
 800316c:	f003 f840 	bl	80061f0 <HAL_TIM_PWM_ConfigChannel>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <MX_TIM2_Init+0xda>
	{
		Error_Handler();
 8003176:	f000 f9fb 	bl	8003570 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800317a:	4803      	ldr	r0, [pc, #12]	; (8003188 <MX_TIM2_Init+0xe8>)
 800317c:	f000 fabc 	bl	80036f8 <HAL_TIM_MspPostInit>

}
 8003180:	bf00      	nop
 8003182:	3738      	adds	r7, #56	; 0x38
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	200008dc 	.word	0x200008dc

0800318c <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08e      	sub	sp, #56	; 0x38
 8003190:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	605a      	str	r2, [r3, #4]
 800319c:	609a      	str	r2, [r3, #8]
 800319e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031a0:	f107 031c 	add.w	r3, r7, #28
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	605a      	str	r2, [r3, #4]
 80031aa:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80031ac:	463b      	mov	r3, r7
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	605a      	str	r2, [r3, #4]
 80031b4:	609a      	str	r2, [r3, #8]
 80031b6:	60da      	str	r2, [r3, #12]
 80031b8:	611a      	str	r2, [r3, #16]
 80031ba:	615a      	str	r2, [r3, #20]
 80031bc:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80031be:	4b2b      	ldr	r3, [pc, #172]	; (800326c <MX_TIM3_Init+0xe0>)
 80031c0:	4a2b      	ldr	r2, [pc, #172]	; (8003270 <MX_TIM3_Init+0xe4>)
 80031c2:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 170-1;
 80031c4:	4b29      	ldr	r3, [pc, #164]	; (800326c <MX_TIM3_Init+0xe0>)
 80031c6:	22a9      	movs	r2, #169	; 0xa9
 80031c8:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031ca:	4b28      	ldr	r3, [pc, #160]	; (800326c <MX_TIM3_Init+0xe0>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65534;
 80031d0:	4b26      	ldr	r3, [pc, #152]	; (800326c <MX_TIM3_Init+0xe0>)
 80031d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80031d6:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031d8:	4b24      	ldr	r3, [pc, #144]	; (800326c <MX_TIM3_Init+0xe0>)
 80031da:	2200      	movs	r2, #0
 80031dc:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031de:	4b23      	ldr	r3, [pc, #140]	; (800326c <MX_TIM3_Init+0xe0>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80031e4:	4821      	ldr	r0, [pc, #132]	; (800326c <MX_TIM3_Init+0xe0>)
 80031e6:	f002 fb23 	bl	8005830 <HAL_TIM_Base_Init>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <MX_TIM3_Init+0x68>
	{
		Error_Handler();
 80031f0:	f000 f9be 	bl	8003570 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031f8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80031fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031fe:	4619      	mov	r1, r3
 8003200:	481a      	ldr	r0, [pc, #104]	; (800326c <MX_TIM3_Init+0xe0>)
 8003202:	f003 f909 	bl	8006418 <HAL_TIM_ConfigClockSource>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <MX_TIM3_Init+0x84>
	{
		Error_Handler();
 800320c:	f000 f9b0 	bl	8003570 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8003210:	4816      	ldr	r0, [pc, #88]	; (800326c <MX_TIM3_Init+0xe0>)
 8003212:	f002 fc31 	bl	8005a78 <HAL_TIM_OC_Init>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <MX_TIM3_Init+0x94>
	{
		Error_Handler();
 800321c:	f000 f9a8 	bl	8003570 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003220:	2300      	movs	r3, #0
 8003222:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003224:	2300      	movs	r3, #0
 8003226:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003228:	f107 031c 	add.w	r3, r7, #28
 800322c:	4619      	mov	r1, r3
 800322e:	480f      	ldr	r0, [pc, #60]	; (800326c <MX_TIM3_Init+0xe0>)
 8003230:	f003 fe66 	bl	8006f00 <HAL_TIMEx_MasterConfigSynchronization>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <MX_TIM3_Init+0xb2>
	{
		Error_Handler();
 800323a:	f000 f999 	bl	8003570 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800323e:	2300      	movs	r3, #0
 8003240:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8003242:	2300      	movs	r3, #0
 8003244:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003246:	2300      	movs	r3, #0
 8003248:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800324a:	2300      	movs	r3, #0
 800324c:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800324e:	463b      	mov	r3, r7
 8003250:	2200      	movs	r2, #0
 8003252:	4619      	mov	r1, r3
 8003254:	4805      	ldr	r0, [pc, #20]	; (800326c <MX_TIM3_Init+0xe0>)
 8003256:	f002 ff51 	bl	80060fc <HAL_TIM_OC_ConfigChannel>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <MX_TIM3_Init+0xd8>
	{
		Error_Handler();
 8003260:	f000 f986 	bl	8003570 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8003264:	bf00      	nop
 8003266:	3738      	adds	r7, #56	; 0x38
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	20000424 	.word	0x20000424
 8003270:	40000400 	.word	0x40000400

08003274 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800327a:	1d3b      	adds	r3, r7, #4
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8003284:	4b15      	ldr	r3, [pc, #84]	; (80032dc <MX_TIM6_Init+0x68>)
 8003286:	4a16      	ldr	r2, [pc, #88]	; (80032e0 <MX_TIM6_Init+0x6c>)
 8003288:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 17000-1;
 800328a:	4b14      	ldr	r3, [pc, #80]	; (80032dc <MX_TIM6_Init+0x68>)
 800328c:	f244 2267 	movw	r2, #16999	; 0x4267
 8003290:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003292:	4b12      	ldr	r3, [pc, #72]	; (80032dc <MX_TIM6_Init+0x68>)
 8003294:	2200      	movs	r2, #0
 8003296:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 999;
 8003298:	4b10      	ldr	r3, [pc, #64]	; (80032dc <MX_TIM6_Init+0x68>)
 800329a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800329e:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032a0:	4b0e      	ldr	r3, [pc, #56]	; (80032dc <MX_TIM6_Init+0x68>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80032a6:	480d      	ldr	r0, [pc, #52]	; (80032dc <MX_TIM6_Init+0x68>)
 80032a8:	f002 fac2 	bl	8005830 <HAL_TIM_Base_Init>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <MX_TIM6_Init+0x42>
	{
		Error_Handler();
 80032b2:	f000 f95d 	bl	8003570 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032b6:	2300      	movs	r3, #0
 80032b8:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80032be:	1d3b      	adds	r3, r7, #4
 80032c0:	4619      	mov	r1, r3
 80032c2:	4806      	ldr	r0, [pc, #24]	; (80032dc <MX_TIM6_Init+0x68>)
 80032c4:	f003 fe1c 	bl	8006f00 <HAL_TIMEx_MasterConfigSynchronization>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <MX_TIM6_Init+0x5e>
	{
		Error_Handler();
 80032ce:	f000 f94f 	bl	8003570 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 80032d2:	bf00      	nop
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	20000890 	.word	0x20000890
 80032e0:	40001000 	.word	0x40001000

080032e4 <MX_TIM7_Init>:
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032ea:	1d3b      	adds	r3, r7, #4
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	605a      	str	r2, [r3, #4]
 80032f2:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 80032f4:	4b14      	ldr	r3, [pc, #80]	; (8003348 <MX_TIM7_Init+0x64>)
 80032f6:	4a15      	ldr	r2, [pc, #84]	; (800334c <MX_TIM7_Init+0x68>)
 80032f8:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 170-1;
 80032fa:	4b13      	ldr	r3, [pc, #76]	; (8003348 <MX_TIM7_Init+0x64>)
 80032fc:	22a9      	movs	r2, #169	; 0xa9
 80032fe:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003300:	4b11      	ldr	r3, [pc, #68]	; (8003348 <MX_TIM7_Init+0x64>)
 8003302:	2200      	movs	r2, #0
 8003304:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 65534;
 8003306:	4b10      	ldr	r3, [pc, #64]	; (8003348 <MX_TIM7_Init+0x64>)
 8003308:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800330c:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800330e:	4b0e      	ldr	r3, [pc, #56]	; (8003348 <MX_TIM7_Init+0x64>)
 8003310:	2200      	movs	r2, #0
 8003312:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003314:	480c      	ldr	r0, [pc, #48]	; (8003348 <MX_TIM7_Init+0x64>)
 8003316:	f002 fa8b 	bl	8005830 <HAL_TIM_Base_Init>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <MX_TIM7_Init+0x40>
	{
		Error_Handler();
 8003320:	f000 f926 	bl	8003570 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003324:	2300      	movs	r3, #0
 8003326:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003328:	2300      	movs	r3, #0
 800332a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800332c:	1d3b      	adds	r3, r7, #4
 800332e:	4619      	mov	r1, r3
 8003330:	4805      	ldr	r0, [pc, #20]	; (8003348 <MX_TIM7_Init+0x64>)
 8003332:	f003 fde5 	bl	8006f00 <HAL_TIMEx_MasterConfigSynchronization>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <MX_TIM7_Init+0x5c>
	{
		Error_Handler();
 800333c:	f000 f918 	bl	8003570 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 8003340:	bf00      	nop
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	200009b8 	.word	0x200009b8
 800334c:	40001400 	.word	0x40001400

08003350 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8003354:	4b22      	ldr	r3, [pc, #136]	; (80033e0 <MX_USART2_UART_Init+0x90>)
 8003356:	4a23      	ldr	r2, [pc, #140]	; (80033e4 <MX_USART2_UART_Init+0x94>)
 8003358:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800335a:	4b21      	ldr	r3, [pc, #132]	; (80033e0 <MX_USART2_UART_Init+0x90>)
 800335c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003360:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003362:	4b1f      	ldr	r3, [pc, #124]	; (80033e0 <MX_USART2_UART_Init+0x90>)
 8003364:	2200      	movs	r2, #0
 8003366:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003368:	4b1d      	ldr	r3, [pc, #116]	; (80033e0 <MX_USART2_UART_Init+0x90>)
 800336a:	2200      	movs	r2, #0
 800336c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800336e:	4b1c      	ldr	r3, [pc, #112]	; (80033e0 <MX_USART2_UART_Init+0x90>)
 8003370:	2200      	movs	r2, #0
 8003372:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003374:	4b1a      	ldr	r3, [pc, #104]	; (80033e0 <MX_USART2_UART_Init+0x90>)
 8003376:	220c      	movs	r2, #12
 8003378:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800337a:	4b19      	ldr	r3, [pc, #100]	; (80033e0 <MX_USART2_UART_Init+0x90>)
 800337c:	2200      	movs	r2, #0
 800337e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003380:	4b17      	ldr	r3, [pc, #92]	; (80033e0 <MX_USART2_UART_Init+0x90>)
 8003382:	2200      	movs	r2, #0
 8003384:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003386:	4b16      	ldr	r3, [pc, #88]	; (80033e0 <MX_USART2_UART_Init+0x90>)
 8003388:	2200      	movs	r2, #0
 800338a:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800338c:	4b14      	ldr	r3, [pc, #80]	; (80033e0 <MX_USART2_UART_Init+0x90>)
 800338e:	2200      	movs	r2, #0
 8003390:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003392:	4b13      	ldr	r3, [pc, #76]	; (80033e0 <MX_USART2_UART_Init+0x90>)
 8003394:	2200      	movs	r2, #0
 8003396:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8003398:	4811      	ldr	r0, [pc, #68]	; (80033e0 <MX_USART2_UART_Init+0x90>)
 800339a:	f003 fe79 	bl	8007090 <HAL_UART_Init>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 80033a4:	f000 f8e4 	bl	8003570 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033a8:	2100      	movs	r1, #0
 80033aa:	480d      	ldr	r0, [pc, #52]	; (80033e0 <MX_USART2_UART_Init+0x90>)
 80033ac:	f005 fb0d 	bl	80089ca <HAL_UARTEx_SetTxFifoThreshold>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <MX_USART2_UART_Init+0x6a>
	{
		Error_Handler();
 80033b6:	f000 f8db 	bl	8003570 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033ba:	2100      	movs	r1, #0
 80033bc:	4808      	ldr	r0, [pc, #32]	; (80033e0 <MX_USART2_UART_Init+0x90>)
 80033be:	f005 fb42 	bl	8008a46 <HAL_UARTEx_SetRxFifoThreshold>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <MX_USART2_UART_Init+0x7c>
	{
		Error_Handler();
 80033c8:	f000 f8d2 	bl	8003570 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80033cc:	4804      	ldr	r0, [pc, #16]	; (80033e0 <MX_USART2_UART_Init+0x90>)
 80033ce:	f005 fac3 	bl	8008958 <HAL_UARTEx_DisableFifoMode>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 80033d8:	f000 f8ca 	bl	8003570 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80033dc:	bf00      	nop
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	20000928 	.word	0x20000928
 80033e4:	40004400 	.word	0x40004400

080033e8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80033ee:	4b16      	ldr	r3, [pc, #88]	; (8003448 <MX_DMA_Init+0x60>)
 80033f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033f2:	4a15      	ldr	r2, [pc, #84]	; (8003448 <MX_DMA_Init+0x60>)
 80033f4:	f043 0304 	orr.w	r3, r3, #4
 80033f8:	6493      	str	r3, [r2, #72]	; 0x48
 80033fa:	4b13      	ldr	r3, [pc, #76]	; (8003448 <MX_DMA_Init+0x60>)
 80033fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033fe:	f003 0304 	and.w	r3, r3, #4
 8003402:	607b      	str	r3, [r7, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003406:	4b10      	ldr	r3, [pc, #64]	; (8003448 <MX_DMA_Init+0x60>)
 8003408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800340a:	4a0f      	ldr	r2, [pc, #60]	; (8003448 <MX_DMA_Init+0x60>)
 800340c:	f043 0301 	orr.w	r3, r3, #1
 8003410:	6493      	str	r3, [r2, #72]	; 0x48
 8003412:	4b0d      	ldr	r3, [pc, #52]	; (8003448 <MX_DMA_Init+0x60>)
 8003414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	603b      	str	r3, [r7, #0]
 800341c:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800341e:	2200      	movs	r2, #0
 8003420:	2100      	movs	r1, #0
 8003422:	200b      	movs	r0, #11
 8003424:	f000 fd13 	bl	8003e4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003428:	200b      	movs	r0, #11
 800342a:	f000 fd2a 	bl	8003e82 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800342e:	2200      	movs	r2, #0
 8003430:	2100      	movs	r1, #0
 8003432:	200c      	movs	r0, #12
 8003434:	f000 fd0b 	bl	8003e4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003438:	200c      	movs	r0, #12
 800343a:	f000 fd22 	bl	8003e82 <HAL_NVIC_EnableIRQ>

}
 800343e:	bf00      	nop
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40021000 	.word	0x40021000

0800344c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b08a      	sub	sp, #40	; 0x28
 8003450:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003452:	f107 0314 	add.w	r3, r7, #20
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	605a      	str	r2, [r3, #4]
 800345c:	609a      	str	r2, [r3, #8]
 800345e:	60da      	str	r2, [r3, #12]
 8003460:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003462:	4b40      	ldr	r3, [pc, #256]	; (8003564 <MX_GPIO_Init+0x118>)
 8003464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003466:	4a3f      	ldr	r2, [pc, #252]	; (8003564 <MX_GPIO_Init+0x118>)
 8003468:	f043 0304 	orr.w	r3, r3, #4
 800346c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800346e:	4b3d      	ldr	r3, [pc, #244]	; (8003564 <MX_GPIO_Init+0x118>)
 8003470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003472:	f003 0304 	and.w	r3, r3, #4
 8003476:	613b      	str	r3, [r7, #16]
 8003478:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800347a:	4b3a      	ldr	r3, [pc, #232]	; (8003564 <MX_GPIO_Init+0x118>)
 800347c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800347e:	4a39      	ldr	r2, [pc, #228]	; (8003564 <MX_GPIO_Init+0x118>)
 8003480:	f043 0320 	orr.w	r3, r3, #32
 8003484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003486:	4b37      	ldr	r3, [pc, #220]	; (8003564 <MX_GPIO_Init+0x118>)
 8003488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800348a:	f003 0320 	and.w	r3, r3, #32
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003492:	4b34      	ldr	r3, [pc, #208]	; (8003564 <MX_GPIO_Init+0x118>)
 8003494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003496:	4a33      	ldr	r2, [pc, #204]	; (8003564 <MX_GPIO_Init+0x118>)
 8003498:	f043 0301 	orr.w	r3, r3, #1
 800349c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800349e:	4b31      	ldr	r3, [pc, #196]	; (8003564 <MX_GPIO_Init+0x118>)
 80034a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	60bb      	str	r3, [r7, #8]
 80034a8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80034aa:	4b2e      	ldr	r3, [pc, #184]	; (8003564 <MX_GPIO_Init+0x118>)
 80034ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ae:	4a2d      	ldr	r2, [pc, #180]	; (8003564 <MX_GPIO_Init+0x118>)
 80034b0:	f043 0302 	orr.w	r3, r3, #2
 80034b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034b6:	4b2b      	ldr	r3, [pc, #172]	; (8003564 <MX_GPIO_Init+0x118>)
 80034b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	607b      	str	r3, [r7, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, ENABLE_Pin|STEP1_Pin|SLEEP_Pin|DIR3_Pin, GPIO_PIN_RESET);
 80034c2:	2200      	movs	r2, #0
 80034c4:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 80034c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034cc:	f001 f9c0 	bl	8004850 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, STEP2_Pin|DIR2_Pin|STEP3_Pin|DIR1_Pin
 80034d0:	2200      	movs	r2, #0
 80034d2:	f44f 618f 	mov.w	r1, #1144	; 0x478
 80034d6:	4824      	ldr	r0, [pc, #144]	; (8003568 <MX_GPIO_Init+0x11c>)
 80034d8:	f001 f9ba 	bl	8004850 <HAL_GPIO_WritePin>
			|M_1_2_3_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 80034dc:	2200      	movs	r2, #0
 80034de:	2180      	movs	r1, #128	; 0x80
 80034e0:	4822      	ldr	r0, [pc, #136]	; (800356c <MX_GPIO_Init+0x120>)
 80034e2:	f001 f9b5 	bl	8004850 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LIMIT_J2_Pin LIMIT_Z_Pin */
	GPIO_InitStruct.Pin = LIMIT_J2_Pin|LIMIT_Z_Pin;
 80034e6:	2360      	movs	r3, #96	; 0x60
 80034e8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80034ee:	2302      	movs	r3, #2
 80034f0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f2:	f107 0314 	add.w	r3, r7, #20
 80034f6:	4619      	mov	r1, r3
 80034f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034fc:	f001 f80e 	bl	800451c <HAL_GPIO_Init>

	/*Configure GPIO pins : ENABLE_Pin STEP1_Pin SLEEP_Pin DIR3_Pin */
	GPIO_InitStruct.Pin = ENABLE_Pin|STEP1_Pin|SLEEP_Pin|DIR3_Pin;
 8003500:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8003504:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003506:	2301      	movs	r3, #1
 8003508:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350a:	2300      	movs	r3, #0
 800350c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800350e:	2300      	movs	r3, #0
 8003510:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003512:	f107 0314 	add.w	r3, r7, #20
 8003516:	4619      	mov	r1, r3
 8003518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800351c:	f000 fffe 	bl	800451c <HAL_GPIO_Init>

	/*Configure GPIO pins : STEP2_Pin DIR2_Pin STEP3_Pin DIR1_Pin
                           M_1_2_3_Pin */
	GPIO_InitStruct.Pin = STEP2_Pin|DIR2_Pin|STEP3_Pin|DIR1_Pin
 8003520:	f44f 638f 	mov.w	r3, #1144	; 0x478
 8003524:	617b      	str	r3, [r7, #20]
			|M_1_2_3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003526:	2301      	movs	r3, #1
 8003528:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352a:	2300      	movs	r3, #0
 800352c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800352e:	2300      	movs	r3, #0
 8003530:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003532:	f107 0314 	add.w	r3, r7, #20
 8003536:	4619      	mov	r1, r3
 8003538:	480b      	ldr	r0, [pc, #44]	; (8003568 <MX_GPIO_Init+0x11c>)
 800353a:	f000 ffef 	bl	800451c <HAL_GPIO_Init>

	/*Configure GPIO pin : RESET_Pin */
	GPIO_InitStruct.Pin = RESET_Pin;
 800353e:	2380      	movs	r3, #128	; 0x80
 8003540:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003542:	2301      	movs	r3, #1
 8003544:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003546:	2300      	movs	r3, #0
 8003548:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800354a:	2300      	movs	r3, #0
 800354c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 800354e:	f107 0314 	add.w	r3, r7, #20
 8003552:	4619      	mov	r1, r3
 8003554:	4805      	ldr	r0, [pc, #20]	; (800356c <MX_GPIO_Init+0x120>)
 8003556:	f000 ffe1 	bl	800451c <HAL_GPIO_Init>

}
 800355a:	bf00      	nop
 800355c:	3728      	adds	r7, #40	; 0x28
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	40021000 	.word	0x40021000
 8003568:	48000400 	.word	0x48000400
 800356c:	48000800 	.word	0x48000800

08003570 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003574:	b672      	cpsid	i
}
 8003576:	bf00      	nop
	static char mess_err[] = "Error!\r\n";
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)mess_err, strlen(mess_err), 1000);
 8003578:	4805      	ldr	r0, [pc, #20]	; (8003590 <Error_Handler+0x20>)
 800357a:	f7fc fe51 	bl	8000220 <strlen>
 800357e:	4603      	mov	r3, r0
 8003580:	b29a      	uxth	r2, r3
 8003582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003586:	4902      	ldr	r1, [pc, #8]	; (8003590 <Error_Handler+0x20>)
 8003588:	4802      	ldr	r0, [pc, #8]	; (8003594 <Error_Handler+0x24>)
 800358a:	f003 fdd1 	bl	8007130 <HAL_UART_Transmit>
 800358e:	e7f3      	b.n	8003578 <Error_Handler+0x8>
 8003590:	20000024 	.word	0x20000024
 8003594:	20000928 	.word	0x20000928

08003598 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800359e:	4b0f      	ldr	r3, [pc, #60]	; (80035dc <HAL_MspInit+0x44>)
 80035a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a2:	4a0e      	ldr	r2, [pc, #56]	; (80035dc <HAL_MspInit+0x44>)
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	6613      	str	r3, [r2, #96]	; 0x60
 80035aa:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <HAL_MspInit+0x44>)
 80035ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	607b      	str	r3, [r7, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035b6:	4b09      	ldr	r3, [pc, #36]	; (80035dc <HAL_MspInit+0x44>)
 80035b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ba:	4a08      	ldr	r2, [pc, #32]	; (80035dc <HAL_MspInit+0x44>)
 80035bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c0:	6593      	str	r3, [r2, #88]	; 0x58
 80035c2:	4b06      	ldr	r3, [pc, #24]	; (80035dc <HAL_MspInit+0x44>)
 80035c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ca:	603b      	str	r3, [r7, #0]
 80035cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80035ce:	f001 f9fb 	bl	80049c8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035d2:	bf00      	nop
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40021000 	.word	0x40021000

080035e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f0:	d114      	bne.n	800361c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035f2:	4b3c      	ldr	r3, [pc, #240]	; (80036e4 <HAL_TIM_Base_MspInit+0x104>)
 80035f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f6:	4a3b      	ldr	r2, [pc, #236]	; (80036e4 <HAL_TIM_Base_MspInit+0x104>)
 80035f8:	f043 0301 	orr.w	r3, r3, #1
 80035fc:	6593      	str	r3, [r2, #88]	; 0x58
 80035fe:	4b39      	ldr	r3, [pc, #228]	; (80036e4 <HAL_TIM_Base_MspInit+0x104>)
 8003600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	61fb      	str	r3, [r7, #28]
 8003608:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800360a:	2200      	movs	r2, #0
 800360c:	2100      	movs	r1, #0
 800360e:	201c      	movs	r0, #28
 8003610:	f000 fc1d 	bl	8003e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003614:	201c      	movs	r0, #28
 8003616:	f000 fc34 	bl	8003e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800361a:	e05e      	b.n	80036da <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM3)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a31      	ldr	r2, [pc, #196]	; (80036e8 <HAL_TIM_Base_MspInit+0x108>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d114      	bne.n	8003650 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003626:	4b2f      	ldr	r3, [pc, #188]	; (80036e4 <HAL_TIM_Base_MspInit+0x104>)
 8003628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362a:	4a2e      	ldr	r2, [pc, #184]	; (80036e4 <HAL_TIM_Base_MspInit+0x104>)
 800362c:	f043 0302 	orr.w	r3, r3, #2
 8003630:	6593      	str	r3, [r2, #88]	; 0x58
 8003632:	4b2c      	ldr	r3, [pc, #176]	; (80036e4 <HAL_TIM_Base_MspInit+0x104>)
 8003634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	61bb      	str	r3, [r7, #24]
 800363c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800363e:	2200      	movs	r2, #0
 8003640:	2100      	movs	r1, #0
 8003642:	201d      	movs	r0, #29
 8003644:	f000 fc03 	bl	8003e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003648:	201d      	movs	r0, #29
 800364a:	f000 fc1a 	bl	8003e82 <HAL_NVIC_EnableIRQ>
}
 800364e:	e044      	b.n	80036da <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM4)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a25      	ldr	r2, [pc, #148]	; (80036ec <HAL_TIM_Base_MspInit+0x10c>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d10c      	bne.n	8003674 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800365a:	4b22      	ldr	r3, [pc, #136]	; (80036e4 <HAL_TIM_Base_MspInit+0x104>)
 800365c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365e:	4a21      	ldr	r2, [pc, #132]	; (80036e4 <HAL_TIM_Base_MspInit+0x104>)
 8003660:	f043 0304 	orr.w	r3, r3, #4
 8003664:	6593      	str	r3, [r2, #88]	; 0x58
 8003666:	4b1f      	ldr	r3, [pc, #124]	; (80036e4 <HAL_TIM_Base_MspInit+0x104>)
 8003668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	617b      	str	r3, [r7, #20]
 8003670:	697b      	ldr	r3, [r7, #20]
}
 8003672:	e032      	b.n	80036da <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM6)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a1d      	ldr	r2, [pc, #116]	; (80036f0 <HAL_TIM_Base_MspInit+0x110>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d114      	bne.n	80036a8 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800367e:	4b19      	ldr	r3, [pc, #100]	; (80036e4 <HAL_TIM_Base_MspInit+0x104>)
 8003680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003682:	4a18      	ldr	r2, [pc, #96]	; (80036e4 <HAL_TIM_Base_MspInit+0x104>)
 8003684:	f043 0310 	orr.w	r3, r3, #16
 8003688:	6593      	str	r3, [r2, #88]	; 0x58
 800368a:	4b16      	ldr	r3, [pc, #88]	; (80036e4 <HAL_TIM_Base_MspInit+0x104>)
 800368c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368e:	f003 0310 	and.w	r3, r3, #16
 8003692:	613b      	str	r3, [r7, #16]
 8003694:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003696:	2200      	movs	r2, #0
 8003698:	2100      	movs	r1, #0
 800369a:	2036      	movs	r0, #54	; 0x36
 800369c:	f000 fbd7 	bl	8003e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80036a0:	2036      	movs	r0, #54	; 0x36
 80036a2:	f000 fbee 	bl	8003e82 <HAL_NVIC_EnableIRQ>
}
 80036a6:	e018      	b.n	80036da <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM7)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a11      	ldr	r2, [pc, #68]	; (80036f4 <HAL_TIM_Base_MspInit+0x114>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d113      	bne.n	80036da <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80036b2:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <HAL_TIM_Base_MspInit+0x104>)
 80036b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b6:	4a0b      	ldr	r2, [pc, #44]	; (80036e4 <HAL_TIM_Base_MspInit+0x104>)
 80036b8:	f043 0320 	orr.w	r3, r3, #32
 80036bc:	6593      	str	r3, [r2, #88]	; 0x58
 80036be:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <HAL_TIM_Base_MspInit+0x104>)
 80036c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c2:	f003 0320 	and.w	r3, r3, #32
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80036ca:	2200      	movs	r2, #0
 80036cc:	2100      	movs	r1, #0
 80036ce:	2037      	movs	r0, #55	; 0x37
 80036d0:	f000 fbbd 	bl	8003e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80036d4:	2037      	movs	r0, #55	; 0x37
 80036d6:	f000 fbd4 	bl	8003e82 <HAL_NVIC_EnableIRQ>
}
 80036da:	bf00      	nop
 80036dc:	3720      	adds	r7, #32
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40021000 	.word	0x40021000
 80036e8:	40000400 	.word	0x40000400
 80036ec:	40000800 	.word	0x40000800
 80036f0:	40001000 	.word	0x40001000
 80036f4:	40001400 	.word	0x40001400

080036f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003700:	f107 030c 	add.w	r3, r7, #12
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	605a      	str	r2, [r3, #4]
 800370a:	609a      	str	r2, [r3, #8]
 800370c:	60da      	str	r2, [r3, #12]
 800370e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003718:	d11c      	bne.n	8003754 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800371a:	4b10      	ldr	r3, [pc, #64]	; (800375c <HAL_TIM_MspPostInit+0x64>)
 800371c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371e:	4a0f      	ldr	r2, [pc, #60]	; (800375c <HAL_TIM_MspPostInit+0x64>)
 8003720:	f043 0301 	orr.w	r3, r3, #1
 8003724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003726:	4b0d      	ldr	r3, [pc, #52]	; (800375c <HAL_TIM_MspPostInit+0x64>)
 8003728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	60bb      	str	r3, [r7, #8]
 8003730:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM_SERWO_Pin;
 8003732:	2301      	movs	r3, #1
 8003734:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003736:	2302      	movs	r3, #2
 8003738:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373a:	2300      	movs	r3, #0
 800373c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800373e:	2300      	movs	r3, #0
 8003740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003742:	2301      	movs	r3, #1
 8003744:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_SERWO_GPIO_Port, &GPIO_InitStruct);
 8003746:	f107 030c 	add.w	r3, r7, #12
 800374a:	4619      	mov	r1, r3
 800374c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003750:	f000 fee4 	bl	800451c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003754:	bf00      	nop
 8003756:	3720      	adds	r7, #32
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40021000 	.word	0x40021000

08003760 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b09a      	sub	sp, #104	; 0x68
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003768:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	605a      	str	r2, [r3, #4]
 8003772:	609a      	str	r2, [r3, #8]
 8003774:	60da      	str	r2, [r3, #12]
 8003776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003778:	f107 0310 	add.w	r3, r7, #16
 800377c:	2244      	movs	r2, #68	; 0x44
 800377e:	2100      	movs	r1, #0
 8003780:	4618      	mov	r0, r3
 8003782:	f005 fa17 	bl	8008bb4 <memset>
  if(huart->Instance==USART2)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a4c      	ldr	r2, [pc, #304]	; (80038bc <HAL_UART_MspInit+0x15c>)
 800378c:	4293      	cmp	r3, r2
 800378e:	f040 8091 	bne.w	80038b4 <HAL_UART_MspInit+0x154>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003792:	2302      	movs	r3, #2
 8003794:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003796:	2300      	movs	r3, #0
 8003798:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800379a:	f107 0310 	add.w	r3, r7, #16
 800379e:	4618      	mov	r0, r3
 80037a0:	f001 fe56 	bl	8005450 <HAL_RCCEx_PeriphCLKConfig>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80037aa:	f7ff fee1 	bl	8003570 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80037ae:	4b44      	ldr	r3, [pc, #272]	; (80038c0 <HAL_UART_MspInit+0x160>)
 80037b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b2:	4a43      	ldr	r2, [pc, #268]	; (80038c0 <HAL_UART_MspInit+0x160>)
 80037b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037b8:	6593      	str	r3, [r2, #88]	; 0x58
 80037ba:	4b41      	ldr	r3, [pc, #260]	; (80038c0 <HAL_UART_MspInit+0x160>)
 80037bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037c6:	4b3e      	ldr	r3, [pc, #248]	; (80038c0 <HAL_UART_MspInit+0x160>)
 80037c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ca:	4a3d      	ldr	r2, [pc, #244]	; (80038c0 <HAL_UART_MspInit+0x160>)
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037d2:	4b3b      	ldr	r3, [pc, #236]	; (80038c0 <HAL_UART_MspInit+0x160>)
 80037d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	60bb      	str	r3, [r7, #8]
 80037dc:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80037de:	230c      	movs	r3, #12
 80037e0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e2:	2302      	movs	r3, #2
 80037e4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e6:	2300      	movs	r3, #0
 80037e8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ea:	2300      	movs	r3, #0
 80037ec:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037ee:	2307      	movs	r3, #7
 80037f0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80037f6:	4619      	mov	r1, r3
 80037f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037fc:	f000 fe8e 	bl	800451c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8003800:	4b30      	ldr	r3, [pc, #192]	; (80038c4 <HAL_UART_MspInit+0x164>)
 8003802:	4a31      	ldr	r2, [pc, #196]	; (80038c8 <HAL_UART_MspInit+0x168>)
 8003804:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003806:	4b2f      	ldr	r3, [pc, #188]	; (80038c4 <HAL_UART_MspInit+0x164>)
 8003808:	221a      	movs	r2, #26
 800380a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800380c:	4b2d      	ldr	r3, [pc, #180]	; (80038c4 <HAL_UART_MspInit+0x164>)
 800380e:	2200      	movs	r2, #0
 8003810:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003812:	4b2c      	ldr	r3, [pc, #176]	; (80038c4 <HAL_UART_MspInit+0x164>)
 8003814:	2200      	movs	r2, #0
 8003816:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003818:	4b2a      	ldr	r3, [pc, #168]	; (80038c4 <HAL_UART_MspInit+0x164>)
 800381a:	2280      	movs	r2, #128	; 0x80
 800381c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800381e:	4b29      	ldr	r3, [pc, #164]	; (80038c4 <HAL_UART_MspInit+0x164>)
 8003820:	2200      	movs	r2, #0
 8003822:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003824:	4b27      	ldr	r3, [pc, #156]	; (80038c4 <HAL_UART_MspInit+0x164>)
 8003826:	2200      	movs	r2, #0
 8003828:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800382a:	4b26      	ldr	r3, [pc, #152]	; (80038c4 <HAL_UART_MspInit+0x164>)
 800382c:	2200      	movs	r2, #0
 800382e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003830:	4b24      	ldr	r3, [pc, #144]	; (80038c4 <HAL_UART_MspInit+0x164>)
 8003832:	2200      	movs	r2, #0
 8003834:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003836:	4823      	ldr	r0, [pc, #140]	; (80038c4 <HAL_UART_MspInit+0x164>)
 8003838:	f000 fb3e 	bl	8003eb8 <HAL_DMA_Init>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8003842:	f7ff fe95 	bl	8003570 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a1e      	ldr	r2, [pc, #120]	; (80038c4 <HAL_UART_MspInit+0x164>)
 800384a:	67da      	str	r2, [r3, #124]	; 0x7c
 800384c:	4a1d      	ldr	r2, [pc, #116]	; (80038c4 <HAL_UART_MspInit+0x164>)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8003852:	4b1e      	ldr	r3, [pc, #120]	; (80038cc <HAL_UART_MspInit+0x16c>)
 8003854:	4a1e      	ldr	r2, [pc, #120]	; (80038d0 <HAL_UART_MspInit+0x170>)
 8003856:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003858:	4b1c      	ldr	r3, [pc, #112]	; (80038cc <HAL_UART_MspInit+0x16c>)
 800385a:	221b      	movs	r2, #27
 800385c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800385e:	4b1b      	ldr	r3, [pc, #108]	; (80038cc <HAL_UART_MspInit+0x16c>)
 8003860:	2210      	movs	r2, #16
 8003862:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003864:	4b19      	ldr	r3, [pc, #100]	; (80038cc <HAL_UART_MspInit+0x16c>)
 8003866:	2200      	movs	r2, #0
 8003868:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800386a:	4b18      	ldr	r3, [pc, #96]	; (80038cc <HAL_UART_MspInit+0x16c>)
 800386c:	2280      	movs	r2, #128	; 0x80
 800386e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003870:	4b16      	ldr	r3, [pc, #88]	; (80038cc <HAL_UART_MspInit+0x16c>)
 8003872:	2200      	movs	r2, #0
 8003874:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003876:	4b15      	ldr	r3, [pc, #84]	; (80038cc <HAL_UART_MspInit+0x16c>)
 8003878:	2200      	movs	r2, #0
 800387a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800387c:	4b13      	ldr	r3, [pc, #76]	; (80038cc <HAL_UART_MspInit+0x16c>)
 800387e:	2200      	movs	r2, #0
 8003880:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003882:	4b12      	ldr	r3, [pc, #72]	; (80038cc <HAL_UART_MspInit+0x16c>)
 8003884:	2200      	movs	r2, #0
 8003886:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003888:	4810      	ldr	r0, [pc, #64]	; (80038cc <HAL_UART_MspInit+0x16c>)
 800388a:	f000 fb15 	bl	8003eb8 <HAL_DMA_Init>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8003894:	f7ff fe6c 	bl	8003570 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a0c      	ldr	r2, [pc, #48]	; (80038cc <HAL_UART_MspInit+0x16c>)
 800389c:	679a      	str	r2, [r3, #120]	; 0x78
 800389e:	4a0b      	ldr	r2, [pc, #44]	; (80038cc <HAL_UART_MspInit+0x16c>)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80038a4:	2200      	movs	r2, #0
 80038a6:	2100      	movs	r1, #0
 80038a8:	2026      	movs	r0, #38	; 0x26
 80038aa:	f000 fad0 	bl	8003e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80038ae:	2026      	movs	r0, #38	; 0x26
 80038b0:	f000 fae7 	bl	8003e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80038b4:	bf00      	nop
 80038b6:	3768      	adds	r7, #104	; 0x68
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40004400 	.word	0x40004400
 80038c0:	40021000 	.word	0x40021000
 80038c4:	20000378 	.word	0x20000378
 80038c8:	40020008 	.word	0x40020008
 80038cc:	20000830 	.word	0x20000830
 80038d0:	4002001c 	.word	0x4002001c

080038d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80038d8:	e7fe      	b.n	80038d8 <NMI_Handler+0x4>

080038da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038da:	b480      	push	{r7}
 80038dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038de:	e7fe      	b.n	80038de <HardFault_Handler+0x4>

080038e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038e4:	e7fe      	b.n	80038e4 <MemManage_Handler+0x4>

080038e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038e6:	b480      	push	{r7}
 80038e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038ea:	e7fe      	b.n	80038ea <BusFault_Handler+0x4>

080038ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038f0:	e7fe      	b.n	80038f0 <UsageFault_Handler+0x4>

080038f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038f2:	b480      	push	{r7}
 80038f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038f6:	bf00      	nop
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003904:	bf00      	nop
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800390e:	b480      	push	{r7}
 8003910:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003912:	bf00      	nop
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003920:	f000 f99c 	bl	8003c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003924:	bf00      	nop
 8003926:	bd80      	pop	{r7, pc}

08003928 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800392c:	4802      	ldr	r0, [pc, #8]	; (8003938 <DMA1_Channel1_IRQHandler+0x10>)
 800392e:	f000 fca6 	bl	800427e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003932:	bf00      	nop
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	20000378 	.word	0x20000378

0800393c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003940:	4802      	ldr	r0, [pc, #8]	; (800394c <DMA1_Channel2_IRQHandler+0x10>)
 8003942:	f000 fc9c 	bl	800427e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003946:	bf00      	nop
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20000830 	.word	0x20000830

08003950 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003954:	4802      	ldr	r0, [pc, #8]	; (8003960 <TIM2_IRQHandler+0x10>)
 8003956:	f002 fa51 	bl	8005dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800395a:	bf00      	nop
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	200008dc 	.word	0x200008dc

08003964 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003968:	4802      	ldr	r0, [pc, #8]	; (8003974 <TIM3_IRQHandler+0x10>)
 800396a:	f002 fa47 	bl	8005dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800396e:	bf00      	nop
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	20000424 	.word	0x20000424

08003978 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800397c:	4802      	ldr	r0, [pc, #8]	; (8003988 <USART2_IRQHandler+0x10>)
 800397e:	f003 fd55 	bl	800742c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003982:	bf00      	nop
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	20000928 	.word	0x20000928

0800398c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003990:	4802      	ldr	r0, [pc, #8]	; (800399c <TIM6_DAC_IRQHandler+0x10>)
 8003992:	f002 fa33 	bl	8005dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003996:	bf00      	nop
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	20000890 	.word	0x20000890

080039a0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80039a4:	4802      	ldr	r0, [pc, #8]	; (80039b0 <TIM7_IRQHandler+0x10>)
 80039a6:	f002 fa29 	bl	8005dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80039aa:	bf00      	nop
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	200009b8 	.word	0x200009b8

080039b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
	return 1;
 80039b8:	2301      	movs	r3, #1
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <_kill>:

int _kill(int pid, int sig)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80039ce:	f005 f8c7 	bl	8008b60 <__errno>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2216      	movs	r2, #22
 80039d6:	601a      	str	r2, [r3, #0]
	return -1;
 80039d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <_exit>:

void _exit (int status)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80039ec:	f04f 31ff 	mov.w	r1, #4294967295
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7ff ffe7 	bl	80039c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80039f6:	e7fe      	b.n	80039f6 <_exit+0x12>

080039f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a04:	2300      	movs	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	e00a      	b.n	8003a20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003a0a:	f3af 8000 	nop.w
 8003a0e:	4601      	mov	r1, r0
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	60ba      	str	r2, [r7, #8]
 8003a16:	b2ca      	uxtb	r2, r1
 8003a18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	617b      	str	r3, [r7, #20]
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	dbf0      	blt.n	8003a0a <_read+0x12>
	}

return len;
 8003a28:	687b      	ldr	r3, [r7, #4]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3718      	adds	r7, #24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b086      	sub	sp, #24
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	60f8      	str	r0, [r7, #12]
 8003a3a:	60b9      	str	r1, [r7, #8]
 8003a3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a3e:	2300      	movs	r3, #0
 8003a40:	617b      	str	r3, [r7, #20]
 8003a42:	e009      	b.n	8003a58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	60ba      	str	r2, [r7, #8]
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	3301      	adds	r3, #1
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	dbf1      	blt.n	8003a44 <_write+0x12>
	}
	return len;
 8003a60:	687b      	ldr	r3, [r7, #4]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <_close>:

int _close(int file)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
	return -1;
 8003a72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
 8003a8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a92:	605a      	str	r2, [r3, #4]
	return 0;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <_isatty>:

int _isatty(int file)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b083      	sub	sp, #12
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
	return 1;
 8003aaa:	2301      	movs	r3, #1
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
	return 0;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
	...

08003ad4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003adc:	4a14      	ldr	r2, [pc, #80]	; (8003b30 <_sbrk+0x5c>)
 8003ade:	4b15      	ldr	r3, [pc, #84]	; (8003b34 <_sbrk+0x60>)
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ae8:	4b13      	ldr	r3, [pc, #76]	; (8003b38 <_sbrk+0x64>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d102      	bne.n	8003af6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003af0:	4b11      	ldr	r3, [pc, #68]	; (8003b38 <_sbrk+0x64>)
 8003af2:	4a12      	ldr	r2, [pc, #72]	; (8003b3c <_sbrk+0x68>)
 8003af4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003af6:	4b10      	ldr	r3, [pc, #64]	; (8003b38 <_sbrk+0x64>)
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4413      	add	r3, r2
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d207      	bcs.n	8003b14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b04:	f005 f82c 	bl	8008b60 <__errno>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	220c      	movs	r2, #12
 8003b0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b12:	e009      	b.n	8003b28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b14:	4b08      	ldr	r3, [pc, #32]	; (8003b38 <_sbrk+0x64>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b1a:	4b07      	ldr	r3, [pc, #28]	; (8003b38 <_sbrk+0x64>)
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4413      	add	r3, r2
 8003b22:	4a05      	ldr	r2, [pc, #20]	; (8003b38 <_sbrk+0x64>)
 8003b24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b26:	68fb      	ldr	r3, [r7, #12]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	20008000 	.word	0x20008000
 8003b34:	00000400 	.word	0x00000400
 8003b38:	2000036c 	.word	0x2000036c
 8003b3c:	20000a18 	.word	0x20000a18

08003b40 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003b44:	4b06      	ldr	r3, [pc, #24]	; (8003b60 <SystemInit+0x20>)
 8003b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4a:	4a05      	ldr	r2, [pc, #20]	; (8003b60 <SystemInit+0x20>)
 8003b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b54:	bf00      	nop
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	e000ed00 	.word	0xe000ed00

08003b64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003b64:	480d      	ldr	r0, [pc, #52]	; (8003b9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003b66:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b68:	480d      	ldr	r0, [pc, #52]	; (8003ba0 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b6a:	490e      	ldr	r1, [pc, #56]	; (8003ba4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b6c:	4a0e      	ldr	r2, [pc, #56]	; (8003ba8 <LoopForever+0xe>)
  movs r3, #0
 8003b6e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003b70:	e002      	b.n	8003b78 <LoopCopyDataInit>

08003b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b76:	3304      	adds	r3, #4

08003b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b7c:	d3f9      	bcc.n	8003b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b7e:	4a0b      	ldr	r2, [pc, #44]	; (8003bac <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b80:	4c0b      	ldr	r4, [pc, #44]	; (8003bb0 <LoopForever+0x16>)
  movs r3, #0
 8003b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b84:	e001      	b.n	8003b8a <LoopFillZerobss>

08003b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b88:	3204      	adds	r2, #4

08003b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b8c:	d3fb      	bcc.n	8003b86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003b8e:	f7ff ffd7 	bl	8003b40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b92:	f004 ffeb 	bl	8008b6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b96:	f7ff f86f 	bl	8002c78 <main>

08003b9a <LoopForever>:

LoopForever:
    b LoopForever
 8003b9a:	e7fe      	b.n	8003b9a <LoopForever>
  ldr   r0, =_estack
 8003b9c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ba4:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8003ba8:	08010480 	.word	0x08010480
  ldr r2, =_sbss
 8003bac:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8003bb0:	20000a18 	.word	0x20000a18

08003bb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003bb4:	e7fe      	b.n	8003bb4 <ADC1_2_IRQHandler>

08003bb6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b082      	sub	sp, #8
 8003bba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bc0:	2003      	movs	r0, #3
 8003bc2:	f000 f939 	bl	8003e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003bc6:	200f      	movs	r0, #15
 8003bc8:	f000 f80e 	bl	8003be8 <HAL_InitTick>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d002      	beq.n	8003bd8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	71fb      	strb	r3, [r7, #7]
 8003bd6:	e001      	b.n	8003bdc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003bd8:	f7ff fcde 	bl	8003598 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003bdc:	79fb      	ldrb	r3, [r7, #7]

}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003bf4:	4b16      	ldr	r3, [pc, #88]	; (8003c50 <HAL_InitTick+0x68>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d022      	beq.n	8003c42 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003bfc:	4b15      	ldr	r3, [pc, #84]	; (8003c54 <HAL_InitTick+0x6c>)
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	4b13      	ldr	r3, [pc, #76]	; (8003c50 <HAL_InitTick+0x68>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003c08:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 f944 	bl	8003e9e <HAL_SYSTICK_Config>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10f      	bne.n	8003c3c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b0f      	cmp	r3, #15
 8003c20:	d809      	bhi.n	8003c36 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c22:	2200      	movs	r2, #0
 8003c24:	6879      	ldr	r1, [r7, #4]
 8003c26:	f04f 30ff 	mov.w	r0, #4294967295
 8003c2a:	f000 f910 	bl	8003e4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c2e:	4a0a      	ldr	r2, [pc, #40]	; (8003c58 <HAL_InitTick+0x70>)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	e007      	b.n	8003c46 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	73fb      	strb	r3, [r7, #15]
 8003c3a:	e004      	b.n	8003c46 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	73fb      	strb	r3, [r7, #15]
 8003c40:	e001      	b.n	8003c46 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	20000038 	.word	0x20000038
 8003c54:	20000030 	.word	0x20000030
 8003c58:	20000034 	.word	0x20000034

08003c5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c60:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <HAL_IncTick+0x1c>)
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	4b05      	ldr	r3, [pc, #20]	; (8003c7c <HAL_IncTick+0x20>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4413      	add	r3, r2
 8003c6a:	4a03      	ldr	r2, [pc, #12]	; (8003c78 <HAL_IncTick+0x1c>)
 8003c6c:	6013      	str	r3, [r2, #0]
}
 8003c6e:	bf00      	nop
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	20000a04 	.word	0x20000a04
 8003c7c:	20000038 	.word	0x20000038

08003c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  return uwTick;
 8003c84:	4b03      	ldr	r3, [pc, #12]	; (8003c94 <HAL_GetTick+0x14>)
 8003c86:	681b      	ldr	r3, [r3, #0]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	20000a04 	.word	0x20000a04

08003c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ca8:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <__NVIC_SetPriorityGrouping+0x44>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cca:	4a04      	ldr	r2, [pc, #16]	; (8003cdc <__NVIC_SetPriorityGrouping+0x44>)
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	60d3      	str	r3, [r2, #12]
}
 8003cd0:	bf00      	nop
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	e000ed00 	.word	0xe000ed00

08003ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ce4:	4b04      	ldr	r3, [pc, #16]	; (8003cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	0a1b      	lsrs	r3, r3, #8
 8003cea:	f003 0307 	and.w	r3, r3, #7
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	e000ed00 	.word	0xe000ed00

08003cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	4603      	mov	r3, r0
 8003d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	db0b      	blt.n	8003d26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d0e:	79fb      	ldrb	r3, [r7, #7]
 8003d10:	f003 021f 	and.w	r2, r3, #31
 8003d14:	4907      	ldr	r1, [pc, #28]	; (8003d34 <__NVIC_EnableIRQ+0x38>)
 8003d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1a:	095b      	lsrs	r3, r3, #5
 8003d1c:	2001      	movs	r0, #1
 8003d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	e000e100 	.word	0xe000e100

08003d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	6039      	str	r1, [r7, #0]
 8003d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	db0a      	blt.n	8003d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	490c      	ldr	r1, [pc, #48]	; (8003d84 <__NVIC_SetPriority+0x4c>)
 8003d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d56:	0112      	lsls	r2, r2, #4
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	440b      	add	r3, r1
 8003d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d60:	e00a      	b.n	8003d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	4908      	ldr	r1, [pc, #32]	; (8003d88 <__NVIC_SetPriority+0x50>)
 8003d68:	79fb      	ldrb	r3, [r7, #7]
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	3b04      	subs	r3, #4
 8003d70:	0112      	lsls	r2, r2, #4
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	440b      	add	r3, r1
 8003d76:	761a      	strb	r2, [r3, #24]
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	e000e100 	.word	0xe000e100
 8003d88:	e000ed00 	.word	0xe000ed00

08003d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b089      	sub	sp, #36	; 0x24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	f1c3 0307 	rsb	r3, r3, #7
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	bf28      	it	cs
 8003daa:	2304      	movcs	r3, #4
 8003dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	3304      	adds	r3, #4
 8003db2:	2b06      	cmp	r3, #6
 8003db4:	d902      	bls.n	8003dbc <NVIC_EncodePriority+0x30>
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	3b03      	subs	r3, #3
 8003dba:	e000      	b.n	8003dbe <NVIC_EncodePriority+0x32>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	43da      	mvns	r2, r3
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	401a      	ands	r2, r3
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	fa01 f303 	lsl.w	r3, r1, r3
 8003dde:	43d9      	mvns	r1, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003de4:	4313      	orrs	r3, r2
         );
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3724      	adds	r7, #36	; 0x24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
	...

08003df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e04:	d301      	bcc.n	8003e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e06:	2301      	movs	r3, #1
 8003e08:	e00f      	b.n	8003e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e0a:	4a0a      	ldr	r2, [pc, #40]	; (8003e34 <SysTick_Config+0x40>)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e12:	210f      	movs	r1, #15
 8003e14:	f04f 30ff 	mov.w	r0, #4294967295
 8003e18:	f7ff ff8e 	bl	8003d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e1c:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <SysTick_Config+0x40>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e22:	4b04      	ldr	r3, [pc, #16]	; (8003e34 <SysTick_Config+0x40>)
 8003e24:	2207      	movs	r2, #7
 8003e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	e000e010 	.word	0xe000e010

08003e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f7ff ff29 	bl	8003c98 <__NVIC_SetPriorityGrouping>
}
 8003e46:	bf00      	nop
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b086      	sub	sp, #24
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	4603      	mov	r3, r0
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	607a      	str	r2, [r7, #4]
 8003e5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e5c:	f7ff ff40 	bl	8003ce0 <__NVIC_GetPriorityGrouping>
 8003e60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	68b9      	ldr	r1, [r7, #8]
 8003e66:	6978      	ldr	r0, [r7, #20]
 8003e68:	f7ff ff90 	bl	8003d8c <NVIC_EncodePriority>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e72:	4611      	mov	r1, r2
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff ff5f 	bl	8003d38 <__NVIC_SetPriority>
}
 8003e7a:	bf00      	nop
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b082      	sub	sp, #8
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	4603      	mov	r3, r0
 8003e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff ff33 	bl	8003cfc <__NVIC_EnableIRQ>
}
 8003e96:	bf00      	nop
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b082      	sub	sp, #8
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7ff ffa4 	bl	8003df4 <SysTick_Config>
 8003eac:	4603      	mov	r3, r0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e08d      	b.n	8003fe6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	4b47      	ldr	r3, [pc, #284]	; (8003ff0 <HAL_DMA_Init+0x138>)
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d80f      	bhi.n	8003ef6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	461a      	mov	r2, r3
 8003edc:	4b45      	ldr	r3, [pc, #276]	; (8003ff4 <HAL_DMA_Init+0x13c>)
 8003ede:	4413      	add	r3, r2
 8003ee0:	4a45      	ldr	r2, [pc, #276]	; (8003ff8 <HAL_DMA_Init+0x140>)
 8003ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee6:	091b      	lsrs	r3, r3, #4
 8003ee8:	009a      	lsls	r2, r3, #2
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a42      	ldr	r2, [pc, #264]	; (8003ffc <HAL_DMA_Init+0x144>)
 8003ef2:	641a      	str	r2, [r3, #64]	; 0x40
 8003ef4:	e00e      	b.n	8003f14 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	4b40      	ldr	r3, [pc, #256]	; (8004000 <HAL_DMA_Init+0x148>)
 8003efe:	4413      	add	r3, r2
 8003f00:	4a3d      	ldr	r2, [pc, #244]	; (8003ff8 <HAL_DMA_Init+0x140>)
 8003f02:	fba2 2303 	umull	r2, r3, r2, r3
 8003f06:	091b      	lsrs	r3, r3, #4
 8003f08:	009a      	lsls	r2, r3, #2
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a3c      	ldr	r2, [pc, #240]	; (8004004 <HAL_DMA_Init+0x14c>)
 8003f12:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003f38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fa76 	bl	8004458 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f74:	d102      	bne.n	8003f7c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f84:	b2d2      	uxtb	r2, r2
 8003f86:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f90:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d010      	beq.n	8003fbc <HAL_DMA_Init+0x104>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d80c      	bhi.n	8003fbc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 fa96 	bl	80044d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003fb8:	605a      	str	r2, [r3, #4]
 8003fba:	e008      	b.n	8003fce <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	40020407 	.word	0x40020407
 8003ff4:	bffdfff8 	.word	0xbffdfff8
 8003ff8:	cccccccd 	.word	0xcccccccd
 8003ffc:	40020000 	.word	0x40020000
 8004000:	bffdfbf8 	.word	0xbffdfbf8
 8004004:	40020400 	.word	0x40020400

08004008 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
 8004014:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004016:	2300      	movs	r3, #0
 8004018:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_DMA_Start_IT+0x20>
 8004024:	2302      	movs	r3, #2
 8004026:	e066      	b.n	80040f6 <HAL_DMA_Start_IT+0xee>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b01      	cmp	r3, #1
 800403a:	d155      	bne.n	80040e8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0201 	bic.w	r2, r2, #1
 8004058:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	68b9      	ldr	r1, [r7, #8]
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 f9bb 	bl	80043dc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406a:	2b00      	cmp	r3, #0
 800406c:	d008      	beq.n	8004080 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f042 020e 	orr.w	r2, r2, #14
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	e00f      	b.n	80040a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0204 	bic.w	r2, r2, #4
 800408e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f042 020a 	orr.w	r2, r2, #10
 800409e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d007      	beq.n	80040be <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040bc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d007      	beq.n	80040d6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040d4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f042 0201 	orr.w	r2, r2, #1
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	e005      	b.n	80040f4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80040f0:	2302      	movs	r3, #2
 80040f2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80040f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3718      	adds	r7, #24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040fe:	b480      	push	{r7}
 8004100:	b085      	sub	sp, #20
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d005      	beq.n	8004122 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2204      	movs	r2, #4
 800411a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	73fb      	strb	r3, [r7, #15]
 8004120:	e037      	b.n	8004192 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 020e 	bic.w	r2, r2, #14
 8004130:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800413c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004140:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0201 	bic.w	r2, r2, #1
 8004150:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004156:	f003 021f 	and.w	r2, r3, #31
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	2101      	movs	r1, #1
 8004160:	fa01 f202 	lsl.w	r2, r1, r2
 8004164:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800416e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00c      	beq.n	8004192 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004182:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004186:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004190:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041b8:	2300      	movs	r3, #0
 80041ba:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d00d      	beq.n	80041e4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2204      	movs	r2, #4
 80041cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	73fb      	strb	r3, [r7, #15]
 80041e2:	e047      	b.n	8004274 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 020e 	bic.w	r2, r2, #14
 80041f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 0201 	bic.w	r2, r2, #1
 8004202:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800420e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004212:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004218:	f003 021f 	and.w	r2, r3, #31
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004220:	2101      	movs	r1, #1
 8004222:	fa01 f202 	lsl.w	r2, r1, r2
 8004226:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004230:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00c      	beq.n	8004254 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004244:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004248:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004252:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	4798      	blx	r3
    }
  }
  return status;
 8004274:	7bfb      	ldrb	r3, [r7, #15]
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b084      	sub	sp, #16
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429a:	f003 031f 	and.w	r3, r3, #31
 800429e:	2204      	movs	r2, #4
 80042a0:	409a      	lsls	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4013      	ands	r3, r2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d026      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x7a>
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d021      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0320 	and.w	r3, r3, #32
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d107      	bne.n	80042d2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0204 	bic.w	r2, r2, #4
 80042d0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d6:	f003 021f 	and.w	r2, r3, #31
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	2104      	movs	r1, #4
 80042e0:	fa01 f202 	lsl.w	r2, r1, r2
 80042e4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d071      	beq.n	80043d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80042f6:	e06c      	b.n	80043d2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fc:	f003 031f 	and.w	r3, r3, #31
 8004300:	2202      	movs	r2, #2
 8004302:	409a      	lsls	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4013      	ands	r3, r2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d02e      	beq.n	800436a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d029      	beq.n	800436a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0320 	and.w	r3, r3, #32
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10b      	bne.n	800433c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 020a 	bic.w	r2, r2, #10
 8004332:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004340:	f003 021f 	and.w	r2, r3, #31
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004348:	2102      	movs	r1, #2
 800434a:	fa01 f202 	lsl.w	r2, r1, r2
 800434e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	2b00      	cmp	r3, #0
 800435e:	d038      	beq.n	80043d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004368:	e033      	b.n	80043d2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436e:	f003 031f 	and.w	r3, r3, #31
 8004372:	2208      	movs	r2, #8
 8004374:	409a      	lsls	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	4013      	ands	r3, r2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d02a      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	f003 0308 	and.w	r3, r3, #8
 8004384:	2b00      	cmp	r3, #0
 8004386:	d025      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 020e 	bic.w	r2, r2, #14
 8004396:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439c:	f003 021f 	and.w	r2, r3, #31
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a4:	2101      	movs	r1, #1
 80043a6:	fa01 f202 	lsl.w	r2, r1, r2
 80043aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d004      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80043d2:	bf00      	nop
 80043d4:	bf00      	nop
}
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
 80043e8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043f2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d004      	beq.n	8004406 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004404:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440a:	f003 021f 	and.w	r2, r3, #31
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	2101      	movs	r1, #1
 8004414:	fa01 f202 	lsl.w	r2, r1, r2
 8004418:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	2b10      	cmp	r3, #16
 8004428:	d108      	bne.n	800443c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800443a:	e007      	b.n	800444c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	60da      	str	r2, [r3, #12]
}
 800444c:	bf00      	nop
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	4b16      	ldr	r3, [pc, #88]	; (80044c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004468:	429a      	cmp	r2, r3
 800446a:	d802      	bhi.n	8004472 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800446c:	4b15      	ldr	r3, [pc, #84]	; (80044c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	e001      	b.n	8004476 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8004472:	4b15      	ldr	r3, [pc, #84]	; (80044c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004474:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	b2db      	uxtb	r3, r3
 8004480:	3b08      	subs	r3, #8
 8004482:	4a12      	ldr	r2, [pc, #72]	; (80044cc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004484:	fba2 2303 	umull	r2, r3, r2, r3
 8004488:	091b      	lsrs	r3, r3, #4
 800448a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004490:	089b      	lsrs	r3, r3, #2
 8004492:	009a      	lsls	r2, r3, #2
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	4413      	add	r3, r2
 8004498:	461a      	mov	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a0b      	ldr	r2, [pc, #44]	; (80044d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80044a2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f003 031f 	and.w	r3, r3, #31
 80044aa:	2201      	movs	r2, #1
 80044ac:	409a      	lsls	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80044b2:	bf00      	nop
 80044b4:	371c      	adds	r7, #28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	40020407 	.word	0x40020407
 80044c4:	40020800 	.word	0x40020800
 80044c8:	40020820 	.word	0x40020820
 80044cc:	cccccccd 	.word	0xcccccccd
 80044d0:	40020880 	.word	0x40020880

080044d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	4b0b      	ldr	r3, [pc, #44]	; (8004514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80044e8:	4413      	add	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	461a      	mov	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a08      	ldr	r2, [pc, #32]	; (8004518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80044f6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	3b01      	subs	r3, #1
 80044fc:	f003 031f 	and.w	r3, r3, #31
 8004500:	2201      	movs	r2, #1
 8004502:	409a      	lsls	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004508:	bf00      	nop
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	1000823f 	.word	0x1000823f
 8004518:	40020940 	.word	0x40020940

0800451c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800451c:	b480      	push	{r7}
 800451e:	b087      	sub	sp, #28
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004526:	2300      	movs	r3, #0
 8004528:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800452a:	e15a      	b.n	80047e2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	2101      	movs	r1, #1
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	fa01 f303 	lsl.w	r3, r1, r3
 8004538:	4013      	ands	r3, r2
 800453a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2b00      	cmp	r3, #0
 8004540:	f000 814c 	beq.w	80047dc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f003 0303 	and.w	r3, r3, #3
 800454c:	2b01      	cmp	r3, #1
 800454e:	d005      	beq.n	800455c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004558:	2b02      	cmp	r3, #2
 800455a:	d130      	bne.n	80045be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	2203      	movs	r2, #3
 8004568:	fa02 f303 	lsl.w	r3, r2, r3
 800456c:	43db      	mvns	r3, r3
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	4013      	ands	r3, r2
 8004572:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	68da      	ldr	r2, [r3, #12]
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	4313      	orrs	r3, r2
 8004584:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004592:	2201      	movs	r2, #1
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	fa02 f303 	lsl.w	r3, r2, r3
 800459a:	43db      	mvns	r3, r3
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	4013      	ands	r3, r2
 80045a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	091b      	lsrs	r3, r3, #4
 80045a8:	f003 0201 	and.w	r2, r3, #1
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	fa02 f303 	lsl.w	r3, r2, r3
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	d017      	beq.n	80045fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	2203      	movs	r2, #3
 80045d6:	fa02 f303 	lsl.w	r3, r2, r3
 80045da:	43db      	mvns	r3, r3
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	4013      	ands	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	689a      	ldr	r2, [r3, #8]
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	fa02 f303 	lsl.w	r3, r2, r3
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f003 0303 	and.w	r3, r3, #3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d123      	bne.n	800464e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	08da      	lsrs	r2, r3, #3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3208      	adds	r2, #8
 800460e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004612:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	220f      	movs	r2, #15
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	43db      	mvns	r3, r3
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	4013      	ands	r3, r2
 8004628:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	691a      	ldr	r2, [r3, #16]
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f003 0307 	and.w	r3, r3, #7
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	fa02 f303 	lsl.w	r3, r2, r3
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	4313      	orrs	r3, r2
 800463e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	08da      	lsrs	r2, r3, #3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	3208      	adds	r2, #8
 8004648:	6939      	ldr	r1, [r7, #16]
 800464a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	2203      	movs	r2, #3
 800465a:	fa02 f303 	lsl.w	r3, r2, r3
 800465e:	43db      	mvns	r3, r3
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	4013      	ands	r3, r2
 8004664:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f003 0203 	and.w	r2, r3, #3
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	4313      	orrs	r3, r2
 800467a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 80a6 	beq.w	80047dc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004690:	4b5b      	ldr	r3, [pc, #364]	; (8004800 <HAL_GPIO_Init+0x2e4>)
 8004692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004694:	4a5a      	ldr	r2, [pc, #360]	; (8004800 <HAL_GPIO_Init+0x2e4>)
 8004696:	f043 0301 	orr.w	r3, r3, #1
 800469a:	6613      	str	r3, [r2, #96]	; 0x60
 800469c:	4b58      	ldr	r3, [pc, #352]	; (8004800 <HAL_GPIO_Init+0x2e4>)
 800469e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	60bb      	str	r3, [r7, #8]
 80046a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046a8:	4a56      	ldr	r2, [pc, #344]	; (8004804 <HAL_GPIO_Init+0x2e8>)
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	089b      	lsrs	r3, r3, #2
 80046ae:	3302      	adds	r3, #2
 80046b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f003 0303 	and.w	r3, r3, #3
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	220f      	movs	r2, #15
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	43db      	mvns	r3, r3
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	4013      	ands	r3, r2
 80046ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80046d2:	d01f      	beq.n	8004714 <HAL_GPIO_Init+0x1f8>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a4c      	ldr	r2, [pc, #304]	; (8004808 <HAL_GPIO_Init+0x2ec>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d019      	beq.n	8004710 <HAL_GPIO_Init+0x1f4>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a4b      	ldr	r2, [pc, #300]	; (800480c <HAL_GPIO_Init+0x2f0>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d013      	beq.n	800470c <HAL_GPIO_Init+0x1f0>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a4a      	ldr	r2, [pc, #296]	; (8004810 <HAL_GPIO_Init+0x2f4>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d00d      	beq.n	8004708 <HAL_GPIO_Init+0x1ec>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a49      	ldr	r2, [pc, #292]	; (8004814 <HAL_GPIO_Init+0x2f8>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d007      	beq.n	8004704 <HAL_GPIO_Init+0x1e8>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a48      	ldr	r2, [pc, #288]	; (8004818 <HAL_GPIO_Init+0x2fc>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d101      	bne.n	8004700 <HAL_GPIO_Init+0x1e4>
 80046fc:	2305      	movs	r3, #5
 80046fe:	e00a      	b.n	8004716 <HAL_GPIO_Init+0x1fa>
 8004700:	2306      	movs	r3, #6
 8004702:	e008      	b.n	8004716 <HAL_GPIO_Init+0x1fa>
 8004704:	2304      	movs	r3, #4
 8004706:	e006      	b.n	8004716 <HAL_GPIO_Init+0x1fa>
 8004708:	2303      	movs	r3, #3
 800470a:	e004      	b.n	8004716 <HAL_GPIO_Init+0x1fa>
 800470c:	2302      	movs	r3, #2
 800470e:	e002      	b.n	8004716 <HAL_GPIO_Init+0x1fa>
 8004710:	2301      	movs	r3, #1
 8004712:	e000      	b.n	8004716 <HAL_GPIO_Init+0x1fa>
 8004714:	2300      	movs	r3, #0
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	f002 0203 	and.w	r2, r2, #3
 800471c:	0092      	lsls	r2, r2, #2
 800471e:	4093      	lsls	r3, r2
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	4313      	orrs	r3, r2
 8004724:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004726:	4937      	ldr	r1, [pc, #220]	; (8004804 <HAL_GPIO_Init+0x2e8>)
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	089b      	lsrs	r3, r3, #2
 800472c:	3302      	adds	r3, #2
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004734:	4b39      	ldr	r3, [pc, #228]	; (800481c <HAL_GPIO_Init+0x300>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	43db      	mvns	r3, r3
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	4013      	ands	r3, r2
 8004742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	4313      	orrs	r3, r2
 8004756:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004758:	4a30      	ldr	r2, [pc, #192]	; (800481c <HAL_GPIO_Init+0x300>)
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800475e:	4b2f      	ldr	r3, [pc, #188]	; (800481c <HAL_GPIO_Init+0x300>)
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	43db      	mvns	r3, r3
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	4013      	ands	r3, r2
 800476c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4313      	orrs	r3, r2
 8004780:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004782:	4a26      	ldr	r2, [pc, #152]	; (800481c <HAL_GPIO_Init+0x300>)
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004788:	4b24      	ldr	r3, [pc, #144]	; (800481c <HAL_GPIO_Init+0x300>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	43db      	mvns	r3, r3
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	4013      	ands	r3, r2
 8004796:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80047ac:	4a1b      	ldr	r2, [pc, #108]	; (800481c <HAL_GPIO_Init+0x300>)
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80047b2:	4b1a      	ldr	r3, [pc, #104]	; (800481c <HAL_GPIO_Init+0x300>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	43db      	mvns	r3, r3
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4013      	ands	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047d6:	4a11      	ldr	r2, [pc, #68]	; (800481c <HAL_GPIO_Init+0x300>)
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	3301      	adds	r3, #1
 80047e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	fa22 f303 	lsr.w	r3, r2, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f47f ae9d 	bne.w	800452c <HAL_GPIO_Init+0x10>
  }
}
 80047f2:	bf00      	nop
 80047f4:	bf00      	nop
 80047f6:	371c      	adds	r7, #28
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	40021000 	.word	0x40021000
 8004804:	40010000 	.word	0x40010000
 8004808:	48000400 	.word	0x48000400
 800480c:	48000800 	.word	0x48000800
 8004810:	48000c00 	.word	0x48000c00
 8004814:	48001000 	.word	0x48001000
 8004818:	48001400 	.word	0x48001400
 800481c:	40010400 	.word	0x40010400

08004820 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	460b      	mov	r3, r1
 800482a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	691a      	ldr	r2, [r3, #16]
 8004830:	887b      	ldrh	r3, [r7, #2]
 8004832:	4013      	ands	r3, r2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d002      	beq.n	800483e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004838:	2301      	movs	r3, #1
 800483a:	73fb      	strb	r3, [r7, #15]
 800483c:	e001      	b.n	8004842 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800483e:	2300      	movs	r3, #0
 8004840:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004842:	7bfb      	ldrb	r3, [r7, #15]
}
 8004844:	4618      	mov	r0, r3
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	460b      	mov	r3, r1
 800485a:	807b      	strh	r3, [r7, #2]
 800485c:	4613      	mov	r3, r2
 800485e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004860:	787b      	ldrb	r3, [r7, #1]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004866:	887a      	ldrh	r2, [r7, #2]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800486c:	e002      	b.n	8004874 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800486e:	887a      	ldrh	r2, [r7, #2]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d141      	bne.n	8004912 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800488e:	4b4b      	ldr	r3, [pc, #300]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800489a:	d131      	bne.n	8004900 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800489c:	4b47      	ldr	r3, [pc, #284]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800489e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048a2:	4a46      	ldr	r2, [pc, #280]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048ac:	4b43      	ldr	r3, [pc, #268]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048b4:	4a41      	ldr	r2, [pc, #260]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048bc:	4b40      	ldr	r3, [pc, #256]	; (80049c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2232      	movs	r2, #50	; 0x32
 80048c2:	fb02 f303 	mul.w	r3, r2, r3
 80048c6:	4a3f      	ldr	r2, [pc, #252]	; (80049c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80048c8:	fba2 2303 	umull	r2, r3, r2, r3
 80048cc:	0c9b      	lsrs	r3, r3, #18
 80048ce:	3301      	adds	r3, #1
 80048d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048d2:	e002      	b.n	80048da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	3b01      	subs	r3, #1
 80048d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048da:	4b38      	ldr	r3, [pc, #224]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048e6:	d102      	bne.n	80048ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1f2      	bne.n	80048d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048ee:	4b33      	ldr	r3, [pc, #204]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048fa:	d158      	bne.n	80049ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e057      	b.n	80049b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004900:	4b2e      	ldr	r3, [pc, #184]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004902:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004906:	4a2d      	ldr	r2, [pc, #180]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800490c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004910:	e04d      	b.n	80049ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004918:	d141      	bne.n	800499e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800491a:	4b28      	ldr	r3, [pc, #160]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004926:	d131      	bne.n	800498c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004928:	4b24      	ldr	r3, [pc, #144]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800492a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800492e:	4a23      	ldr	r2, [pc, #140]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004934:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004938:	4b20      	ldr	r3, [pc, #128]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004940:	4a1e      	ldr	r2, [pc, #120]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004942:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004946:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004948:	4b1d      	ldr	r3, [pc, #116]	; (80049c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2232      	movs	r2, #50	; 0x32
 800494e:	fb02 f303 	mul.w	r3, r2, r3
 8004952:	4a1c      	ldr	r2, [pc, #112]	; (80049c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004954:	fba2 2303 	umull	r2, r3, r2, r3
 8004958:	0c9b      	lsrs	r3, r3, #18
 800495a:	3301      	adds	r3, #1
 800495c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800495e:	e002      	b.n	8004966 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	3b01      	subs	r3, #1
 8004964:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004966:	4b15      	ldr	r3, [pc, #84]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800496e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004972:	d102      	bne.n	800497a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1f2      	bne.n	8004960 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800497a:	4b10      	ldr	r3, [pc, #64]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004986:	d112      	bne.n	80049ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e011      	b.n	80049b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800498c:	4b0b      	ldr	r3, [pc, #44]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800498e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004992:	4a0a      	ldr	r2, [pc, #40]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004998:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800499c:	e007      	b.n	80049ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800499e:	4b07      	ldr	r3, [pc, #28]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049a6:	4a05      	ldr	r2, [pc, #20]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049ac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	40007000 	.word	0x40007000
 80049c0:	20000030 	.word	0x20000030
 80049c4:	431bde83 	.word	0x431bde83

080049c8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80049cc:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	4a04      	ldr	r2, [pc, #16]	; (80049e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80049d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049d6:	6093      	str	r3, [r2, #8]
}
 80049d8:	bf00      	nop
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	40007000 	.word	0x40007000

080049e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b088      	sub	sp, #32
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e308      	b.n	800500c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d075      	beq.n	8004af2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a06:	4ba3      	ldr	r3, [pc, #652]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 030c 	and.w	r3, r3, #12
 8004a0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a10:	4ba0      	ldr	r3, [pc, #640]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	f003 0303 	and.w	r3, r3, #3
 8004a18:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	2b0c      	cmp	r3, #12
 8004a1e:	d102      	bne.n	8004a26 <HAL_RCC_OscConfig+0x3e>
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	2b03      	cmp	r3, #3
 8004a24:	d002      	beq.n	8004a2c <HAL_RCC_OscConfig+0x44>
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d10b      	bne.n	8004a44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a2c:	4b99      	ldr	r3, [pc, #612]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d05b      	beq.n	8004af0 <HAL_RCC_OscConfig+0x108>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d157      	bne.n	8004af0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e2e3      	b.n	800500c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a4c:	d106      	bne.n	8004a5c <HAL_RCC_OscConfig+0x74>
 8004a4e:	4b91      	ldr	r3, [pc, #580]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a90      	ldr	r2, [pc, #576]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	e01d      	b.n	8004a98 <HAL_RCC_OscConfig+0xb0>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a64:	d10c      	bne.n	8004a80 <HAL_RCC_OscConfig+0x98>
 8004a66:	4b8b      	ldr	r3, [pc, #556]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a8a      	ldr	r2, [pc, #552]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	4b88      	ldr	r3, [pc, #544]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a87      	ldr	r2, [pc, #540]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	e00b      	b.n	8004a98 <HAL_RCC_OscConfig+0xb0>
 8004a80:	4b84      	ldr	r3, [pc, #528]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a83      	ldr	r2, [pc, #524]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a8a:	6013      	str	r3, [r2, #0]
 8004a8c:	4b81      	ldr	r3, [pc, #516]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a80      	ldr	r2, [pc, #512]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d013      	beq.n	8004ac8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa0:	f7ff f8ee 	bl	8003c80 <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aa8:	f7ff f8ea 	bl	8003c80 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b64      	cmp	r3, #100	; 0x64
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e2a8      	b.n	800500c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aba:	4b76      	ldr	r3, [pc, #472]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0f0      	beq.n	8004aa8 <HAL_RCC_OscConfig+0xc0>
 8004ac6:	e014      	b.n	8004af2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac8:	f7ff f8da 	bl	8003c80 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ad0:	f7ff f8d6 	bl	8003c80 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b64      	cmp	r3, #100	; 0x64
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e294      	b.n	800500c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ae2:	4b6c      	ldr	r3, [pc, #432]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1f0      	bne.n	8004ad0 <HAL_RCC_OscConfig+0xe8>
 8004aee:	e000      	b.n	8004af2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d075      	beq.n	8004bea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004afe:	4b65      	ldr	r3, [pc, #404]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 030c 	and.w	r3, r3, #12
 8004b06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b08:	4b62      	ldr	r3, [pc, #392]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f003 0303 	and.w	r3, r3, #3
 8004b10:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	2b0c      	cmp	r3, #12
 8004b16:	d102      	bne.n	8004b1e <HAL_RCC_OscConfig+0x136>
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d002      	beq.n	8004b24 <HAL_RCC_OscConfig+0x13c>
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	2b04      	cmp	r3, #4
 8004b22:	d11f      	bne.n	8004b64 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b24:	4b5b      	ldr	r3, [pc, #364]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d005      	beq.n	8004b3c <HAL_RCC_OscConfig+0x154>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d101      	bne.n	8004b3c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e267      	b.n	800500c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b3c:	4b55      	ldr	r3, [pc, #340]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	061b      	lsls	r3, r3, #24
 8004b4a:	4952      	ldr	r1, [pc, #328]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004b50:	4b51      	ldr	r3, [pc, #324]	; (8004c98 <HAL_RCC_OscConfig+0x2b0>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7ff f847 	bl	8003be8 <HAL_InitTick>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d043      	beq.n	8004be8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e253      	b.n	800500c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d023      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b6c:	4b49      	ldr	r3, [pc, #292]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a48      	ldr	r2, [pc, #288]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b78:	f7ff f882 	bl	8003c80 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b80:	f7ff f87e 	bl	8003c80 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e23c      	b.n	800500c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b92:	4b40      	ldr	r3, [pc, #256]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0f0      	beq.n	8004b80 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b9e:	4b3d      	ldr	r3, [pc, #244]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	061b      	lsls	r3, r3, #24
 8004bac:	4939      	ldr	r1, [pc, #228]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	604b      	str	r3, [r1, #4]
 8004bb2:	e01a      	b.n	8004bea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bb4:	4b37      	ldr	r3, [pc, #220]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a36      	ldr	r2, [pc, #216]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004bba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc0:	f7ff f85e 	bl	8003c80 <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bc8:	f7ff f85a 	bl	8003c80 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e218      	b.n	800500c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bda:	4b2e      	ldr	r3, [pc, #184]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1f0      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x1e0>
 8004be6:	e000      	b.n	8004bea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004be8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0308 	and.w	r3, r3, #8
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d03c      	beq.n	8004c70 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d01c      	beq.n	8004c38 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bfe:	4b25      	ldr	r3, [pc, #148]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c04:	4a23      	ldr	r2, [pc, #140]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004c06:	f043 0301 	orr.w	r3, r3, #1
 8004c0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c0e:	f7ff f837 	bl	8003c80 <HAL_GetTick>
 8004c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c14:	e008      	b.n	8004c28 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c16:	f7ff f833 	bl	8003c80 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e1f1      	b.n	800500c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c28:	4b1a      	ldr	r3, [pc, #104]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0ef      	beq.n	8004c16 <HAL_RCC_OscConfig+0x22e>
 8004c36:	e01b      	b.n	8004c70 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c38:	4b16      	ldr	r3, [pc, #88]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c3e:	4a15      	ldr	r2, [pc, #84]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004c40:	f023 0301 	bic.w	r3, r3, #1
 8004c44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c48:	f7ff f81a 	bl	8003c80 <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c50:	f7ff f816 	bl	8003c80 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e1d4      	b.n	800500c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c62:	4b0c      	ldr	r3, [pc, #48]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1ef      	bne.n	8004c50 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 80ab 	beq.w	8004dd4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c82:	4b04      	ldr	r3, [pc, #16]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <HAL_RCC_OscConfig+0x2b4>
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e005      	b.n	8004c9e <HAL_RCC_OscConfig+0x2b6>
 8004c92:	bf00      	nop
 8004c94:	40021000 	.word	0x40021000
 8004c98:	20000034 	.word	0x20000034
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00d      	beq.n	8004cbe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ca2:	4baf      	ldr	r3, [pc, #700]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca6:	4aae      	ldr	r2, [pc, #696]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cac:	6593      	str	r3, [r2, #88]	; 0x58
 8004cae:	4bac      	ldr	r3, [pc, #688]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cbe:	4ba9      	ldr	r3, [pc, #676]	; (8004f64 <HAL_RCC_OscConfig+0x57c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d118      	bne.n	8004cfc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cca:	4ba6      	ldr	r3, [pc, #664]	; (8004f64 <HAL_RCC_OscConfig+0x57c>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4aa5      	ldr	r2, [pc, #660]	; (8004f64 <HAL_RCC_OscConfig+0x57c>)
 8004cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cd6:	f7fe ffd3 	bl	8003c80 <HAL_GetTick>
 8004cda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cde:	f7fe ffcf 	bl	8003c80 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e18d      	b.n	800500c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cf0:	4b9c      	ldr	r3, [pc, #624]	; (8004f64 <HAL_RCC_OscConfig+0x57c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d0f0      	beq.n	8004cde <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d108      	bne.n	8004d16 <HAL_RCC_OscConfig+0x32e>
 8004d04:	4b96      	ldr	r3, [pc, #600]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0a:	4a95      	ldr	r2, [pc, #596]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004d0c:	f043 0301 	orr.w	r3, r3, #1
 8004d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d14:	e024      	b.n	8004d60 <HAL_RCC_OscConfig+0x378>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	2b05      	cmp	r3, #5
 8004d1c:	d110      	bne.n	8004d40 <HAL_RCC_OscConfig+0x358>
 8004d1e:	4b90      	ldr	r3, [pc, #576]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d24:	4a8e      	ldr	r2, [pc, #568]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004d26:	f043 0304 	orr.w	r3, r3, #4
 8004d2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d2e:	4b8c      	ldr	r3, [pc, #560]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d34:	4a8a      	ldr	r2, [pc, #552]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004d36:	f043 0301 	orr.w	r3, r3, #1
 8004d3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d3e:	e00f      	b.n	8004d60 <HAL_RCC_OscConfig+0x378>
 8004d40:	4b87      	ldr	r3, [pc, #540]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d46:	4a86      	ldr	r2, [pc, #536]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004d48:	f023 0301 	bic.w	r3, r3, #1
 8004d4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d50:	4b83      	ldr	r3, [pc, #524]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d56:	4a82      	ldr	r2, [pc, #520]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004d58:	f023 0304 	bic.w	r3, r3, #4
 8004d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d016      	beq.n	8004d96 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d68:	f7fe ff8a 	bl	8003c80 <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d6e:	e00a      	b.n	8004d86 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d70:	f7fe ff86 	bl	8003c80 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e142      	b.n	800500c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d86:	4b76      	ldr	r3, [pc, #472]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d0ed      	beq.n	8004d70 <HAL_RCC_OscConfig+0x388>
 8004d94:	e015      	b.n	8004dc2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d96:	f7fe ff73 	bl	8003c80 <HAL_GetTick>
 8004d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d9c:	e00a      	b.n	8004db4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d9e:	f7fe ff6f 	bl	8003c80 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d901      	bls.n	8004db4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e12b      	b.n	800500c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004db4:	4b6a      	ldr	r3, [pc, #424]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1ed      	bne.n	8004d9e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004dc2:	7ffb      	ldrb	r3, [r7, #31]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d105      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dc8:	4b65      	ldr	r3, [pc, #404]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dcc:	4a64      	ldr	r2, [pc, #400]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dd2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0320 	and.w	r3, r3, #32
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d03c      	beq.n	8004e5a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d01c      	beq.n	8004e22 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004de8:	4b5d      	ldr	r3, [pc, #372]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004dea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dee:	4a5c      	ldr	r2, [pc, #368]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004df0:	f043 0301 	orr.w	r3, r3, #1
 8004df4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df8:	f7fe ff42 	bl	8003c80 <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dfe:	e008      	b.n	8004e12 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e00:	f7fe ff3e 	bl	8003c80 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e0fc      	b.n	800500c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e12:	4b53      	ldr	r3, [pc, #332]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004e14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d0ef      	beq.n	8004e00 <HAL_RCC_OscConfig+0x418>
 8004e20:	e01b      	b.n	8004e5a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e22:	4b4f      	ldr	r3, [pc, #316]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004e24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e28:	4a4d      	ldr	r2, [pc, #308]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004e2a:	f023 0301 	bic.w	r3, r3, #1
 8004e2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e32:	f7fe ff25 	bl	8003c80 <HAL_GetTick>
 8004e36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e38:	e008      	b.n	8004e4c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e3a:	f7fe ff21 	bl	8003c80 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e0df      	b.n	800500c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e4c:	4b44      	ldr	r3, [pc, #272]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004e4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1ef      	bne.n	8004e3a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 80d3 	beq.w	800500a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e64:	4b3e      	ldr	r3, [pc, #248]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f003 030c 	and.w	r3, r3, #12
 8004e6c:	2b0c      	cmp	r3, #12
 8004e6e:	f000 808d 	beq.w	8004f8c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d15a      	bne.n	8004f30 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e7a:	4b39      	ldr	r3, [pc, #228]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a38      	ldr	r2, [pc, #224]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004e80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e86:	f7fe fefb 	bl	8003c80 <HAL_GetTick>
 8004e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e8c:	e008      	b.n	8004ea0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e8e:	f7fe fef7 	bl	8003c80 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e0b5      	b.n	800500c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ea0:	4b2f      	ldr	r3, [pc, #188]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1f0      	bne.n	8004e8e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004eac:	4b2c      	ldr	r3, [pc, #176]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004eae:	68da      	ldr	r2, [r3, #12]
 8004eb0:	4b2d      	ldr	r3, [pc, #180]	; (8004f68 <HAL_RCC_OscConfig+0x580>)
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	6a11      	ldr	r1, [r2, #32]
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ebc:	3a01      	subs	r2, #1
 8004ebe:	0112      	lsls	r2, r2, #4
 8004ec0:	4311      	orrs	r1, r2
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004ec6:	0212      	lsls	r2, r2, #8
 8004ec8:	4311      	orrs	r1, r2
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ece:	0852      	lsrs	r2, r2, #1
 8004ed0:	3a01      	subs	r2, #1
 8004ed2:	0552      	lsls	r2, r2, #21
 8004ed4:	4311      	orrs	r1, r2
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004eda:	0852      	lsrs	r2, r2, #1
 8004edc:	3a01      	subs	r2, #1
 8004ede:	0652      	lsls	r2, r2, #25
 8004ee0:	4311      	orrs	r1, r2
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ee6:	06d2      	lsls	r2, r2, #27
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	491d      	ldr	r1, [pc, #116]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ef0:	4b1b      	ldr	r3, [pc, #108]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a1a      	ldr	r2, [pc, #104]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004efa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004efc:	4b18      	ldr	r3, [pc, #96]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	4a17      	ldr	r2, [pc, #92]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004f02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f06:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f08:	f7fe feba 	bl	8003c80 <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f10:	f7fe feb6 	bl	8003c80 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e074      	b.n	800500c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f22:	4b0f      	ldr	r3, [pc, #60]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d0f0      	beq.n	8004f10 <HAL_RCC_OscConfig+0x528>
 8004f2e:	e06c      	b.n	800500a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f30:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a0a      	ldr	r2, [pc, #40]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004f36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f3a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004f3c:	4b08      	ldr	r3, [pc, #32]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	4a07      	ldr	r2, [pc, #28]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004f42:	f023 0303 	bic.w	r3, r3, #3
 8004f46:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004f48:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	4a04      	ldr	r2, [pc, #16]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004f4e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f56:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f58:	f7fe fe92 	bl	8003c80 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f5e:	e00e      	b.n	8004f7e <HAL_RCC_OscConfig+0x596>
 8004f60:	40021000 	.word	0x40021000
 8004f64:	40007000 	.word	0x40007000
 8004f68:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f6c:	f7fe fe88 	bl	8003c80 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e046      	b.n	800500c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f7e:	4b25      	ldr	r3, [pc, #148]	; (8005014 <HAL_RCC_OscConfig+0x62c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1f0      	bne.n	8004f6c <HAL_RCC_OscConfig+0x584>
 8004f8a:	e03e      	b.n	800500a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	69db      	ldr	r3, [r3, #28]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d101      	bne.n	8004f98 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e039      	b.n	800500c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004f98:	4b1e      	ldr	r3, [pc, #120]	; (8005014 <HAL_RCC_OscConfig+0x62c>)
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f003 0203 	and.w	r2, r3, #3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d12c      	bne.n	8005006 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d123      	bne.n	8005006 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d11b      	bne.n	8005006 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d113      	bne.n	8005006 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe8:	085b      	lsrs	r3, r3, #1
 8004fea:	3b01      	subs	r3, #1
 8004fec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d109      	bne.n	8005006 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ffc:	085b      	lsrs	r3, r3, #1
 8004ffe:	3b01      	subs	r3, #1
 8005000:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005002:	429a      	cmp	r2, r3
 8005004:	d001      	beq.n	800500a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3720      	adds	r7, #32
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	40021000 	.word	0x40021000

08005018 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005022:	2300      	movs	r3, #0
 8005024:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e11e      	b.n	800526e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005030:	4b91      	ldr	r3, [pc, #580]	; (8005278 <HAL_RCC_ClockConfig+0x260>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 030f 	and.w	r3, r3, #15
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	429a      	cmp	r2, r3
 800503c:	d910      	bls.n	8005060 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800503e:	4b8e      	ldr	r3, [pc, #568]	; (8005278 <HAL_RCC_ClockConfig+0x260>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f023 020f 	bic.w	r2, r3, #15
 8005046:	498c      	ldr	r1, [pc, #560]	; (8005278 <HAL_RCC_ClockConfig+0x260>)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	4313      	orrs	r3, r2
 800504c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800504e:	4b8a      	ldr	r3, [pc, #552]	; (8005278 <HAL_RCC_ClockConfig+0x260>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 030f 	and.w	r3, r3, #15
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	429a      	cmp	r2, r3
 800505a:	d001      	beq.n	8005060 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e106      	b.n	800526e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	2b00      	cmp	r3, #0
 800506a:	d073      	beq.n	8005154 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2b03      	cmp	r3, #3
 8005072:	d129      	bne.n	80050c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005074:	4b81      	ldr	r3, [pc, #516]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e0f4      	b.n	800526e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005084:	f000 f99e 	bl	80053c4 <RCC_GetSysClockFreqFromPLLSource>
 8005088:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	4a7c      	ldr	r2, [pc, #496]	; (8005280 <HAL_RCC_ClockConfig+0x268>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d93f      	bls.n	8005112 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005092:	4b7a      	ldr	r3, [pc, #488]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d009      	beq.n	80050b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d033      	beq.n	8005112 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d12f      	bne.n	8005112 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050b2:	4b72      	ldr	r3, [pc, #456]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050ba:	4a70      	ldr	r2, [pc, #448]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 80050bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80050c2:	2380      	movs	r3, #128	; 0x80
 80050c4:	617b      	str	r3, [r7, #20]
 80050c6:	e024      	b.n	8005112 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d107      	bne.n	80050e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050d0:	4b6a      	ldr	r3, [pc, #424]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d109      	bne.n	80050f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e0c6      	b.n	800526e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050e0:	4b66      	ldr	r3, [pc, #408]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e0be      	b.n	800526e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80050f0:	f000 f8ce 	bl	8005290 <HAL_RCC_GetSysClockFreq>
 80050f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	4a61      	ldr	r2, [pc, #388]	; (8005280 <HAL_RCC_ClockConfig+0x268>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d909      	bls.n	8005112 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050fe:	4b5f      	ldr	r3, [pc, #380]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005106:	4a5d      	ldr	r2, [pc, #372]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 8005108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800510c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800510e:	2380      	movs	r3, #128	; 0x80
 8005110:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005112:	4b5a      	ldr	r3, [pc, #360]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f023 0203 	bic.w	r2, r3, #3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	4957      	ldr	r1, [pc, #348]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 8005120:	4313      	orrs	r3, r2
 8005122:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005124:	f7fe fdac 	bl	8003c80 <HAL_GetTick>
 8005128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800512a:	e00a      	b.n	8005142 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800512c:	f7fe fda8 	bl	8003c80 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	f241 3288 	movw	r2, #5000	; 0x1388
 800513a:	4293      	cmp	r3, r2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e095      	b.n	800526e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005142:	4b4e      	ldr	r3, [pc, #312]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f003 020c 	and.w	r2, r3, #12
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	429a      	cmp	r2, r3
 8005152:	d1eb      	bne.n	800512c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d023      	beq.n	80051a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b00      	cmp	r3, #0
 800516a:	d005      	beq.n	8005178 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800516c:	4b43      	ldr	r3, [pc, #268]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	4a42      	ldr	r2, [pc, #264]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 8005172:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005176:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0308 	and.w	r3, r3, #8
 8005180:	2b00      	cmp	r3, #0
 8005182:	d007      	beq.n	8005194 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005184:	4b3d      	ldr	r3, [pc, #244]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800518c:	4a3b      	ldr	r2, [pc, #236]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 800518e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005192:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005194:	4b39      	ldr	r3, [pc, #228]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	4936      	ldr	r1, [pc, #216]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	608b      	str	r3, [r1, #8]
 80051a6:	e008      	b.n	80051ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2b80      	cmp	r3, #128	; 0x80
 80051ac:	d105      	bne.n	80051ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80051ae:	4b33      	ldr	r3, [pc, #204]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	4a32      	ldr	r2, [pc, #200]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 80051b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051ba:	4b2f      	ldr	r3, [pc, #188]	; (8005278 <HAL_RCC_ClockConfig+0x260>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 030f 	and.w	r3, r3, #15
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d21d      	bcs.n	8005204 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051c8:	4b2b      	ldr	r3, [pc, #172]	; (8005278 <HAL_RCC_ClockConfig+0x260>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f023 020f 	bic.w	r2, r3, #15
 80051d0:	4929      	ldr	r1, [pc, #164]	; (8005278 <HAL_RCC_ClockConfig+0x260>)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80051d8:	f7fe fd52 	bl	8003c80 <HAL_GetTick>
 80051dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051de:	e00a      	b.n	80051f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051e0:	f7fe fd4e 	bl	8003c80 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e03b      	b.n	800526e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051f6:	4b20      	ldr	r3, [pc, #128]	; (8005278 <HAL_RCC_ClockConfig+0x260>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 030f 	and.w	r3, r3, #15
 80051fe:	683a      	ldr	r2, [r7, #0]
 8005200:	429a      	cmp	r2, r3
 8005202:	d1ed      	bne.n	80051e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	2b00      	cmp	r3, #0
 800520e:	d008      	beq.n	8005222 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005210:	4b1a      	ldr	r3, [pc, #104]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	4917      	ldr	r1, [pc, #92]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 800521e:	4313      	orrs	r3, r2
 8005220:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0308 	and.w	r3, r3, #8
 800522a:	2b00      	cmp	r3, #0
 800522c:	d009      	beq.n	8005242 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800522e:	4b13      	ldr	r3, [pc, #76]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	490f      	ldr	r1, [pc, #60]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 800523e:	4313      	orrs	r3, r2
 8005240:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005242:	f000 f825 	bl	8005290 <HAL_RCC_GetSysClockFreq>
 8005246:	4602      	mov	r2, r0
 8005248:	4b0c      	ldr	r3, [pc, #48]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	091b      	lsrs	r3, r3, #4
 800524e:	f003 030f 	and.w	r3, r3, #15
 8005252:	490c      	ldr	r1, [pc, #48]	; (8005284 <HAL_RCC_ClockConfig+0x26c>)
 8005254:	5ccb      	ldrb	r3, [r1, r3]
 8005256:	f003 031f 	and.w	r3, r3, #31
 800525a:	fa22 f303 	lsr.w	r3, r2, r3
 800525e:	4a0a      	ldr	r2, [pc, #40]	; (8005288 <HAL_RCC_ClockConfig+0x270>)
 8005260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005262:	4b0a      	ldr	r3, [pc, #40]	; (800528c <HAL_RCC_ClockConfig+0x274>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4618      	mov	r0, r3
 8005268:	f7fe fcbe 	bl	8003be8 <HAL_InitTick>
 800526c:	4603      	mov	r3, r0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3718      	adds	r7, #24
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	40022000 	.word	0x40022000
 800527c:	40021000 	.word	0x40021000
 8005280:	04c4b400 	.word	0x04c4b400
 8005284:	0800fcec 	.word	0x0800fcec
 8005288:	20000030 	.word	0x20000030
 800528c:	20000034 	.word	0x20000034

08005290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005290:	b480      	push	{r7}
 8005292:	b087      	sub	sp, #28
 8005294:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005296:	4b2c      	ldr	r3, [pc, #176]	; (8005348 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f003 030c 	and.w	r3, r3, #12
 800529e:	2b04      	cmp	r3, #4
 80052a0:	d102      	bne.n	80052a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052a2:	4b2a      	ldr	r3, [pc, #168]	; (800534c <HAL_RCC_GetSysClockFreq+0xbc>)
 80052a4:	613b      	str	r3, [r7, #16]
 80052a6:	e047      	b.n	8005338 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80052a8:	4b27      	ldr	r3, [pc, #156]	; (8005348 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f003 030c 	and.w	r3, r3, #12
 80052b0:	2b08      	cmp	r3, #8
 80052b2:	d102      	bne.n	80052ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052b4:	4b26      	ldr	r3, [pc, #152]	; (8005350 <HAL_RCC_GetSysClockFreq+0xc0>)
 80052b6:	613b      	str	r3, [r7, #16]
 80052b8:	e03e      	b.n	8005338 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80052ba:	4b23      	ldr	r3, [pc, #140]	; (8005348 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f003 030c 	and.w	r3, r3, #12
 80052c2:	2b0c      	cmp	r3, #12
 80052c4:	d136      	bne.n	8005334 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052c6:	4b20      	ldr	r3, [pc, #128]	; (8005348 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052d0:	4b1d      	ldr	r3, [pc, #116]	; (8005348 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	091b      	lsrs	r3, r3, #4
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	3301      	adds	r3, #1
 80052dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2b03      	cmp	r3, #3
 80052e2:	d10c      	bne.n	80052fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052e4:	4a1a      	ldr	r2, [pc, #104]	; (8005350 <HAL_RCC_GetSysClockFreq+0xc0>)
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ec:	4a16      	ldr	r2, [pc, #88]	; (8005348 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052ee:	68d2      	ldr	r2, [r2, #12]
 80052f0:	0a12      	lsrs	r2, r2, #8
 80052f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80052f6:	fb02 f303 	mul.w	r3, r2, r3
 80052fa:	617b      	str	r3, [r7, #20]
      break;
 80052fc:	e00c      	b.n	8005318 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052fe:	4a13      	ldr	r2, [pc, #76]	; (800534c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	fbb2 f3f3 	udiv	r3, r2, r3
 8005306:	4a10      	ldr	r2, [pc, #64]	; (8005348 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005308:	68d2      	ldr	r2, [r2, #12]
 800530a:	0a12      	lsrs	r2, r2, #8
 800530c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005310:	fb02 f303 	mul.w	r3, r2, r3
 8005314:	617b      	str	r3, [r7, #20]
      break;
 8005316:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005318:	4b0b      	ldr	r3, [pc, #44]	; (8005348 <HAL_RCC_GetSysClockFreq+0xb8>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	0e5b      	lsrs	r3, r3, #25
 800531e:	f003 0303 	and.w	r3, r3, #3
 8005322:	3301      	adds	r3, #1
 8005324:	005b      	lsls	r3, r3, #1
 8005326:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005330:	613b      	str	r3, [r7, #16]
 8005332:	e001      	b.n	8005338 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005334:	2300      	movs	r3, #0
 8005336:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005338:	693b      	ldr	r3, [r7, #16]
}
 800533a:	4618      	mov	r0, r3
 800533c:	371c      	adds	r7, #28
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	40021000 	.word	0x40021000
 800534c:	00f42400 	.word	0x00f42400
 8005350:	007a1200 	.word	0x007a1200

08005354 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005354:	b480      	push	{r7}
 8005356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005358:	4b03      	ldr	r3, [pc, #12]	; (8005368 <HAL_RCC_GetHCLKFreq+0x14>)
 800535a:	681b      	ldr	r3, [r3, #0]
}
 800535c:	4618      	mov	r0, r3
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	20000030 	.word	0x20000030

0800536c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005370:	f7ff fff0 	bl	8005354 <HAL_RCC_GetHCLKFreq>
 8005374:	4602      	mov	r2, r0
 8005376:	4b06      	ldr	r3, [pc, #24]	; (8005390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	0a1b      	lsrs	r3, r3, #8
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	4904      	ldr	r1, [pc, #16]	; (8005394 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005382:	5ccb      	ldrb	r3, [r1, r3]
 8005384:	f003 031f 	and.w	r3, r3, #31
 8005388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800538c:	4618      	mov	r0, r3
 800538e:	bd80      	pop	{r7, pc}
 8005390:	40021000 	.word	0x40021000
 8005394:	0800fcfc 	.word	0x0800fcfc

08005398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800539c:	f7ff ffda 	bl	8005354 <HAL_RCC_GetHCLKFreq>
 80053a0:	4602      	mov	r2, r0
 80053a2:	4b06      	ldr	r3, [pc, #24]	; (80053bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	0adb      	lsrs	r3, r3, #11
 80053a8:	f003 0307 	and.w	r3, r3, #7
 80053ac:	4904      	ldr	r1, [pc, #16]	; (80053c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053ae:	5ccb      	ldrb	r3, [r1, r3]
 80053b0:	f003 031f 	and.w	r3, r3, #31
 80053b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	40021000 	.word	0x40021000
 80053c0:	0800fcfc 	.word	0x0800fcfc

080053c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053ca:	4b1e      	ldr	r3, [pc, #120]	; (8005444 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f003 0303 	and.w	r3, r3, #3
 80053d2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053d4:	4b1b      	ldr	r3, [pc, #108]	; (8005444 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	091b      	lsrs	r3, r3, #4
 80053da:	f003 030f 	and.w	r3, r3, #15
 80053de:	3301      	adds	r3, #1
 80053e0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	2b03      	cmp	r3, #3
 80053e6:	d10c      	bne.n	8005402 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053e8:	4a17      	ldr	r2, [pc, #92]	; (8005448 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f0:	4a14      	ldr	r2, [pc, #80]	; (8005444 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053f2:	68d2      	ldr	r2, [r2, #12]
 80053f4:	0a12      	lsrs	r2, r2, #8
 80053f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80053fa:	fb02 f303 	mul.w	r3, r2, r3
 80053fe:	617b      	str	r3, [r7, #20]
    break;
 8005400:	e00c      	b.n	800541c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005402:	4a12      	ldr	r2, [pc, #72]	; (800544c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	fbb2 f3f3 	udiv	r3, r2, r3
 800540a:	4a0e      	ldr	r2, [pc, #56]	; (8005444 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800540c:	68d2      	ldr	r2, [r2, #12]
 800540e:	0a12      	lsrs	r2, r2, #8
 8005410:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005414:	fb02 f303 	mul.w	r3, r2, r3
 8005418:	617b      	str	r3, [r7, #20]
    break;
 800541a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800541c:	4b09      	ldr	r3, [pc, #36]	; (8005444 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	0e5b      	lsrs	r3, r3, #25
 8005422:	f003 0303 	and.w	r3, r3, #3
 8005426:	3301      	adds	r3, #1
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	fbb2 f3f3 	udiv	r3, r2, r3
 8005434:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005436:	687b      	ldr	r3, [r7, #4]
}
 8005438:	4618      	mov	r0, r3
 800543a:	371c      	adds	r7, #28
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	40021000 	.word	0x40021000
 8005448:	007a1200 	.word	0x007a1200
 800544c:	00f42400 	.word	0x00f42400

08005450 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005458:	2300      	movs	r3, #0
 800545a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800545c:	2300      	movs	r3, #0
 800545e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 8098 	beq.w	800559e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800546e:	2300      	movs	r3, #0
 8005470:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005472:	4b43      	ldr	r3, [pc, #268]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10d      	bne.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800547e:	4b40      	ldr	r3, [pc, #256]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005482:	4a3f      	ldr	r2, [pc, #252]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005488:	6593      	str	r3, [r2, #88]	; 0x58
 800548a:	4b3d      	ldr	r3, [pc, #244]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800548c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005492:	60bb      	str	r3, [r7, #8]
 8005494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005496:	2301      	movs	r3, #1
 8005498:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800549a:	4b3a      	ldr	r3, [pc, #232]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a39      	ldr	r2, [pc, #228]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80054a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054a6:	f7fe fbeb 	bl	8003c80 <HAL_GetTick>
 80054aa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054ac:	e009      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ae:	f7fe fbe7 	bl	8003c80 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d902      	bls.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	74fb      	strb	r3, [r7, #19]
        break;
 80054c0:	e005      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054c2:	4b30      	ldr	r3, [pc, #192]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d0ef      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80054ce:	7cfb      	ldrb	r3, [r7, #19]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d159      	bne.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054d4:	4b2a      	ldr	r3, [pc, #168]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054de:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d01e      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d019      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054f0:	4b23      	ldr	r3, [pc, #140]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054fc:	4b20      	ldr	r3, [pc, #128]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005502:	4a1f      	ldr	r2, [pc, #124]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800550c:	4b1c      	ldr	r3, [pc, #112]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800550e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005512:	4a1b      	ldr	r2, [pc, #108]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800551c:	4a18      	ldr	r2, [pc, #96]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d016      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800552e:	f7fe fba7 	bl	8003c80 <HAL_GetTick>
 8005532:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005534:	e00b      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005536:	f7fe fba3 	bl	8003c80 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	f241 3288 	movw	r2, #5000	; 0x1388
 8005544:	4293      	cmp	r3, r2
 8005546:	d902      	bls.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	74fb      	strb	r3, [r7, #19]
            break;
 800554c:	e006      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800554e:	4b0c      	ldr	r3, [pc, #48]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005554:	f003 0302 	and.w	r3, r3, #2
 8005558:	2b00      	cmp	r3, #0
 800555a:	d0ec      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800555c:	7cfb      	ldrb	r3, [r7, #19]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10b      	bne.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005562:	4b07      	ldr	r3, [pc, #28]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005568:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005570:	4903      	ldr	r1, [pc, #12]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005572:	4313      	orrs	r3, r2
 8005574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005578:	e008      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800557a:	7cfb      	ldrb	r3, [r7, #19]
 800557c:	74bb      	strb	r3, [r7, #18]
 800557e:	e005      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005580:	40021000 	.word	0x40021000
 8005584:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005588:	7cfb      	ldrb	r3, [r7, #19]
 800558a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800558c:	7c7b      	ldrb	r3, [r7, #17]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d105      	bne.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005592:	4ba6      	ldr	r3, [pc, #664]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005596:	4aa5      	ldr	r2, [pc, #660]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800559c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00a      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055aa:	4ba0      	ldr	r3, [pc, #640]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b0:	f023 0203 	bic.w	r2, r3, #3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	499c      	ldr	r1, [pc, #624]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0302 	and.w	r3, r3, #2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00a      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055cc:	4b97      	ldr	r3, [pc, #604]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d2:	f023 020c 	bic.w	r2, r3, #12
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	4994      	ldr	r1, [pc, #592]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0304 	and.w	r3, r3, #4
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00a      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055ee:	4b8f      	ldr	r3, [pc, #572]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	498b      	ldr	r1, [pc, #556]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0308 	and.w	r3, r3, #8
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00a      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005610:	4b86      	ldr	r3, [pc, #536]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005616:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	4983      	ldr	r1, [pc, #524]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005620:	4313      	orrs	r3, r2
 8005622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0320 	and.w	r3, r3, #32
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00a      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005632:	4b7e      	ldr	r3, [pc, #504]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005638:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	497a      	ldr	r1, [pc, #488]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005642:	4313      	orrs	r3, r2
 8005644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00a      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005654:	4b75      	ldr	r3, [pc, #468]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	4972      	ldr	r1, [pc, #456]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005664:	4313      	orrs	r3, r2
 8005666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005676:	4b6d      	ldr	r3, [pc, #436]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800567c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	69db      	ldr	r3, [r3, #28]
 8005684:	4969      	ldr	r1, [pc, #420]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005686:	4313      	orrs	r3, r2
 8005688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00a      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005698:	4b64      	ldr	r3, [pc, #400]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800569a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800569e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	4961      	ldr	r1, [pc, #388]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00a      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056ba:	4b5c      	ldr	r3, [pc, #368]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	4958      	ldr	r1, [pc, #352]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d015      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056dc:	4b53      	ldr	r3, [pc, #332]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ea:	4950      	ldr	r1, [pc, #320]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056fa:	d105      	bne.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056fc:	4b4b      	ldr	r3, [pc, #300]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	4a4a      	ldr	r2, [pc, #296]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005706:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005710:	2b00      	cmp	r3, #0
 8005712:	d015      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005714:	4b45      	ldr	r3, [pc, #276]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800571a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005722:	4942      	ldr	r1, [pc, #264]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005724:	4313      	orrs	r3, r2
 8005726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005732:	d105      	bne.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005734:	4b3d      	ldr	r3, [pc, #244]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	4a3c      	ldr	r2, [pc, #240]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800573a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800573e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d015      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800574c:	4b37      	ldr	r3, [pc, #220]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800574e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005752:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575a:	4934      	ldr	r1, [pc, #208]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800575c:	4313      	orrs	r3, r2
 800575e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005766:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800576a:	d105      	bne.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800576c:	4b2f      	ldr	r3, [pc, #188]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	4a2e      	ldr	r2, [pc, #184]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005772:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005776:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d015      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005784:	4b29      	ldr	r3, [pc, #164]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800578a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005792:	4926      	ldr	r1, [pc, #152]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005794:	4313      	orrs	r3, r2
 8005796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057a2:	d105      	bne.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057a4:	4b21      	ldr	r3, [pc, #132]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	4a20      	ldr	r2, [pc, #128]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057ae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d015      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057bc:	4b1b      	ldr	r3, [pc, #108]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ca:	4918      	ldr	r1, [pc, #96]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057da:	d105      	bne.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057dc:	4b13      	ldr	r3, [pc, #76]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	4a12      	ldr	r2, [pc, #72]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057e6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d015      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80057f4:	4b0d      	ldr	r3, [pc, #52]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005802:	490a      	ldr	r1, [pc, #40]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005804:	4313      	orrs	r3, r2
 8005806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800580e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005812:	d105      	bne.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005814:	4b05      	ldr	r3, [pc, #20]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	4a04      	ldr	r2, [pc, #16]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800581a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800581e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005820:	7cbb      	ldrb	r3, [r7, #18]
}
 8005822:	4618      	mov	r0, r3
 8005824:	3718      	adds	r7, #24
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	40021000 	.word	0x40021000

08005830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e049      	b.n	80058d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d106      	bne.n	800585c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7fd fec2 	bl	80035e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2202      	movs	r2, #2
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	3304      	adds	r3, #4
 800586c:	4619      	mov	r1, r3
 800586e:	4610      	mov	r0, r2
 8005870:	f000 fefe 	bl	8006670 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
	...

080058e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d001      	beq.n	80058f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e042      	b.n	800597e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a21      	ldr	r2, [pc, #132]	; (800598c <HAL_TIM_Base_Start+0xac>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d018      	beq.n	800593c <HAL_TIM_Base_Start+0x5c>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005912:	d013      	beq.n	800593c <HAL_TIM_Base_Start+0x5c>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a1d      	ldr	r2, [pc, #116]	; (8005990 <HAL_TIM_Base_Start+0xb0>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d00e      	beq.n	800593c <HAL_TIM_Base_Start+0x5c>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a1c      	ldr	r2, [pc, #112]	; (8005994 <HAL_TIM_Base_Start+0xb4>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d009      	beq.n	800593c <HAL_TIM_Base_Start+0x5c>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a1a      	ldr	r2, [pc, #104]	; (8005998 <HAL_TIM_Base_Start+0xb8>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d004      	beq.n	800593c <HAL_TIM_Base_Start+0x5c>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a19      	ldr	r2, [pc, #100]	; (800599c <HAL_TIM_Base_Start+0xbc>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d115      	bne.n	8005968 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689a      	ldr	r2, [r3, #8]
 8005942:	4b17      	ldr	r3, [pc, #92]	; (80059a0 <HAL_TIM_Base_Start+0xc0>)
 8005944:	4013      	ands	r3, r2
 8005946:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2b06      	cmp	r3, #6
 800594c:	d015      	beq.n	800597a <HAL_TIM_Base_Start+0x9a>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005954:	d011      	beq.n	800597a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f042 0201 	orr.w	r2, r2, #1
 8005964:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005966:	e008      	b.n	800597a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f042 0201 	orr.w	r2, r2, #1
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	e000      	b.n	800597c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800597a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	40012c00 	.word	0x40012c00
 8005990:	40000400 	.word	0x40000400
 8005994:	40000800 	.word	0x40000800
 8005998:	40013400 	.word	0x40013400
 800599c:	40014000 	.word	0x40014000
 80059a0:	00010007 	.word	0x00010007

080059a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d001      	beq.n	80059bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e04a      	b.n	8005a52 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2202      	movs	r2, #2
 80059c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0201 	orr.w	r2, r2, #1
 80059d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a21      	ldr	r2, [pc, #132]	; (8005a60 <HAL_TIM_Base_Start_IT+0xbc>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d018      	beq.n	8005a10 <HAL_TIM_Base_Start_IT+0x6c>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059e6:	d013      	beq.n	8005a10 <HAL_TIM_Base_Start_IT+0x6c>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a1d      	ldr	r2, [pc, #116]	; (8005a64 <HAL_TIM_Base_Start_IT+0xc0>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d00e      	beq.n	8005a10 <HAL_TIM_Base_Start_IT+0x6c>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a1c      	ldr	r2, [pc, #112]	; (8005a68 <HAL_TIM_Base_Start_IT+0xc4>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d009      	beq.n	8005a10 <HAL_TIM_Base_Start_IT+0x6c>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a1a      	ldr	r2, [pc, #104]	; (8005a6c <HAL_TIM_Base_Start_IT+0xc8>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d004      	beq.n	8005a10 <HAL_TIM_Base_Start_IT+0x6c>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a19      	ldr	r2, [pc, #100]	; (8005a70 <HAL_TIM_Base_Start_IT+0xcc>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d115      	bne.n	8005a3c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689a      	ldr	r2, [r3, #8]
 8005a16:	4b17      	ldr	r3, [pc, #92]	; (8005a74 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a18:	4013      	ands	r3, r2
 8005a1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2b06      	cmp	r3, #6
 8005a20:	d015      	beq.n	8005a4e <HAL_TIM_Base_Start_IT+0xaa>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a28:	d011      	beq.n	8005a4e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f042 0201 	orr.w	r2, r2, #1
 8005a38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a3a:	e008      	b.n	8005a4e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f042 0201 	orr.w	r2, r2, #1
 8005a4a:	601a      	str	r2, [r3, #0]
 8005a4c:	e000      	b.n	8005a50 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	40012c00 	.word	0x40012c00
 8005a64:	40000400 	.word	0x40000400
 8005a68:	40000800 	.word	0x40000800
 8005a6c:	40013400 	.word	0x40013400
 8005a70:	40014000 	.word	0x40014000
 8005a74:	00010007 	.word	0x00010007

08005a78 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e049      	b.n	8005b1e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d106      	bne.n	8005aa4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f841 	bl	8005b26 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	3304      	adds	r3, #4
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	4610      	mov	r0, r2
 8005ab8:	f000 fdda 	bl	8006670 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3708      	adds	r7, #8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b083      	sub	sp, #12
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005b2e:	bf00      	nop
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b082      	sub	sp, #8
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d101      	bne.n	8005b4c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e049      	b.n	8005be0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d106      	bne.n	8005b66 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f841 	bl	8005be8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2202      	movs	r2, #2
 8005b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	3304      	adds	r3, #4
 8005b76:	4619      	mov	r1, r3
 8005b78:	4610      	mov	r0, r2
 8005b7a:	f000 fd79 	bl	8006670 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d109      	bne.n	8005c20 <HAL_TIM_PWM_Start+0x24>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	bf14      	ite	ne
 8005c18:	2301      	movne	r3, #1
 8005c1a:	2300      	moveq	r3, #0
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	e03c      	b.n	8005c9a <HAL_TIM_PWM_Start+0x9e>
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	2b04      	cmp	r3, #4
 8005c24:	d109      	bne.n	8005c3a <HAL_TIM_PWM_Start+0x3e>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	bf14      	ite	ne
 8005c32:	2301      	movne	r3, #1
 8005c34:	2300      	moveq	r3, #0
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	e02f      	b.n	8005c9a <HAL_TIM_PWM_Start+0x9e>
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2b08      	cmp	r3, #8
 8005c3e:	d109      	bne.n	8005c54 <HAL_TIM_PWM_Start+0x58>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	bf14      	ite	ne
 8005c4c:	2301      	movne	r3, #1
 8005c4e:	2300      	moveq	r3, #0
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	e022      	b.n	8005c9a <HAL_TIM_PWM_Start+0x9e>
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	2b0c      	cmp	r3, #12
 8005c58:	d109      	bne.n	8005c6e <HAL_TIM_PWM_Start+0x72>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	bf14      	ite	ne
 8005c66:	2301      	movne	r3, #1
 8005c68:	2300      	moveq	r3, #0
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	e015      	b.n	8005c9a <HAL_TIM_PWM_Start+0x9e>
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b10      	cmp	r3, #16
 8005c72:	d109      	bne.n	8005c88 <HAL_TIM_PWM_Start+0x8c>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	bf14      	ite	ne
 8005c80:	2301      	movne	r3, #1
 8005c82:	2300      	moveq	r3, #0
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	e008      	b.n	8005c9a <HAL_TIM_PWM_Start+0x9e>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	bf14      	ite	ne
 8005c94:	2301      	movne	r3, #1
 8005c96:	2300      	moveq	r3, #0
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e097      	b.n	8005dd2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d104      	bne.n	8005cb2 <HAL_TIM_PWM_Start+0xb6>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2202      	movs	r2, #2
 8005cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cb0:	e023      	b.n	8005cfa <HAL_TIM_PWM_Start+0xfe>
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	2b04      	cmp	r3, #4
 8005cb6:	d104      	bne.n	8005cc2 <HAL_TIM_PWM_Start+0xc6>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2202      	movs	r2, #2
 8005cbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cc0:	e01b      	b.n	8005cfa <HAL_TIM_PWM_Start+0xfe>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2b08      	cmp	r3, #8
 8005cc6:	d104      	bne.n	8005cd2 <HAL_TIM_PWM_Start+0xd6>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2202      	movs	r2, #2
 8005ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cd0:	e013      	b.n	8005cfa <HAL_TIM_PWM_Start+0xfe>
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	2b0c      	cmp	r3, #12
 8005cd6:	d104      	bne.n	8005ce2 <HAL_TIM_PWM_Start+0xe6>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ce0:	e00b      	b.n	8005cfa <HAL_TIM_PWM_Start+0xfe>
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	2b10      	cmp	r3, #16
 8005ce6:	d104      	bne.n	8005cf2 <HAL_TIM_PWM_Start+0xf6>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2202      	movs	r2, #2
 8005cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cf0:	e003      	b.n	8005cfa <HAL_TIM_PWM_Start+0xfe>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2202      	movs	r2, #2
 8005cf6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	6839      	ldr	r1, [r7, #0]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f001 f8d6 	bl	8006eb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a33      	ldr	r2, [pc, #204]	; (8005ddc <HAL_TIM_PWM_Start+0x1e0>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d013      	beq.n	8005d3a <HAL_TIM_PWM_Start+0x13e>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a32      	ldr	r2, [pc, #200]	; (8005de0 <HAL_TIM_PWM_Start+0x1e4>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d00e      	beq.n	8005d3a <HAL_TIM_PWM_Start+0x13e>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a30      	ldr	r2, [pc, #192]	; (8005de4 <HAL_TIM_PWM_Start+0x1e8>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d009      	beq.n	8005d3a <HAL_TIM_PWM_Start+0x13e>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a2f      	ldr	r2, [pc, #188]	; (8005de8 <HAL_TIM_PWM_Start+0x1ec>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d004      	beq.n	8005d3a <HAL_TIM_PWM_Start+0x13e>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a2d      	ldr	r2, [pc, #180]	; (8005dec <HAL_TIM_PWM_Start+0x1f0>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d101      	bne.n	8005d3e <HAL_TIM_PWM_Start+0x142>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e000      	b.n	8005d40 <HAL_TIM_PWM_Start+0x144>
 8005d3e:	2300      	movs	r3, #0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d007      	beq.n	8005d54 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d52:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a20      	ldr	r2, [pc, #128]	; (8005ddc <HAL_TIM_PWM_Start+0x1e0>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d018      	beq.n	8005d90 <HAL_TIM_PWM_Start+0x194>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d66:	d013      	beq.n	8005d90 <HAL_TIM_PWM_Start+0x194>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a20      	ldr	r2, [pc, #128]	; (8005df0 <HAL_TIM_PWM_Start+0x1f4>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d00e      	beq.n	8005d90 <HAL_TIM_PWM_Start+0x194>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a1f      	ldr	r2, [pc, #124]	; (8005df4 <HAL_TIM_PWM_Start+0x1f8>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d009      	beq.n	8005d90 <HAL_TIM_PWM_Start+0x194>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a17      	ldr	r2, [pc, #92]	; (8005de0 <HAL_TIM_PWM_Start+0x1e4>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d004      	beq.n	8005d90 <HAL_TIM_PWM_Start+0x194>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a16      	ldr	r2, [pc, #88]	; (8005de4 <HAL_TIM_PWM_Start+0x1e8>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d115      	bne.n	8005dbc <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689a      	ldr	r2, [r3, #8]
 8005d96:	4b18      	ldr	r3, [pc, #96]	; (8005df8 <HAL_TIM_PWM_Start+0x1fc>)
 8005d98:	4013      	ands	r3, r2
 8005d9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2b06      	cmp	r3, #6
 8005da0:	d015      	beq.n	8005dce <HAL_TIM_PWM_Start+0x1d2>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005da8:	d011      	beq.n	8005dce <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f042 0201 	orr.w	r2, r2, #1
 8005db8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dba:	e008      	b.n	8005dce <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f042 0201 	orr.w	r2, r2, #1
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	e000      	b.n	8005dd0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	40012c00 	.word	0x40012c00
 8005de0:	40013400 	.word	0x40013400
 8005de4:	40014000 	.word	0x40014000
 8005de8:	40014400 	.word	0x40014400
 8005dec:	40014800 	.word	0x40014800
 8005df0:	40000400 	.word	0x40000400
 8005df4:	40000800 	.word	0x40000800
 8005df8:	00010007 	.word	0x00010007

08005dfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d122      	bne.n	8005e58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f003 0302 	and.w	r3, r3, #2
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d11b      	bne.n	8005e58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f06f 0202 	mvn.w	r2, #2
 8005e28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	f003 0303 	and.w	r3, r3, #3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 fbf8 	bl	8006634 <HAL_TIM_IC_CaptureCallback>
 8005e44:	e005      	b.n	8005e52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fbea 	bl	8006620 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 fbfb 	bl	8006648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	f003 0304 	and.w	r3, r3, #4
 8005e62:	2b04      	cmp	r3, #4
 8005e64:	d122      	bne.n	8005eac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	2b04      	cmp	r3, #4
 8005e72:	d11b      	bne.n	8005eac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f06f 0204 	mvn.w	r2, #4
 8005e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2202      	movs	r2, #2
 8005e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fbce 	bl	8006634 <HAL_TIM_IC_CaptureCallback>
 8005e98:	e005      	b.n	8005ea6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 fbc0 	bl	8006620 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 fbd1 	bl	8006648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	f003 0308 	and.w	r3, r3, #8
 8005eb6:	2b08      	cmp	r3, #8
 8005eb8:	d122      	bne.n	8005f00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	f003 0308 	and.w	r3, r3, #8
 8005ec4:	2b08      	cmp	r3, #8
 8005ec6:	d11b      	bne.n	8005f00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f06f 0208 	mvn.w	r2, #8
 8005ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2204      	movs	r2, #4
 8005ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	f003 0303 	and.w	r3, r3, #3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 fba4 	bl	8006634 <HAL_TIM_IC_CaptureCallback>
 8005eec:	e005      	b.n	8005efa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 fb96 	bl	8006620 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 fba7 	bl	8006648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	f003 0310 	and.w	r3, r3, #16
 8005f0a:	2b10      	cmp	r3, #16
 8005f0c:	d122      	bne.n	8005f54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f003 0310 	and.w	r3, r3, #16
 8005f18:	2b10      	cmp	r3, #16
 8005f1a:	d11b      	bne.n	8005f54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f06f 0210 	mvn.w	r2, #16
 8005f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2208      	movs	r2, #8
 8005f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	69db      	ldr	r3, [r3, #28]
 8005f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 fb7a 	bl	8006634 <HAL_TIM_IC_CaptureCallback>
 8005f40:	e005      	b.n	8005f4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fb6c 	bl	8006620 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 fb7d 	bl	8006648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d10e      	bne.n	8005f80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d107      	bne.n	8005f80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f06f 0201 	mvn.w	r2, #1
 8005f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 fb46 	bl	800660c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f8a:	2b80      	cmp	r3, #128	; 0x80
 8005f8c:	d10e      	bne.n	8005fac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f98:	2b80      	cmp	r3, #128	; 0x80
 8005f9a:	d107      	bne.n	8005fac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f001 f836 	bl	8007018 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fba:	d10e      	bne.n	8005fda <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc6:	2b80      	cmp	r3, #128	; 0x80
 8005fc8:	d107      	bne.n	8005fda <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f001 f829 	bl	800702c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe4:	2b40      	cmp	r3, #64	; 0x40
 8005fe6:	d10e      	bne.n	8006006 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff2:	2b40      	cmp	r3, #64	; 0x40
 8005ff4:	d107      	bne.n	8006006 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 fb2b 	bl	800665c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	f003 0320 	and.w	r3, r3, #32
 8006010:	2b20      	cmp	r3, #32
 8006012:	d10e      	bne.n	8006032 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	f003 0320 	and.w	r3, r3, #32
 800601e:	2b20      	cmp	r3, #32
 8006020:	d107      	bne.n	8006032 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f06f 0220 	mvn.w	r2, #32
 800602a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 ffe9 	bl	8007004 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800603c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006040:	d10f      	bne.n	8006062 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800604c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006050:	d107      	bne.n	8006062 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800605a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 ffef 	bl	8007040 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800606c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006070:	d10f      	bne.n	8006092 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800607c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006080:	d107      	bne.n	8006092 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800608a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 ffe1 	bl	8007054 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800609c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060a0:	d10f      	bne.n	80060c2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060b0:	d107      	bne.n	80060c2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80060ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 ffd3 	bl	8007068 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060d0:	d10f      	bne.n	80060f2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060e0:	d107      	bne.n	80060f2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80060ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 ffc5 	bl	800707c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060f2:	bf00      	nop
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
	...

080060fc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006112:	2b01      	cmp	r3, #1
 8006114:	d101      	bne.n	800611a <HAL_TIM_OC_ConfigChannel+0x1e>
 8006116:	2302      	movs	r3, #2
 8006118:	e066      	b.n	80061e8 <HAL_TIM_OC_ConfigChannel+0xec>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2b14      	cmp	r3, #20
 8006126:	d857      	bhi.n	80061d8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006128:	a201      	add	r2, pc, #4	; (adr r2, 8006130 <HAL_TIM_OC_ConfigChannel+0x34>)
 800612a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612e:	bf00      	nop
 8006130:	08006185 	.word	0x08006185
 8006134:	080061d9 	.word	0x080061d9
 8006138:	080061d9 	.word	0x080061d9
 800613c:	080061d9 	.word	0x080061d9
 8006140:	08006193 	.word	0x08006193
 8006144:	080061d9 	.word	0x080061d9
 8006148:	080061d9 	.word	0x080061d9
 800614c:	080061d9 	.word	0x080061d9
 8006150:	080061a1 	.word	0x080061a1
 8006154:	080061d9 	.word	0x080061d9
 8006158:	080061d9 	.word	0x080061d9
 800615c:	080061d9 	.word	0x080061d9
 8006160:	080061af 	.word	0x080061af
 8006164:	080061d9 	.word	0x080061d9
 8006168:	080061d9 	.word	0x080061d9
 800616c:	080061d9 	.word	0x080061d9
 8006170:	080061bd 	.word	0x080061bd
 8006174:	080061d9 	.word	0x080061d9
 8006178:	080061d9 	.word	0x080061d9
 800617c:	080061d9 	.word	0x080061d9
 8006180:	080061cb 	.word	0x080061cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68b9      	ldr	r1, [r7, #8]
 800618a:	4618      	mov	r0, r3
 800618c:	f000 fb00 	bl	8006790 <TIM_OC1_SetConfig>
      break;
 8006190:	e025      	b.n	80061de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68b9      	ldr	r1, [r7, #8]
 8006198:	4618      	mov	r0, r3
 800619a:	f000 fb89 	bl	80068b0 <TIM_OC2_SetConfig>
      break;
 800619e:	e01e      	b.n	80061de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68b9      	ldr	r1, [r7, #8]
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 fc0c 	bl	80069c4 <TIM_OC3_SetConfig>
      break;
 80061ac:	e017      	b.n	80061de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68b9      	ldr	r1, [r7, #8]
 80061b4:	4618      	mov	r0, r3
 80061b6:	f000 fc8d 	bl	8006ad4 <TIM_OC4_SetConfig>
      break;
 80061ba:	e010      	b.n	80061de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68b9      	ldr	r1, [r7, #8]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 fd10 	bl	8006be8 <TIM_OC5_SetConfig>
      break;
 80061c8:	e009      	b.n	80061de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68b9      	ldr	r1, [r7, #8]
 80061d0:	4618      	mov	r0, r3
 80061d2:	f000 fd6d 	bl	8006cb0 <TIM_OC6_SetConfig>
      break;
 80061d6:	e002      	b.n	80061de <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	75fb      	strb	r3, [r7, #23]
      break;
 80061dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3718      	adds	r7, #24
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061fc:	2300      	movs	r3, #0
 80061fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006206:	2b01      	cmp	r3, #1
 8006208:	d101      	bne.n	800620e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800620a:	2302      	movs	r3, #2
 800620c:	e0ff      	b.n	800640e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2201      	movs	r2, #1
 8006212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2b14      	cmp	r3, #20
 800621a:	f200 80f0 	bhi.w	80063fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800621e:	a201      	add	r2, pc, #4	; (adr r2, 8006224 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006224:	08006279 	.word	0x08006279
 8006228:	080063ff 	.word	0x080063ff
 800622c:	080063ff 	.word	0x080063ff
 8006230:	080063ff 	.word	0x080063ff
 8006234:	080062b9 	.word	0x080062b9
 8006238:	080063ff 	.word	0x080063ff
 800623c:	080063ff 	.word	0x080063ff
 8006240:	080063ff 	.word	0x080063ff
 8006244:	080062fb 	.word	0x080062fb
 8006248:	080063ff 	.word	0x080063ff
 800624c:	080063ff 	.word	0x080063ff
 8006250:	080063ff 	.word	0x080063ff
 8006254:	0800633b 	.word	0x0800633b
 8006258:	080063ff 	.word	0x080063ff
 800625c:	080063ff 	.word	0x080063ff
 8006260:	080063ff 	.word	0x080063ff
 8006264:	0800637d 	.word	0x0800637d
 8006268:	080063ff 	.word	0x080063ff
 800626c:	080063ff 	.word	0x080063ff
 8006270:	080063ff 	.word	0x080063ff
 8006274:	080063bd 	.word	0x080063bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68b9      	ldr	r1, [r7, #8]
 800627e:	4618      	mov	r0, r3
 8006280:	f000 fa86 	bl	8006790 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	699a      	ldr	r2, [r3, #24]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f042 0208 	orr.w	r2, r2, #8
 8006292:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	699a      	ldr	r2, [r3, #24]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f022 0204 	bic.w	r2, r2, #4
 80062a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6999      	ldr	r1, [r3, #24]
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	691a      	ldr	r2, [r3, #16]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	619a      	str	r2, [r3, #24]
      break;
 80062b6:	e0a5      	b.n	8006404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68b9      	ldr	r1, [r7, #8]
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 faf6 	bl	80068b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	699a      	ldr	r2, [r3, #24]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	699a      	ldr	r2, [r3, #24]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6999      	ldr	r1, [r3, #24]
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	021a      	lsls	r2, r3, #8
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	430a      	orrs	r2, r1
 80062f6:	619a      	str	r2, [r3, #24]
      break;
 80062f8:	e084      	b.n	8006404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68b9      	ldr	r1, [r7, #8]
 8006300:	4618      	mov	r0, r3
 8006302:	f000 fb5f 	bl	80069c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	69da      	ldr	r2, [r3, #28]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f042 0208 	orr.w	r2, r2, #8
 8006314:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	69da      	ldr	r2, [r3, #28]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f022 0204 	bic.w	r2, r2, #4
 8006324:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	69d9      	ldr	r1, [r3, #28]
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	691a      	ldr	r2, [r3, #16]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	430a      	orrs	r2, r1
 8006336:	61da      	str	r2, [r3, #28]
      break;
 8006338:	e064      	b.n	8006404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68b9      	ldr	r1, [r7, #8]
 8006340:	4618      	mov	r0, r3
 8006342:	f000 fbc7 	bl	8006ad4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	69da      	ldr	r2, [r3, #28]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006354:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	69da      	ldr	r2, [r3, #28]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006364:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	69d9      	ldr	r1, [r3, #28]
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	021a      	lsls	r2, r3, #8
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	430a      	orrs	r2, r1
 8006378:	61da      	str	r2, [r3, #28]
      break;
 800637a:	e043      	b.n	8006404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68b9      	ldr	r1, [r7, #8]
 8006382:	4618      	mov	r0, r3
 8006384:	f000 fc30 	bl	8006be8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f042 0208 	orr.w	r2, r2, #8
 8006396:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f022 0204 	bic.w	r2, r2, #4
 80063a6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	691a      	ldr	r2, [r3, #16]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	430a      	orrs	r2, r1
 80063b8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80063ba:	e023      	b.n	8006404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68b9      	ldr	r1, [r7, #8]
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 fc74 	bl	8006cb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063e6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	021a      	lsls	r2, r3, #8
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	430a      	orrs	r2, r1
 80063fa:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80063fc:	e002      	b.n	8006404 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	75fb      	strb	r3, [r7, #23]
      break;
 8006402:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800640c:	7dfb      	ldrb	r3, [r7, #23]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3718      	adds	r7, #24
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop

08006418 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006422:	2300      	movs	r3, #0
 8006424:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800642c:	2b01      	cmp	r3, #1
 800642e:	d101      	bne.n	8006434 <HAL_TIM_ConfigClockSource+0x1c>
 8006430:	2302      	movs	r3, #2
 8006432:	e0de      	b.n	80065f2 <HAL_TIM_ConfigClockSource+0x1da>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2202      	movs	r2, #2
 8006440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006452:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006456:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800645e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a63      	ldr	r2, [pc, #396]	; (80065fc <HAL_TIM_ConfigClockSource+0x1e4>)
 800646e:	4293      	cmp	r3, r2
 8006470:	f000 80a9 	beq.w	80065c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006474:	4a61      	ldr	r2, [pc, #388]	; (80065fc <HAL_TIM_ConfigClockSource+0x1e4>)
 8006476:	4293      	cmp	r3, r2
 8006478:	f200 80ae 	bhi.w	80065d8 <HAL_TIM_ConfigClockSource+0x1c0>
 800647c:	4a60      	ldr	r2, [pc, #384]	; (8006600 <HAL_TIM_ConfigClockSource+0x1e8>)
 800647e:	4293      	cmp	r3, r2
 8006480:	f000 80a1 	beq.w	80065c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006484:	4a5e      	ldr	r2, [pc, #376]	; (8006600 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006486:	4293      	cmp	r3, r2
 8006488:	f200 80a6 	bhi.w	80065d8 <HAL_TIM_ConfigClockSource+0x1c0>
 800648c:	4a5d      	ldr	r2, [pc, #372]	; (8006604 <HAL_TIM_ConfigClockSource+0x1ec>)
 800648e:	4293      	cmp	r3, r2
 8006490:	f000 8099 	beq.w	80065c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006494:	4a5b      	ldr	r2, [pc, #364]	; (8006604 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006496:	4293      	cmp	r3, r2
 8006498:	f200 809e 	bhi.w	80065d8 <HAL_TIM_ConfigClockSource+0x1c0>
 800649c:	4a5a      	ldr	r2, [pc, #360]	; (8006608 <HAL_TIM_ConfigClockSource+0x1f0>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	f000 8091 	beq.w	80065c6 <HAL_TIM_ConfigClockSource+0x1ae>
 80064a4:	4a58      	ldr	r2, [pc, #352]	; (8006608 <HAL_TIM_ConfigClockSource+0x1f0>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	f200 8096 	bhi.w	80065d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80064ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80064b0:	f000 8089 	beq.w	80065c6 <HAL_TIM_ConfigClockSource+0x1ae>
 80064b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80064b8:	f200 808e 	bhi.w	80065d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80064bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064c0:	d03e      	beq.n	8006540 <HAL_TIM_ConfigClockSource+0x128>
 80064c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064c6:	f200 8087 	bhi.w	80065d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80064ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ce:	f000 8086 	beq.w	80065de <HAL_TIM_ConfigClockSource+0x1c6>
 80064d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d6:	d87f      	bhi.n	80065d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80064d8:	2b70      	cmp	r3, #112	; 0x70
 80064da:	d01a      	beq.n	8006512 <HAL_TIM_ConfigClockSource+0xfa>
 80064dc:	2b70      	cmp	r3, #112	; 0x70
 80064de:	d87b      	bhi.n	80065d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80064e0:	2b60      	cmp	r3, #96	; 0x60
 80064e2:	d050      	beq.n	8006586 <HAL_TIM_ConfigClockSource+0x16e>
 80064e4:	2b60      	cmp	r3, #96	; 0x60
 80064e6:	d877      	bhi.n	80065d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80064e8:	2b50      	cmp	r3, #80	; 0x50
 80064ea:	d03c      	beq.n	8006566 <HAL_TIM_ConfigClockSource+0x14e>
 80064ec:	2b50      	cmp	r3, #80	; 0x50
 80064ee:	d873      	bhi.n	80065d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80064f0:	2b40      	cmp	r3, #64	; 0x40
 80064f2:	d058      	beq.n	80065a6 <HAL_TIM_ConfigClockSource+0x18e>
 80064f4:	2b40      	cmp	r3, #64	; 0x40
 80064f6:	d86f      	bhi.n	80065d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80064f8:	2b30      	cmp	r3, #48	; 0x30
 80064fa:	d064      	beq.n	80065c6 <HAL_TIM_ConfigClockSource+0x1ae>
 80064fc:	2b30      	cmp	r3, #48	; 0x30
 80064fe:	d86b      	bhi.n	80065d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006500:	2b20      	cmp	r3, #32
 8006502:	d060      	beq.n	80065c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006504:	2b20      	cmp	r3, #32
 8006506:	d867      	bhi.n	80065d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006508:	2b00      	cmp	r3, #0
 800650a:	d05c      	beq.n	80065c6 <HAL_TIM_ConfigClockSource+0x1ae>
 800650c:	2b10      	cmp	r3, #16
 800650e:	d05a      	beq.n	80065c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006510:	e062      	b.n	80065d8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6818      	ldr	r0, [r3, #0]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	6899      	ldr	r1, [r3, #8]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	f000 fca7 	bl	8006e74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006534:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	609a      	str	r2, [r3, #8]
      break;
 800653e:	e04f      	b.n	80065e0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6818      	ldr	r0, [r3, #0]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	6899      	ldr	r1, [r3, #8]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	f000 fc90 	bl	8006e74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689a      	ldr	r2, [r3, #8]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006562:	609a      	str	r2, [r3, #8]
      break;
 8006564:	e03c      	b.n	80065e0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6818      	ldr	r0, [r3, #0]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	6859      	ldr	r1, [r3, #4]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	461a      	mov	r2, r3
 8006574:	f000 fc02 	bl	8006d7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2150      	movs	r1, #80	; 0x50
 800657e:	4618      	mov	r0, r3
 8006580:	f000 fc5b 	bl	8006e3a <TIM_ITRx_SetConfig>
      break;
 8006584:	e02c      	b.n	80065e0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6818      	ldr	r0, [r3, #0]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	6859      	ldr	r1, [r3, #4]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	461a      	mov	r2, r3
 8006594:	f000 fc21 	bl	8006dda <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2160      	movs	r1, #96	; 0x60
 800659e:	4618      	mov	r0, r3
 80065a0:	f000 fc4b 	bl	8006e3a <TIM_ITRx_SetConfig>
      break;
 80065a4:	e01c      	b.n	80065e0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6818      	ldr	r0, [r3, #0]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	6859      	ldr	r1, [r3, #4]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	461a      	mov	r2, r3
 80065b4:	f000 fbe2 	bl	8006d7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2140      	movs	r1, #64	; 0x40
 80065be:	4618      	mov	r0, r3
 80065c0:	f000 fc3b 	bl	8006e3a <TIM_ITRx_SetConfig>
      break;
 80065c4:	e00c      	b.n	80065e0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4619      	mov	r1, r3
 80065d0:	4610      	mov	r0, r2
 80065d2:	f000 fc32 	bl	8006e3a <TIM_ITRx_SetConfig>
      break;
 80065d6:	e003      	b.n	80065e0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	73fb      	strb	r3, [r7, #15]
      break;
 80065dc:	e000      	b.n	80065e0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80065de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	00100070 	.word	0x00100070
 8006600:	00100040 	.word	0x00100040
 8006604:	00100030 	.word	0x00100030
 8006608:	00100020 	.word	0x00100020

0800660c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006614:	bf00      	nop
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a3c      	ldr	r2, [pc, #240]	; (8006774 <TIM_Base_SetConfig+0x104>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d00f      	beq.n	80066a8 <TIM_Base_SetConfig+0x38>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800668e:	d00b      	beq.n	80066a8 <TIM_Base_SetConfig+0x38>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a39      	ldr	r2, [pc, #228]	; (8006778 <TIM_Base_SetConfig+0x108>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d007      	beq.n	80066a8 <TIM_Base_SetConfig+0x38>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a38      	ldr	r2, [pc, #224]	; (800677c <TIM_Base_SetConfig+0x10c>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d003      	beq.n	80066a8 <TIM_Base_SetConfig+0x38>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a37      	ldr	r2, [pc, #220]	; (8006780 <TIM_Base_SetConfig+0x110>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d108      	bne.n	80066ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a2d      	ldr	r2, [pc, #180]	; (8006774 <TIM_Base_SetConfig+0x104>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d01b      	beq.n	80066fa <TIM_Base_SetConfig+0x8a>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066c8:	d017      	beq.n	80066fa <TIM_Base_SetConfig+0x8a>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a2a      	ldr	r2, [pc, #168]	; (8006778 <TIM_Base_SetConfig+0x108>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d013      	beq.n	80066fa <TIM_Base_SetConfig+0x8a>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a29      	ldr	r2, [pc, #164]	; (800677c <TIM_Base_SetConfig+0x10c>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d00f      	beq.n	80066fa <TIM_Base_SetConfig+0x8a>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a28      	ldr	r2, [pc, #160]	; (8006780 <TIM_Base_SetConfig+0x110>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d00b      	beq.n	80066fa <TIM_Base_SetConfig+0x8a>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a27      	ldr	r2, [pc, #156]	; (8006784 <TIM_Base_SetConfig+0x114>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d007      	beq.n	80066fa <TIM_Base_SetConfig+0x8a>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a26      	ldr	r2, [pc, #152]	; (8006788 <TIM_Base_SetConfig+0x118>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d003      	beq.n	80066fa <TIM_Base_SetConfig+0x8a>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a25      	ldr	r2, [pc, #148]	; (800678c <TIM_Base_SetConfig+0x11c>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d108      	bne.n	800670c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	4313      	orrs	r3, r2
 800670a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	4313      	orrs	r3, r2
 8006718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	689a      	ldr	r2, [r3, #8]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a10      	ldr	r2, [pc, #64]	; (8006774 <TIM_Base_SetConfig+0x104>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d00f      	beq.n	8006758 <TIM_Base_SetConfig+0xe8>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a11      	ldr	r2, [pc, #68]	; (8006780 <TIM_Base_SetConfig+0x110>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d00b      	beq.n	8006758 <TIM_Base_SetConfig+0xe8>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a10      	ldr	r2, [pc, #64]	; (8006784 <TIM_Base_SetConfig+0x114>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d007      	beq.n	8006758 <TIM_Base_SetConfig+0xe8>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a0f      	ldr	r2, [pc, #60]	; (8006788 <TIM_Base_SetConfig+0x118>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d003      	beq.n	8006758 <TIM_Base_SetConfig+0xe8>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a0e      	ldr	r2, [pc, #56]	; (800678c <TIM_Base_SetConfig+0x11c>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d103      	bne.n	8006760 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	691a      	ldr	r2, [r3, #16]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	615a      	str	r2, [r3, #20]
}
 8006766:	bf00      	nop
 8006768:	3714      	adds	r7, #20
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	40012c00 	.word	0x40012c00
 8006778:	40000400 	.word	0x40000400
 800677c:	40000800 	.word	0x40000800
 8006780:	40013400 	.word	0x40013400
 8006784:	40014000 	.word	0x40014000
 8006788:	40014400 	.word	0x40014400
 800678c:	40014800 	.word	0x40014800

08006790 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006790:	b480      	push	{r7}
 8006792:	b087      	sub	sp, #28
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	f023 0201 	bic.w	r2, r3, #1
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f023 0303 	bic.w	r3, r3, #3
 80067ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	f023 0302 	bic.w	r3, r3, #2
 80067dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a2c      	ldr	r2, [pc, #176]	; (800689c <TIM_OC1_SetConfig+0x10c>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d00f      	beq.n	8006810 <TIM_OC1_SetConfig+0x80>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a2b      	ldr	r2, [pc, #172]	; (80068a0 <TIM_OC1_SetConfig+0x110>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d00b      	beq.n	8006810 <TIM_OC1_SetConfig+0x80>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a2a      	ldr	r2, [pc, #168]	; (80068a4 <TIM_OC1_SetConfig+0x114>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d007      	beq.n	8006810 <TIM_OC1_SetConfig+0x80>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a29      	ldr	r2, [pc, #164]	; (80068a8 <TIM_OC1_SetConfig+0x118>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d003      	beq.n	8006810 <TIM_OC1_SetConfig+0x80>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a28      	ldr	r2, [pc, #160]	; (80068ac <TIM_OC1_SetConfig+0x11c>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d10c      	bne.n	800682a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f023 0308 	bic.w	r3, r3, #8
 8006816:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	4313      	orrs	r3, r2
 8006820:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f023 0304 	bic.w	r3, r3, #4
 8006828:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a1b      	ldr	r2, [pc, #108]	; (800689c <TIM_OC1_SetConfig+0x10c>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d00f      	beq.n	8006852 <TIM_OC1_SetConfig+0xc2>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a1a      	ldr	r2, [pc, #104]	; (80068a0 <TIM_OC1_SetConfig+0x110>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d00b      	beq.n	8006852 <TIM_OC1_SetConfig+0xc2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a19      	ldr	r2, [pc, #100]	; (80068a4 <TIM_OC1_SetConfig+0x114>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d007      	beq.n	8006852 <TIM_OC1_SetConfig+0xc2>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a18      	ldr	r2, [pc, #96]	; (80068a8 <TIM_OC1_SetConfig+0x118>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d003      	beq.n	8006852 <TIM_OC1_SetConfig+0xc2>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a17      	ldr	r2, [pc, #92]	; (80068ac <TIM_OC1_SetConfig+0x11c>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d111      	bne.n	8006876 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006858:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006860:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	4313      	orrs	r3, r2
 800686a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	4313      	orrs	r3, r2
 8006874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	621a      	str	r2, [r3, #32]
}
 8006890:	bf00      	nop
 8006892:	371c      	adds	r7, #28
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr
 800689c:	40012c00 	.word	0x40012c00
 80068a0:	40013400 	.word	0x40013400
 80068a4:	40014000 	.word	0x40014000
 80068a8:	40014400 	.word	0x40014400
 80068ac:	40014800 	.word	0x40014800

080068b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b087      	sub	sp, #28
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	f023 0210 	bic.w	r2, r3, #16
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	021b      	lsls	r3, r3, #8
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	f023 0320 	bic.w	r3, r3, #32
 80068fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	011b      	lsls	r3, r3, #4
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	4313      	orrs	r3, r2
 800690a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a28      	ldr	r2, [pc, #160]	; (80069b0 <TIM_OC2_SetConfig+0x100>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d003      	beq.n	800691c <TIM_OC2_SetConfig+0x6c>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a27      	ldr	r2, [pc, #156]	; (80069b4 <TIM_OC2_SetConfig+0x104>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d10d      	bne.n	8006938 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	011b      	lsls	r3, r3, #4
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	4313      	orrs	r3, r2
 800692e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006936:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a1d      	ldr	r2, [pc, #116]	; (80069b0 <TIM_OC2_SetConfig+0x100>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d00f      	beq.n	8006960 <TIM_OC2_SetConfig+0xb0>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a1c      	ldr	r2, [pc, #112]	; (80069b4 <TIM_OC2_SetConfig+0x104>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d00b      	beq.n	8006960 <TIM_OC2_SetConfig+0xb0>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a1b      	ldr	r2, [pc, #108]	; (80069b8 <TIM_OC2_SetConfig+0x108>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d007      	beq.n	8006960 <TIM_OC2_SetConfig+0xb0>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a1a      	ldr	r2, [pc, #104]	; (80069bc <TIM_OC2_SetConfig+0x10c>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d003      	beq.n	8006960 <TIM_OC2_SetConfig+0xb0>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a19      	ldr	r2, [pc, #100]	; (80069c0 <TIM_OC2_SetConfig+0x110>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d113      	bne.n	8006988 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006966:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800696e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	4313      	orrs	r3, r2
 800697a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	4313      	orrs	r3, r2
 8006986:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	621a      	str	r2, [r3, #32]
}
 80069a2:	bf00      	nop
 80069a4:	371c      	adds	r7, #28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	40012c00 	.word	0x40012c00
 80069b4:	40013400 	.word	0x40013400
 80069b8:	40014000 	.word	0x40014000
 80069bc:	40014400 	.word	0x40014400
 80069c0:	40014800 	.word	0x40014800

080069c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b087      	sub	sp, #28
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	69db      	ldr	r3, [r3, #28]
 80069ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f023 0303 	bic.w	r3, r3, #3
 80069fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	021b      	lsls	r3, r3, #8
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a27      	ldr	r2, [pc, #156]	; (8006ac0 <TIM_OC3_SetConfig+0xfc>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d003      	beq.n	8006a2e <TIM_OC3_SetConfig+0x6a>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a26      	ldr	r2, [pc, #152]	; (8006ac4 <TIM_OC3_SetConfig+0x100>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d10d      	bne.n	8006a4a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	021b      	lsls	r3, r3, #8
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a1c      	ldr	r2, [pc, #112]	; (8006ac0 <TIM_OC3_SetConfig+0xfc>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d00f      	beq.n	8006a72 <TIM_OC3_SetConfig+0xae>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a1b      	ldr	r2, [pc, #108]	; (8006ac4 <TIM_OC3_SetConfig+0x100>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d00b      	beq.n	8006a72 <TIM_OC3_SetConfig+0xae>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a1a      	ldr	r2, [pc, #104]	; (8006ac8 <TIM_OC3_SetConfig+0x104>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d007      	beq.n	8006a72 <TIM_OC3_SetConfig+0xae>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a19      	ldr	r2, [pc, #100]	; (8006acc <TIM_OC3_SetConfig+0x108>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d003      	beq.n	8006a72 <TIM_OC3_SetConfig+0xae>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a18      	ldr	r2, [pc, #96]	; (8006ad0 <TIM_OC3_SetConfig+0x10c>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d113      	bne.n	8006a9a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	011b      	lsls	r3, r3, #4
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	011b      	lsls	r3, r3, #4
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	685a      	ldr	r2, [r3, #4]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	621a      	str	r2, [r3, #32]
}
 8006ab4:	bf00      	nop
 8006ab6:	371c      	adds	r7, #28
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	40012c00 	.word	0x40012c00
 8006ac4:	40013400 	.word	0x40013400
 8006ac8:	40014000 	.word	0x40014000
 8006acc:	40014400 	.word	0x40014400
 8006ad0:	40014800 	.word	0x40014800

08006ad4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b087      	sub	sp, #28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	69db      	ldr	r3, [r3, #28]
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	021b      	lsls	r3, r3, #8
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	031b      	lsls	r3, r3, #12
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a28      	ldr	r2, [pc, #160]	; (8006bd4 <TIM_OC4_SetConfig+0x100>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d003      	beq.n	8006b40 <TIM_OC4_SetConfig+0x6c>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a27      	ldr	r2, [pc, #156]	; (8006bd8 <TIM_OC4_SetConfig+0x104>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d10d      	bne.n	8006b5c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	031b      	lsls	r3, r3, #12
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a1d      	ldr	r2, [pc, #116]	; (8006bd4 <TIM_OC4_SetConfig+0x100>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d00f      	beq.n	8006b84 <TIM_OC4_SetConfig+0xb0>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a1c      	ldr	r2, [pc, #112]	; (8006bd8 <TIM_OC4_SetConfig+0x104>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d00b      	beq.n	8006b84 <TIM_OC4_SetConfig+0xb0>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a1b      	ldr	r2, [pc, #108]	; (8006bdc <TIM_OC4_SetConfig+0x108>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d007      	beq.n	8006b84 <TIM_OC4_SetConfig+0xb0>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a1a      	ldr	r2, [pc, #104]	; (8006be0 <TIM_OC4_SetConfig+0x10c>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d003      	beq.n	8006b84 <TIM_OC4_SetConfig+0xb0>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a19      	ldr	r2, [pc, #100]	; (8006be4 <TIM_OC4_SetConfig+0x110>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d113      	bne.n	8006bac <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b8a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b92:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	695b      	ldr	r3, [r3, #20]
 8006b98:	019b      	lsls	r3, r3, #6
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	019b      	lsls	r3, r3, #6
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	621a      	str	r2, [r3, #32]
}
 8006bc6:	bf00      	nop
 8006bc8:	371c      	adds	r7, #28
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	40012c00 	.word	0x40012c00
 8006bd8:	40013400 	.word	0x40013400
 8006bdc:	40014000 	.word	0x40014000
 8006be0:	40014400 	.word	0x40014400
 8006be4:	40014800 	.word	0x40014800

08006be8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b087      	sub	sp, #28
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	041b      	lsls	r3, r3, #16
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a17      	ldr	r2, [pc, #92]	; (8006c9c <TIM_OC5_SetConfig+0xb4>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d00f      	beq.n	8006c62 <TIM_OC5_SetConfig+0x7a>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a16      	ldr	r2, [pc, #88]	; (8006ca0 <TIM_OC5_SetConfig+0xb8>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d00b      	beq.n	8006c62 <TIM_OC5_SetConfig+0x7a>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a15      	ldr	r2, [pc, #84]	; (8006ca4 <TIM_OC5_SetConfig+0xbc>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d007      	beq.n	8006c62 <TIM_OC5_SetConfig+0x7a>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a14      	ldr	r2, [pc, #80]	; (8006ca8 <TIM_OC5_SetConfig+0xc0>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d003      	beq.n	8006c62 <TIM_OC5_SetConfig+0x7a>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a13      	ldr	r2, [pc, #76]	; (8006cac <TIM_OC5_SetConfig+0xc4>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d109      	bne.n	8006c76 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	695b      	ldr	r3, [r3, #20]
 8006c6e:	021b      	lsls	r3, r3, #8
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	697a      	ldr	r2, [r7, #20]
 8006c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	621a      	str	r2, [r3, #32]
}
 8006c90:	bf00      	nop
 8006c92:	371c      	adds	r7, #28
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr
 8006c9c:	40012c00 	.word	0x40012c00
 8006ca0:	40013400 	.word	0x40013400
 8006ca4:	40014000 	.word	0x40014000
 8006ca8:	40014400 	.word	0x40014400
 8006cac:	40014800 	.word	0x40014800

08006cb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	021b      	lsls	r3, r3, #8
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006cf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	051b      	lsls	r3, r3, #20
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a18      	ldr	r2, [pc, #96]	; (8006d68 <TIM_OC6_SetConfig+0xb8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d00f      	beq.n	8006d2c <TIM_OC6_SetConfig+0x7c>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a17      	ldr	r2, [pc, #92]	; (8006d6c <TIM_OC6_SetConfig+0xbc>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d00b      	beq.n	8006d2c <TIM_OC6_SetConfig+0x7c>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a16      	ldr	r2, [pc, #88]	; (8006d70 <TIM_OC6_SetConfig+0xc0>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d007      	beq.n	8006d2c <TIM_OC6_SetConfig+0x7c>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a15      	ldr	r2, [pc, #84]	; (8006d74 <TIM_OC6_SetConfig+0xc4>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d003      	beq.n	8006d2c <TIM_OC6_SetConfig+0x7c>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a14      	ldr	r2, [pc, #80]	; (8006d78 <TIM_OC6_SetConfig+0xc8>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d109      	bne.n	8006d40 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	695b      	ldr	r3, [r3, #20]
 8006d38:	029b      	lsls	r3, r3, #10
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	685a      	ldr	r2, [r3, #4]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	693a      	ldr	r2, [r7, #16]
 8006d58:	621a      	str	r2, [r3, #32]
}
 8006d5a:	bf00      	nop
 8006d5c:	371c      	adds	r7, #28
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	40012c00 	.word	0x40012c00
 8006d6c:	40013400 	.word	0x40013400
 8006d70:	40014000 	.word	0x40014000
 8006d74:	40014400 	.word	0x40014400
 8006d78:	40014800 	.word	0x40014800

08006d7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6a1b      	ldr	r3, [r3, #32]
 8006d8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	f023 0201 	bic.w	r2, r3, #1
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006da6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	011b      	lsls	r3, r3, #4
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	f023 030a 	bic.w	r3, r3, #10
 8006db8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	621a      	str	r2, [r3, #32]
}
 8006dce:	bf00      	nop
 8006dd0:	371c      	adds	r7, #28
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr

08006dda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b087      	sub	sp, #28
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	60f8      	str	r0, [r7, #12]
 8006de2:	60b9      	str	r1, [r7, #8]
 8006de4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	f023 0210 	bic.w	r2, r3, #16
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6a1b      	ldr	r3, [r3, #32]
 8006dfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	031b      	lsls	r3, r3, #12
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	011b      	lsls	r3, r3, #4
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	693a      	ldr	r2, [r7, #16]
 8006e2c:	621a      	str	r2, [r3, #32]
}
 8006e2e:	bf00      	nop
 8006e30:	371c      	adds	r7, #28
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr

08006e3a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b085      	sub	sp, #20
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
 8006e42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e56:	683a      	ldr	r2, [r7, #0]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	f043 0307 	orr.w	r3, r3, #7
 8006e60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	609a      	str	r2, [r3, #8]
}
 8006e68:	bf00      	nop
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b087      	sub	sp, #28
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
 8006e80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	021a      	lsls	r2, r3, #8
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	431a      	orrs	r2, r3
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	697a      	ldr	r2, [r7, #20]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	609a      	str	r2, [r3, #8]
}
 8006ea8:	bf00      	nop
 8006eaa:	371c      	adds	r7, #28
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b087      	sub	sp, #28
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	f003 031f 	and.w	r3, r3, #31
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ecc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6a1a      	ldr	r2, [r3, #32]
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	43db      	mvns	r3, r3
 8006ed6:	401a      	ands	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6a1a      	ldr	r2, [r3, #32]
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	f003 031f 	and.w	r3, r3, #31
 8006ee6:	6879      	ldr	r1, [r7, #4]
 8006ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8006eec:	431a      	orrs	r2, r3
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	621a      	str	r2, [r3, #32]
}
 8006ef2:	bf00      	nop
 8006ef4:	371c      	adds	r7, #28
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
	...

08006f00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d101      	bne.n	8006f18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f14:	2302      	movs	r3, #2
 8006f16:	e065      	b.n	8006fe4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a2c      	ldr	r2, [pc, #176]	; (8006ff0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d004      	beq.n	8006f4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a2b      	ldr	r2, [pc, #172]	; (8006ff4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d108      	bne.n	8006f5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006f52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a1b      	ldr	r2, [pc, #108]	; (8006ff0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d018      	beq.n	8006fb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f8e:	d013      	beq.n	8006fb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a18      	ldr	r2, [pc, #96]	; (8006ff8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d00e      	beq.n	8006fb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a17      	ldr	r2, [pc, #92]	; (8006ffc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d009      	beq.n	8006fb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a12      	ldr	r2, [pc, #72]	; (8006ff4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d004      	beq.n	8006fb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a13      	ldr	r2, [pc, #76]	; (8007000 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d10c      	bne.n	8006fd2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	40012c00 	.word	0x40012c00
 8006ff4:	40013400 	.word	0x40013400
 8006ff8:	40000400 	.word	0x40000400
 8006ffc:	40000800 	.word	0x40000800
 8007000:	40014000 	.word	0x40014000

08007004 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d101      	bne.n	80070a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e042      	b.n	8007128 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d106      	bne.n	80070ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f7fc fb53 	bl	8003760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2224      	movs	r2, #36	; 0x24
 80070be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f022 0201 	bic.w	r2, r2, #1
 80070d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fcf6 	bl	8007ac4 <UART_SetConfig>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d101      	bne.n	80070e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e022      	b.n	8007128 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d002      	beq.n	80070f0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 ff86 	bl	8007ffc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	685a      	ldr	r2, [r3, #4]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	689a      	ldr	r2, [r3, #8]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800710e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f042 0201 	orr.w	r2, r2, #1
 800711e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f001 f80d 	bl	8008140 <UART_CheckIdleState>
 8007126:	4603      	mov	r3, r0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3708      	adds	r7, #8
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b08a      	sub	sp, #40	; 0x28
 8007134:	af02      	add	r7, sp, #8
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	603b      	str	r3, [r7, #0]
 800713c:	4613      	mov	r3, r2
 800713e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007146:	2b20      	cmp	r3, #32
 8007148:	f040 8083 	bne.w	8007252 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d002      	beq.n	8007158 <HAL_UART_Transmit+0x28>
 8007152:	88fb      	ldrh	r3, [r7, #6]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d101      	bne.n	800715c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	e07b      	b.n	8007254 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007162:	2b01      	cmp	r3, #1
 8007164:	d101      	bne.n	800716a <HAL_UART_Transmit+0x3a>
 8007166:	2302      	movs	r3, #2
 8007168:	e074      	b.n	8007254 <HAL_UART_Transmit+0x124>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2221      	movs	r2, #33	; 0x21
 800717e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007182:	f7fc fd7d 	bl	8003c80 <HAL_GetTick>
 8007186:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	88fa      	ldrh	r2, [r7, #6]
 800718c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	88fa      	ldrh	r2, [r7, #6]
 8007194:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071a0:	d108      	bne.n	80071b4 <HAL_UART_Transmit+0x84>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d104      	bne.n	80071b4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80071aa:	2300      	movs	r3, #0
 80071ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	61bb      	str	r3, [r7, #24]
 80071b2:	e003      	b.n	80071bc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071b8:	2300      	movs	r3, #0
 80071ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80071c4:	e02c      	b.n	8007220 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	9300      	str	r3, [sp, #0]
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	2200      	movs	r2, #0
 80071ce:	2180      	movs	r1, #128	; 0x80
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f001 f800 	bl	80081d6 <UART_WaitOnFlagUntilTimeout>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d001      	beq.n	80071e0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80071dc:	2303      	movs	r3, #3
 80071de:	e039      	b.n	8007254 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10b      	bne.n	80071fe <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	881b      	ldrh	r3, [r3, #0]
 80071ea:	461a      	mov	r2, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	3302      	adds	r3, #2
 80071fa:	61bb      	str	r3, [r7, #24]
 80071fc:	e007      	b.n	800720e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	781a      	ldrb	r2, [r3, #0]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	3301      	adds	r3, #1
 800720c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007214:	b29b      	uxth	r3, r3
 8007216:	3b01      	subs	r3, #1
 8007218:	b29a      	uxth	r2, r3
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007226:	b29b      	uxth	r3, r3
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1cc      	bne.n	80071c6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	2200      	movs	r2, #0
 8007234:	2140      	movs	r1, #64	; 0x40
 8007236:	68f8      	ldr	r0, [r7, #12]
 8007238:	f000 ffcd 	bl	80081d6 <UART_WaitOnFlagUntilTimeout>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d001      	beq.n	8007246 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007242:	2303      	movs	r3, #3
 8007244:	e006      	b.n	8007254 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2220      	movs	r2, #32
 800724a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800724e:	2300      	movs	r3, #0
 8007250:	e000      	b.n	8007254 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007252:	2302      	movs	r3, #2
  }
}
 8007254:	4618      	mov	r0, r3
 8007256:	3720      	adds	r7, #32
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b08a      	sub	sp, #40	; 0x28
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	4613      	mov	r3, r2
 8007268:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007270:	2b20      	cmp	r3, #32
 8007272:	d17a      	bne.n	800736a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d002      	beq.n	8007280 <HAL_UART_Transmit_DMA+0x24>
 800727a:	88fb      	ldrh	r3, [r7, #6]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d101      	bne.n	8007284 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e073      	b.n	800736c <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800728a:	2b01      	cmp	r3, #1
 800728c:	d101      	bne.n	8007292 <HAL_UART_Transmit_DMA+0x36>
 800728e:	2302      	movs	r3, #2
 8007290:	e06c      	b.n	800736c <HAL_UART_Transmit_DMA+0x110>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	88fa      	ldrh	r2, [r7, #6]
 80072a4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	88fa      	ldrh	r2, [r7, #6]
 80072ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2221      	movs	r2, #33	; 0x21
 80072bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d02c      	beq.n	8007322 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072cc:	4a29      	ldr	r2, [pc, #164]	; (8007374 <HAL_UART_Transmit_DMA+0x118>)
 80072ce:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072d4:	4a28      	ldr	r2, [pc, #160]	; (8007378 <HAL_UART_Transmit_DMA+0x11c>)
 80072d6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072dc:	4a27      	ldr	r2, [pc, #156]	; (800737c <HAL_UART_Transmit_DMA+0x120>)
 80072de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072e4:	2200      	movs	r2, #0
 80072e6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072f0:	4619      	mov	r1, r3
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	3328      	adds	r3, #40	; 0x28
 80072f8:	461a      	mov	r2, r3
 80072fa:	88fb      	ldrh	r3, [r7, #6]
 80072fc:	f7fc fe84 	bl	8004008 <HAL_DMA_Start_IT>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00d      	beq.n	8007322 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2210      	movs	r2, #16
 800730a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2220      	movs	r2, #32
 800731a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e024      	b.n	800736c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2240      	movs	r2, #64	; 0x40
 8007328:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	3308      	adds	r3, #8
 8007338:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	e853 3f00 	ldrex	r3, [r3]
 8007340:	613b      	str	r3, [r7, #16]
   return(result);
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007348:	627b      	str	r3, [r7, #36]	; 0x24
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	3308      	adds	r3, #8
 8007350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007352:	623a      	str	r2, [r7, #32]
 8007354:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007356:	69f9      	ldr	r1, [r7, #28]
 8007358:	6a3a      	ldr	r2, [r7, #32]
 800735a:	e841 2300 	strex	r3, r2, [r1]
 800735e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d1e5      	bne.n	8007332 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8007366:	2300      	movs	r3, #0
 8007368:	e000      	b.n	800736c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800736a:	2302      	movs	r3, #2
  }
}
 800736c:	4618      	mov	r0, r3
 800736e:	3728      	adds	r7, #40	; 0x28
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	08008607 	.word	0x08008607
 8007378:	080086a1 	.word	0x080086a1
 800737c:	0800881b 	.word	0x0800881b

08007380 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b08a      	sub	sp, #40	; 0x28
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	4613      	mov	r3, r2
 800738c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007394:	2b20      	cmp	r3, #32
 8007396:	d142      	bne.n	800741e <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d002      	beq.n	80073a4 <HAL_UART_Receive_DMA+0x24>
 800739e:	88fb      	ldrh	r3, [r7, #6]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d101      	bne.n	80073a8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e03b      	b.n	8007420 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d101      	bne.n	80073b6 <HAL_UART_Receive_DMA+0x36>
 80073b2:	2302      	movs	r3, #2
 80073b4:	e034      	b.n	8007420 <HAL_UART_Receive_DMA+0xa0>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a17      	ldr	r2, [pc, #92]	; (8007428 <HAL_UART_Receive_DMA+0xa8>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d01f      	beq.n	800740e <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d018      	beq.n	800740e <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	e853 3f00 	ldrex	r3, [r3]
 80073e8:	613b      	str	r3, [r7, #16]
   return(result);
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073f0:	627b      	str	r3, [r7, #36]	; 0x24
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	461a      	mov	r2, r3
 80073f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fa:	623b      	str	r3, [r7, #32]
 80073fc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fe:	69f9      	ldr	r1, [r7, #28]
 8007400:	6a3a      	ldr	r2, [r7, #32]
 8007402:	e841 2300 	strex	r3, r2, [r1]
 8007406:	61bb      	str	r3, [r7, #24]
   return(result);
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1e6      	bne.n	80073dc <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800740e:	88fb      	ldrh	r3, [r7, #6]
 8007410:	461a      	mov	r2, r3
 8007412:	68b9      	ldr	r1, [r7, #8]
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f000 ffa7 	bl	8008368 <UART_Start_Receive_DMA>
 800741a:	4603      	mov	r3, r0
 800741c:	e000      	b.n	8007420 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800741e:	2302      	movs	r3, #2
  }
}
 8007420:	4618      	mov	r0, r3
 8007422:	3728      	adds	r7, #40	; 0x28
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	40008000 	.word	0x40008000

0800742c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b0ba      	sub	sp, #232	; 0xe8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	69db      	ldr	r3, [r3, #28]
 800743a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007452:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007456:	f640 030f 	movw	r3, #2063	; 0x80f
 800745a:	4013      	ands	r3, r2
 800745c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007460:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007464:	2b00      	cmp	r3, #0
 8007466:	d11b      	bne.n	80074a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800746c:	f003 0320 	and.w	r3, r3, #32
 8007470:	2b00      	cmp	r3, #0
 8007472:	d015      	beq.n	80074a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007478:	f003 0320 	and.w	r3, r3, #32
 800747c:	2b00      	cmp	r3, #0
 800747e:	d105      	bne.n	800748c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007480:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007488:	2b00      	cmp	r3, #0
 800748a:	d009      	beq.n	80074a0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 82d6 	beq.w	8007a42 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	4798      	blx	r3
      }
      return;
 800749e:	e2d0      	b.n	8007a42 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80074a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f000 811f 	beq.w	80076e8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80074aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80074ae:	4b8b      	ldr	r3, [pc, #556]	; (80076dc <HAL_UART_IRQHandler+0x2b0>)
 80074b0:	4013      	ands	r3, r2
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d106      	bne.n	80074c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80074b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80074ba:	4b89      	ldr	r3, [pc, #548]	; (80076e0 <HAL_UART_IRQHandler+0x2b4>)
 80074bc:	4013      	ands	r3, r2
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f000 8112 	beq.w	80076e8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80074c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074c8:	f003 0301 	and.w	r3, r3, #1
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d011      	beq.n	80074f4 <HAL_UART_IRQHandler+0xc8>
 80074d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00b      	beq.n	80074f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2201      	movs	r2, #1
 80074e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074ea:	f043 0201 	orr.w	r2, r3, #1
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074f8:	f003 0302 	and.w	r3, r3, #2
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d011      	beq.n	8007524 <HAL_UART_IRQHandler+0xf8>
 8007500:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007504:	f003 0301 	and.w	r3, r3, #1
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00b      	beq.n	8007524 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2202      	movs	r2, #2
 8007512:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800751a:	f043 0204 	orr.w	r2, r3, #4
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007528:	f003 0304 	and.w	r3, r3, #4
 800752c:	2b00      	cmp	r3, #0
 800752e:	d011      	beq.n	8007554 <HAL_UART_IRQHandler+0x128>
 8007530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007534:	f003 0301 	and.w	r3, r3, #1
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00b      	beq.n	8007554 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2204      	movs	r2, #4
 8007542:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800754a:	f043 0202 	orr.w	r2, r3, #2
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007558:	f003 0308 	and.w	r3, r3, #8
 800755c:	2b00      	cmp	r3, #0
 800755e:	d017      	beq.n	8007590 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007564:	f003 0320 	and.w	r3, r3, #32
 8007568:	2b00      	cmp	r3, #0
 800756a:	d105      	bne.n	8007578 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800756c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007570:	4b5a      	ldr	r3, [pc, #360]	; (80076dc <HAL_UART_IRQHandler+0x2b0>)
 8007572:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00b      	beq.n	8007590 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2208      	movs	r2, #8
 800757e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007586:	f043 0208 	orr.w	r2, r3, #8
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007598:	2b00      	cmp	r3, #0
 800759a:	d012      	beq.n	80075c2 <HAL_UART_IRQHandler+0x196>
 800759c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00c      	beq.n	80075c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075b8:	f043 0220 	orr.w	r2, r3, #32
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f000 823c 	beq.w	8007a46 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80075ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075d2:	f003 0320 	and.w	r3, r3, #32
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d013      	beq.n	8007602 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80075da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075de:	f003 0320 	and.w	r3, r3, #32
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d105      	bne.n	80075f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80075e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d007      	beq.n	8007602 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d003      	beq.n	8007602 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007608:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007616:	2b40      	cmp	r3, #64	; 0x40
 8007618:	d005      	beq.n	8007626 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800761a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800761e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007622:	2b00      	cmp	r3, #0
 8007624:	d04f      	beq.n	80076c6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 ff87 	bl	800853a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007636:	2b40      	cmp	r3, #64	; 0x40
 8007638:	d141      	bne.n	80076be <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	3308      	adds	r3, #8
 8007640:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007644:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007648:	e853 3f00 	ldrex	r3, [r3]
 800764c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007650:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007654:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007658:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	3308      	adds	r3, #8
 8007662:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007666:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800766a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007672:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007676:	e841 2300 	strex	r3, r2, [r1]
 800767a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800767e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1d9      	bne.n	800763a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800768a:	2b00      	cmp	r3, #0
 800768c:	d013      	beq.n	80076b6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007692:	4a14      	ldr	r2, [pc, #80]	; (80076e4 <HAL_UART_IRQHandler+0x2b8>)
 8007694:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800769a:	4618      	mov	r0, r3
 800769c:	f7fc fd88 	bl	80041b0 <HAL_DMA_Abort_IT>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d017      	beq.n	80076d6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80076b0:	4610      	mov	r0, r2
 80076b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076b4:	e00f      	b.n	80076d6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f9ee 	bl	8007a98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076bc:	e00b      	b.n	80076d6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 f9ea 	bl	8007a98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076c4:	e007      	b.n	80076d6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 f9e6 	bl	8007a98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80076d4:	e1b7      	b.n	8007a46 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076d6:	bf00      	nop
    return;
 80076d8:	e1b5      	b.n	8007a46 <HAL_UART_IRQHandler+0x61a>
 80076da:	bf00      	nop
 80076dc:	10000001 	.word	0x10000001
 80076e0:	04000120 	.word	0x04000120
 80076e4:	0800889b 	.word	0x0800889b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	f040 814a 	bne.w	8007986 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80076f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076f6:	f003 0310 	and.w	r3, r3, #16
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f000 8143 	beq.w	8007986 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007704:	f003 0310 	and.w	r3, r3, #16
 8007708:	2b00      	cmp	r3, #0
 800770a:	f000 813c 	beq.w	8007986 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2210      	movs	r2, #16
 8007714:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007720:	2b40      	cmp	r3, #64	; 0x40
 8007722:	f040 80b5 	bne.w	8007890 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007732:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007736:	2b00      	cmp	r3, #0
 8007738:	f000 8187 	beq.w	8007a4a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007742:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007746:	429a      	cmp	r2, r3
 8007748:	f080 817f 	bcs.w	8007a4a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007752:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 0320 	and.w	r3, r3, #32
 8007762:	2b00      	cmp	r3, #0
 8007764:	f040 8086 	bne.w	8007874 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007770:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007774:	e853 3f00 	ldrex	r3, [r3]
 8007778:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800777c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007784:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	461a      	mov	r2, r3
 800778e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007792:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007796:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800779e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80077a2:	e841 2300 	strex	r3, r2, [r1]
 80077a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80077aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1da      	bne.n	8007768 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	3308      	adds	r3, #8
 80077b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077bc:	e853 3f00 	ldrex	r3, [r3]
 80077c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80077c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077c4:	f023 0301 	bic.w	r3, r3, #1
 80077c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	3308      	adds	r3, #8
 80077d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80077d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80077da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80077de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80077e2:	e841 2300 	strex	r3, r2, [r1]
 80077e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80077e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1e1      	bne.n	80077b2 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	3308      	adds	r3, #8
 80077f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077f8:	e853 3f00 	ldrex	r3, [r3]
 80077fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80077fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007804:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	3308      	adds	r3, #8
 800780e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007812:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007814:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007816:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007818:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800781a:	e841 2300 	strex	r3, r2, [r1]
 800781e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007820:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1e3      	bne.n	80077ee <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2220      	movs	r2, #32
 800782a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800783c:	e853 3f00 	ldrex	r3, [r3]
 8007840:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007844:	f023 0310 	bic.w	r3, r3, #16
 8007848:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	461a      	mov	r2, r3
 8007852:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007856:	65bb      	str	r3, [r7, #88]	; 0x58
 8007858:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800785c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800785e:	e841 2300 	strex	r3, r2, [r1]
 8007862:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007866:	2b00      	cmp	r3, #0
 8007868:	d1e4      	bne.n	8007834 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800786e:	4618      	mov	r0, r3
 8007870:	f7fc fc45 	bl	80040fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007880:	b29b      	uxth	r3, r3
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	b29b      	uxth	r3, r3
 8007886:	4619      	mov	r1, r3
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f90f 	bl	8007aac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800788e:	e0dc      	b.n	8007a4a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800789c:	b29b      	uxth	r3, r3
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f000 80ce 	beq.w	8007a4e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80078b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f000 80c9 	beq.w	8007a4e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c4:	e853 3f00 	ldrex	r3, [r3]
 80078c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80078ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	461a      	mov	r2, r3
 80078da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078de:	647b      	str	r3, [r7, #68]	; 0x44
 80078e0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078e6:	e841 2300 	strex	r3, r2, [r1]
 80078ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1e4      	bne.n	80078bc <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	3308      	adds	r3, #8
 80078f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fc:	e853 3f00 	ldrex	r3, [r3]
 8007900:	623b      	str	r3, [r7, #32]
   return(result);
 8007902:	6a3b      	ldr	r3, [r7, #32]
 8007904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007908:	f023 0301 	bic.w	r3, r3, #1
 800790c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	3308      	adds	r3, #8
 8007916:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800791a:	633a      	str	r2, [r7, #48]	; 0x30
 800791c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007922:	e841 2300 	strex	r3, r2, [r1]
 8007926:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1e1      	bne.n	80078f2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2220      	movs	r2, #32
 8007932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	e853 3f00 	ldrex	r3, [r3]
 800794e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f023 0310 	bic.w	r3, r3, #16
 8007956:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	461a      	mov	r2, r3
 8007960:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007964:	61fb      	str	r3, [r7, #28]
 8007966:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007968:	69b9      	ldr	r1, [r7, #24]
 800796a:	69fa      	ldr	r2, [r7, #28]
 800796c:	e841 2300 	strex	r3, r2, [r1]
 8007970:	617b      	str	r3, [r7, #20]
   return(result);
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1e4      	bne.n	8007942 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007978:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800797c:	4619      	mov	r1, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 f894 	bl	8007aac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007984:	e063      	b.n	8007a4e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800798a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00e      	beq.n	80079b0 <HAL_UART_IRQHandler+0x584>
 8007992:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d008      	beq.n	80079b0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80079a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 ffb7 	bl	800891c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079ae:	e051      	b.n	8007a54 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80079b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d014      	beq.n	80079e6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80079bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d105      	bne.n	80079d4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80079c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d008      	beq.n	80079e6 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d03a      	beq.n	8007a52 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	4798      	blx	r3
    }
    return;
 80079e4:	e035      	b.n	8007a52 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80079e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d009      	beq.n	8007a06 <HAL_UART_IRQHandler+0x5da>
 80079f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d003      	beq.n	8007a06 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 ff61 	bl	80088c6 <UART_EndTransmit_IT>
    return;
 8007a04:	e026      	b.n	8007a54 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d009      	beq.n	8007a26 <HAL_UART_IRQHandler+0x5fa>
 8007a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a16:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d003      	beq.n	8007a26 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 ff90 	bl	8008944 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a24:	e016      	b.n	8007a54 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d010      	beq.n	8007a54 <HAL_UART_IRQHandler+0x628>
 8007a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	da0c      	bge.n	8007a54 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 ff78 	bl	8008930 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a40:	e008      	b.n	8007a54 <HAL_UART_IRQHandler+0x628>
      return;
 8007a42:	bf00      	nop
 8007a44:	e006      	b.n	8007a54 <HAL_UART_IRQHandler+0x628>
    return;
 8007a46:	bf00      	nop
 8007a48:	e004      	b.n	8007a54 <HAL_UART_IRQHandler+0x628>
      return;
 8007a4a:	bf00      	nop
 8007a4c:	e002      	b.n	8007a54 <HAL_UART_IRQHandler+0x628>
      return;
 8007a4e:	bf00      	nop
 8007a50:	e000      	b.n	8007a54 <HAL_UART_IRQHandler+0x628>
    return;
 8007a52:	bf00      	nop
  }
}
 8007a54:	37e8      	adds	r7, #232	; 0xe8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop

08007a5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007a64:	bf00      	nop
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ab8:	bf00      	nop
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ac4:	b5b0      	push	{r4, r5, r7, lr}
 8007ac6:	b088      	sub	sp, #32
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007acc:	2300      	movs	r3, #0
 8007ace:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	689a      	ldr	r2, [r3, #8]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	431a      	orrs	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	431a      	orrs	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	69db      	ldr	r3, [r3, #28]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	4baf      	ldr	r3, [pc, #700]	; (8007dac <UART_SetConfig+0x2e8>)
 8007af0:	4013      	ands	r3, r2
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	6812      	ldr	r2, [r2, #0]
 8007af6:	69f9      	ldr	r1, [r7, #28]
 8007af8:	430b      	orrs	r3, r1
 8007afa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	68da      	ldr	r2, [r3, #12]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	430a      	orrs	r2, r1
 8007b10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	699b      	ldr	r3, [r3, #24]
 8007b16:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4aa4      	ldr	r2, [pc, #656]	; (8007db0 <UART_SetConfig+0x2ec>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d004      	beq.n	8007b2c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a1b      	ldr	r3, [r3, #32]
 8007b26:	69fa      	ldr	r2, [r7, #28]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007b36:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	6812      	ldr	r2, [r2, #0]
 8007b3e:	69f9      	ldr	r1, [r7, #28]
 8007b40:	430b      	orrs	r3, r1
 8007b42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b4a:	f023 010f 	bic.w	r1, r3, #15
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	430a      	orrs	r2, r1
 8007b58:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a95      	ldr	r2, [pc, #596]	; (8007db4 <UART_SetConfig+0x2f0>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d120      	bne.n	8007ba6 <UART_SetConfig+0xe2>
 8007b64:	4b94      	ldr	r3, [pc, #592]	; (8007db8 <UART_SetConfig+0x2f4>)
 8007b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b6a:	f003 0303 	and.w	r3, r3, #3
 8007b6e:	2b03      	cmp	r3, #3
 8007b70:	d816      	bhi.n	8007ba0 <UART_SetConfig+0xdc>
 8007b72:	a201      	add	r2, pc, #4	; (adr r2, 8007b78 <UART_SetConfig+0xb4>)
 8007b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b78:	08007b89 	.word	0x08007b89
 8007b7c:	08007b95 	.word	0x08007b95
 8007b80:	08007b8f 	.word	0x08007b8f
 8007b84:	08007b9b 	.word	0x08007b9b
 8007b88:	2301      	movs	r3, #1
 8007b8a:	76fb      	strb	r3, [r7, #27]
 8007b8c:	e0bc      	b.n	8007d08 <UART_SetConfig+0x244>
 8007b8e:	2302      	movs	r3, #2
 8007b90:	76fb      	strb	r3, [r7, #27]
 8007b92:	e0b9      	b.n	8007d08 <UART_SetConfig+0x244>
 8007b94:	2304      	movs	r3, #4
 8007b96:	76fb      	strb	r3, [r7, #27]
 8007b98:	e0b6      	b.n	8007d08 <UART_SetConfig+0x244>
 8007b9a:	2308      	movs	r3, #8
 8007b9c:	76fb      	strb	r3, [r7, #27]
 8007b9e:	e0b3      	b.n	8007d08 <UART_SetConfig+0x244>
 8007ba0:	2310      	movs	r3, #16
 8007ba2:	76fb      	strb	r3, [r7, #27]
 8007ba4:	e0b0      	b.n	8007d08 <UART_SetConfig+0x244>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a84      	ldr	r2, [pc, #528]	; (8007dbc <UART_SetConfig+0x2f8>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d132      	bne.n	8007c16 <UART_SetConfig+0x152>
 8007bb0:	4b81      	ldr	r3, [pc, #516]	; (8007db8 <UART_SetConfig+0x2f4>)
 8007bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bb6:	f003 030c 	and.w	r3, r3, #12
 8007bba:	2b0c      	cmp	r3, #12
 8007bbc:	d828      	bhi.n	8007c10 <UART_SetConfig+0x14c>
 8007bbe:	a201      	add	r2, pc, #4	; (adr r2, 8007bc4 <UART_SetConfig+0x100>)
 8007bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc4:	08007bf9 	.word	0x08007bf9
 8007bc8:	08007c11 	.word	0x08007c11
 8007bcc:	08007c11 	.word	0x08007c11
 8007bd0:	08007c11 	.word	0x08007c11
 8007bd4:	08007c05 	.word	0x08007c05
 8007bd8:	08007c11 	.word	0x08007c11
 8007bdc:	08007c11 	.word	0x08007c11
 8007be0:	08007c11 	.word	0x08007c11
 8007be4:	08007bff 	.word	0x08007bff
 8007be8:	08007c11 	.word	0x08007c11
 8007bec:	08007c11 	.word	0x08007c11
 8007bf0:	08007c11 	.word	0x08007c11
 8007bf4:	08007c0b 	.word	0x08007c0b
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	76fb      	strb	r3, [r7, #27]
 8007bfc:	e084      	b.n	8007d08 <UART_SetConfig+0x244>
 8007bfe:	2302      	movs	r3, #2
 8007c00:	76fb      	strb	r3, [r7, #27]
 8007c02:	e081      	b.n	8007d08 <UART_SetConfig+0x244>
 8007c04:	2304      	movs	r3, #4
 8007c06:	76fb      	strb	r3, [r7, #27]
 8007c08:	e07e      	b.n	8007d08 <UART_SetConfig+0x244>
 8007c0a:	2308      	movs	r3, #8
 8007c0c:	76fb      	strb	r3, [r7, #27]
 8007c0e:	e07b      	b.n	8007d08 <UART_SetConfig+0x244>
 8007c10:	2310      	movs	r3, #16
 8007c12:	76fb      	strb	r3, [r7, #27]
 8007c14:	e078      	b.n	8007d08 <UART_SetConfig+0x244>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a69      	ldr	r2, [pc, #420]	; (8007dc0 <UART_SetConfig+0x2fc>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d120      	bne.n	8007c62 <UART_SetConfig+0x19e>
 8007c20:	4b65      	ldr	r3, [pc, #404]	; (8007db8 <UART_SetConfig+0x2f4>)
 8007c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c26:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c2a:	2b30      	cmp	r3, #48	; 0x30
 8007c2c:	d013      	beq.n	8007c56 <UART_SetConfig+0x192>
 8007c2e:	2b30      	cmp	r3, #48	; 0x30
 8007c30:	d814      	bhi.n	8007c5c <UART_SetConfig+0x198>
 8007c32:	2b20      	cmp	r3, #32
 8007c34:	d009      	beq.n	8007c4a <UART_SetConfig+0x186>
 8007c36:	2b20      	cmp	r3, #32
 8007c38:	d810      	bhi.n	8007c5c <UART_SetConfig+0x198>
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d002      	beq.n	8007c44 <UART_SetConfig+0x180>
 8007c3e:	2b10      	cmp	r3, #16
 8007c40:	d006      	beq.n	8007c50 <UART_SetConfig+0x18c>
 8007c42:	e00b      	b.n	8007c5c <UART_SetConfig+0x198>
 8007c44:	2300      	movs	r3, #0
 8007c46:	76fb      	strb	r3, [r7, #27]
 8007c48:	e05e      	b.n	8007d08 <UART_SetConfig+0x244>
 8007c4a:	2302      	movs	r3, #2
 8007c4c:	76fb      	strb	r3, [r7, #27]
 8007c4e:	e05b      	b.n	8007d08 <UART_SetConfig+0x244>
 8007c50:	2304      	movs	r3, #4
 8007c52:	76fb      	strb	r3, [r7, #27]
 8007c54:	e058      	b.n	8007d08 <UART_SetConfig+0x244>
 8007c56:	2308      	movs	r3, #8
 8007c58:	76fb      	strb	r3, [r7, #27]
 8007c5a:	e055      	b.n	8007d08 <UART_SetConfig+0x244>
 8007c5c:	2310      	movs	r3, #16
 8007c5e:	76fb      	strb	r3, [r7, #27]
 8007c60:	e052      	b.n	8007d08 <UART_SetConfig+0x244>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a57      	ldr	r2, [pc, #348]	; (8007dc4 <UART_SetConfig+0x300>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d120      	bne.n	8007cae <UART_SetConfig+0x1ea>
 8007c6c:	4b52      	ldr	r3, [pc, #328]	; (8007db8 <UART_SetConfig+0x2f4>)
 8007c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007c76:	2bc0      	cmp	r3, #192	; 0xc0
 8007c78:	d013      	beq.n	8007ca2 <UART_SetConfig+0x1de>
 8007c7a:	2bc0      	cmp	r3, #192	; 0xc0
 8007c7c:	d814      	bhi.n	8007ca8 <UART_SetConfig+0x1e4>
 8007c7e:	2b80      	cmp	r3, #128	; 0x80
 8007c80:	d009      	beq.n	8007c96 <UART_SetConfig+0x1d2>
 8007c82:	2b80      	cmp	r3, #128	; 0x80
 8007c84:	d810      	bhi.n	8007ca8 <UART_SetConfig+0x1e4>
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d002      	beq.n	8007c90 <UART_SetConfig+0x1cc>
 8007c8a:	2b40      	cmp	r3, #64	; 0x40
 8007c8c:	d006      	beq.n	8007c9c <UART_SetConfig+0x1d8>
 8007c8e:	e00b      	b.n	8007ca8 <UART_SetConfig+0x1e4>
 8007c90:	2300      	movs	r3, #0
 8007c92:	76fb      	strb	r3, [r7, #27]
 8007c94:	e038      	b.n	8007d08 <UART_SetConfig+0x244>
 8007c96:	2302      	movs	r3, #2
 8007c98:	76fb      	strb	r3, [r7, #27]
 8007c9a:	e035      	b.n	8007d08 <UART_SetConfig+0x244>
 8007c9c:	2304      	movs	r3, #4
 8007c9e:	76fb      	strb	r3, [r7, #27]
 8007ca0:	e032      	b.n	8007d08 <UART_SetConfig+0x244>
 8007ca2:	2308      	movs	r3, #8
 8007ca4:	76fb      	strb	r3, [r7, #27]
 8007ca6:	e02f      	b.n	8007d08 <UART_SetConfig+0x244>
 8007ca8:	2310      	movs	r3, #16
 8007caa:	76fb      	strb	r3, [r7, #27]
 8007cac:	e02c      	b.n	8007d08 <UART_SetConfig+0x244>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a3f      	ldr	r2, [pc, #252]	; (8007db0 <UART_SetConfig+0x2ec>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d125      	bne.n	8007d04 <UART_SetConfig+0x240>
 8007cb8:	4b3f      	ldr	r3, [pc, #252]	; (8007db8 <UART_SetConfig+0x2f4>)
 8007cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cbe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007cc2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cc6:	d017      	beq.n	8007cf8 <UART_SetConfig+0x234>
 8007cc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ccc:	d817      	bhi.n	8007cfe <UART_SetConfig+0x23a>
 8007cce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cd2:	d00b      	beq.n	8007cec <UART_SetConfig+0x228>
 8007cd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cd8:	d811      	bhi.n	8007cfe <UART_SetConfig+0x23a>
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d003      	beq.n	8007ce6 <UART_SetConfig+0x222>
 8007cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ce2:	d006      	beq.n	8007cf2 <UART_SetConfig+0x22e>
 8007ce4:	e00b      	b.n	8007cfe <UART_SetConfig+0x23a>
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	76fb      	strb	r3, [r7, #27]
 8007cea:	e00d      	b.n	8007d08 <UART_SetConfig+0x244>
 8007cec:	2302      	movs	r3, #2
 8007cee:	76fb      	strb	r3, [r7, #27]
 8007cf0:	e00a      	b.n	8007d08 <UART_SetConfig+0x244>
 8007cf2:	2304      	movs	r3, #4
 8007cf4:	76fb      	strb	r3, [r7, #27]
 8007cf6:	e007      	b.n	8007d08 <UART_SetConfig+0x244>
 8007cf8:	2308      	movs	r3, #8
 8007cfa:	76fb      	strb	r3, [r7, #27]
 8007cfc:	e004      	b.n	8007d08 <UART_SetConfig+0x244>
 8007cfe:	2310      	movs	r3, #16
 8007d00:	76fb      	strb	r3, [r7, #27]
 8007d02:	e001      	b.n	8007d08 <UART_SetConfig+0x244>
 8007d04:	2310      	movs	r3, #16
 8007d06:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a28      	ldr	r2, [pc, #160]	; (8007db0 <UART_SetConfig+0x2ec>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	f040 809e 	bne.w	8007e50 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d14:	7efb      	ldrb	r3, [r7, #27]
 8007d16:	2b08      	cmp	r3, #8
 8007d18:	d823      	bhi.n	8007d62 <UART_SetConfig+0x29e>
 8007d1a:	a201      	add	r2, pc, #4	; (adr r2, 8007d20 <UART_SetConfig+0x25c>)
 8007d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d20:	08007d45 	.word	0x08007d45
 8007d24:	08007d63 	.word	0x08007d63
 8007d28:	08007d4d 	.word	0x08007d4d
 8007d2c:	08007d63 	.word	0x08007d63
 8007d30:	08007d53 	.word	0x08007d53
 8007d34:	08007d63 	.word	0x08007d63
 8007d38:	08007d63 	.word	0x08007d63
 8007d3c:	08007d63 	.word	0x08007d63
 8007d40:	08007d5b 	.word	0x08007d5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d44:	f7fd fb12 	bl	800536c <HAL_RCC_GetPCLK1Freq>
 8007d48:	6178      	str	r0, [r7, #20]
        break;
 8007d4a:	e00f      	b.n	8007d6c <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d4c:	4b1e      	ldr	r3, [pc, #120]	; (8007dc8 <UART_SetConfig+0x304>)
 8007d4e:	617b      	str	r3, [r7, #20]
        break;
 8007d50:	e00c      	b.n	8007d6c <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d52:	f7fd fa9d 	bl	8005290 <HAL_RCC_GetSysClockFreq>
 8007d56:	6178      	str	r0, [r7, #20]
        break;
 8007d58:	e008      	b.n	8007d6c <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d5e:	617b      	str	r3, [r7, #20]
        break;
 8007d60:	e004      	b.n	8007d6c <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 8007d62:	2300      	movs	r3, #0
 8007d64:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	76bb      	strb	r3, [r7, #26]
        break;
 8007d6a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f000 812c 	beq.w	8007fcc <UART_SetConfig+0x508>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d78:	4a14      	ldr	r2, [pc, #80]	; (8007dcc <UART_SetConfig+0x308>)
 8007d7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d86:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	685a      	ldr	r2, [r3, #4]
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	005b      	lsls	r3, r3, #1
 8007d90:	4413      	add	r3, r2
 8007d92:	68ba      	ldr	r2, [r7, #8]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d305      	bcc.n	8007da4 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d9e:	68ba      	ldr	r2, [r7, #8]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d915      	bls.n	8007dd0 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	76bb      	strb	r3, [r7, #26]
 8007da8:	e110      	b.n	8007fcc <UART_SetConfig+0x508>
 8007daa:	bf00      	nop
 8007dac:	cfff69f3 	.word	0xcfff69f3
 8007db0:	40008000 	.word	0x40008000
 8007db4:	40013800 	.word	0x40013800
 8007db8:	40021000 	.word	0x40021000
 8007dbc:	40004400 	.word	0x40004400
 8007dc0:	40004800 	.word	0x40004800
 8007dc4:	40004c00 	.word	0x40004c00
 8007dc8:	00f42400 	.word	0x00f42400
 8007dcc:	0800fd04 	.word	0x0800fd04
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f04f 0100 	mov.w	r1, #0
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ddc:	4a85      	ldr	r2, [pc, #532]	; (8007ff4 <UART_SetConfig+0x530>)
 8007dde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	f04f 0300 	mov.w	r3, #0
 8007de8:	f7f8 ff76 	bl	8000cd8 <__aeabi_uldivmod>
 8007dec:	4602      	mov	r2, r0
 8007dee:	460b      	mov	r3, r1
 8007df0:	4610      	mov	r0, r2
 8007df2:	4619      	mov	r1, r3
 8007df4:	f04f 0200 	mov.w	r2, #0
 8007df8:	f04f 0300 	mov.w	r3, #0
 8007dfc:	020b      	lsls	r3, r1, #8
 8007dfe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007e02:	0202      	lsls	r2, r0, #8
 8007e04:	6879      	ldr	r1, [r7, #4]
 8007e06:	6849      	ldr	r1, [r1, #4]
 8007e08:	0849      	lsrs	r1, r1, #1
 8007e0a:	4608      	mov	r0, r1
 8007e0c:	f04f 0100 	mov.w	r1, #0
 8007e10:	1814      	adds	r4, r2, r0
 8007e12:	eb43 0501 	adc.w	r5, r3, r1
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	f04f 0300 	mov.w	r3, #0
 8007e20:	4620      	mov	r0, r4
 8007e22:	4629      	mov	r1, r5
 8007e24:	f7f8 ff58 	bl	8000cd8 <__aeabi_uldivmod>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e36:	d308      	bcc.n	8007e4a <UART_SetConfig+0x386>
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e3e:	d204      	bcs.n	8007e4a <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	693a      	ldr	r2, [r7, #16]
 8007e46:	60da      	str	r2, [r3, #12]
 8007e48:	e0c0      	b.n	8007fcc <UART_SetConfig+0x508>
        }
        else
        {
          ret = HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	76bb      	strb	r3, [r7, #26]
 8007e4e:	e0bd      	b.n	8007fcc <UART_SetConfig+0x508>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	69db      	ldr	r3, [r3, #28]
 8007e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e58:	d164      	bne.n	8007f24 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8007e5a:	7efb      	ldrb	r3, [r7, #27]
 8007e5c:	2b08      	cmp	r3, #8
 8007e5e:	d828      	bhi.n	8007eb2 <UART_SetConfig+0x3ee>
 8007e60:	a201      	add	r2, pc, #4	; (adr r2, 8007e68 <UART_SetConfig+0x3a4>)
 8007e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e66:	bf00      	nop
 8007e68:	08007e8d 	.word	0x08007e8d
 8007e6c:	08007e95 	.word	0x08007e95
 8007e70:	08007e9d 	.word	0x08007e9d
 8007e74:	08007eb3 	.word	0x08007eb3
 8007e78:	08007ea3 	.word	0x08007ea3
 8007e7c:	08007eb3 	.word	0x08007eb3
 8007e80:	08007eb3 	.word	0x08007eb3
 8007e84:	08007eb3 	.word	0x08007eb3
 8007e88:	08007eab 	.word	0x08007eab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e8c:	f7fd fa6e 	bl	800536c <HAL_RCC_GetPCLK1Freq>
 8007e90:	6178      	str	r0, [r7, #20]
        break;
 8007e92:	e013      	b.n	8007ebc <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e94:	f7fd fa80 	bl	8005398 <HAL_RCC_GetPCLK2Freq>
 8007e98:	6178      	str	r0, [r7, #20]
        break;
 8007e9a:	e00f      	b.n	8007ebc <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e9c:	4b56      	ldr	r3, [pc, #344]	; (8007ff8 <UART_SetConfig+0x534>)
 8007e9e:	617b      	str	r3, [r7, #20]
        break;
 8007ea0:	e00c      	b.n	8007ebc <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ea2:	f7fd f9f5 	bl	8005290 <HAL_RCC_GetSysClockFreq>
 8007ea6:	6178      	str	r0, [r7, #20]
        break;
 8007ea8:	e008      	b.n	8007ebc <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007eae:	617b      	str	r3, [r7, #20]
        break;
 8007eb0:	e004      	b.n	8007ebc <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	76bb      	strb	r3, [r7, #26]
        break;
 8007eba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	f000 8084 	beq.w	8007fcc <UART_SetConfig+0x508>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec8:	4a4a      	ldr	r2, [pc, #296]	; (8007ff4 <UART_SetConfig+0x530>)
 8007eca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ece:	461a      	mov	r2, r3
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ed6:	005a      	lsls	r2, r3, #1
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	085b      	lsrs	r3, r3, #1
 8007ede:	441a      	add	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ee8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	2b0f      	cmp	r3, #15
 8007eee:	d916      	bls.n	8007f1e <UART_SetConfig+0x45a>
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ef6:	d212      	bcs.n	8007f1e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	f023 030f 	bic.w	r3, r3, #15
 8007f00:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	085b      	lsrs	r3, r3, #1
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	f003 0307 	and.w	r3, r3, #7
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	89fb      	ldrh	r3, [r7, #14]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	89fa      	ldrh	r2, [r7, #14]
 8007f1a:	60da      	str	r2, [r3, #12]
 8007f1c:	e056      	b.n	8007fcc <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	76bb      	strb	r3, [r7, #26]
 8007f22:	e053      	b.n	8007fcc <UART_SetConfig+0x508>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f24:	7efb      	ldrb	r3, [r7, #27]
 8007f26:	2b08      	cmp	r3, #8
 8007f28:	d827      	bhi.n	8007f7a <UART_SetConfig+0x4b6>
 8007f2a:	a201      	add	r2, pc, #4	; (adr r2, 8007f30 <UART_SetConfig+0x46c>)
 8007f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f30:	08007f55 	.word	0x08007f55
 8007f34:	08007f5d 	.word	0x08007f5d
 8007f38:	08007f65 	.word	0x08007f65
 8007f3c:	08007f7b 	.word	0x08007f7b
 8007f40:	08007f6b 	.word	0x08007f6b
 8007f44:	08007f7b 	.word	0x08007f7b
 8007f48:	08007f7b 	.word	0x08007f7b
 8007f4c:	08007f7b 	.word	0x08007f7b
 8007f50:	08007f73 	.word	0x08007f73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f54:	f7fd fa0a 	bl	800536c <HAL_RCC_GetPCLK1Freq>
 8007f58:	6178      	str	r0, [r7, #20]
        break;
 8007f5a:	e013      	b.n	8007f84 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f5c:	f7fd fa1c 	bl	8005398 <HAL_RCC_GetPCLK2Freq>
 8007f60:	6178      	str	r0, [r7, #20]
        break;
 8007f62:	e00f      	b.n	8007f84 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f64:	4b24      	ldr	r3, [pc, #144]	; (8007ff8 <UART_SetConfig+0x534>)
 8007f66:	617b      	str	r3, [r7, #20]
        break;
 8007f68:	e00c      	b.n	8007f84 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f6a:	f7fd f991 	bl	8005290 <HAL_RCC_GetSysClockFreq>
 8007f6e:	6178      	str	r0, [r7, #20]
        break;
 8007f70:	e008      	b.n	8007f84 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f76:	617b      	str	r3, [r7, #20]
        break;
 8007f78:	e004      	b.n	8007f84 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	76bb      	strb	r3, [r7, #26]
        break;
 8007f82:	bf00      	nop
    }

    if (pclk != 0U)
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d020      	beq.n	8007fcc <UART_SetConfig+0x508>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8e:	4a19      	ldr	r2, [pc, #100]	; (8007ff4 <UART_SetConfig+0x530>)
 8007f90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f94:	461a      	mov	r2, r3
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	085b      	lsrs	r3, r3, #1
 8007fa2:	441a      	add	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	2b0f      	cmp	r3, #15
 8007fb2:	d909      	bls.n	8007fc8 <UART_SetConfig+0x504>
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fba:	d205      	bcs.n	8007fc8 <UART_SetConfig+0x504>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	60da      	str	r2, [r3, #12]
 8007fc6:	e001      	b.n	8007fcc <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007fe8:	7ebb      	ldrb	r3, [r7, #26]
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3720      	adds	r7, #32
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bdb0      	pop	{r4, r5, r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	0800fd04 	.word	0x0800fd04
 8007ff8:	00f42400 	.word	0x00f42400

08007ffc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008008:	f003 0301 	and.w	r3, r3, #1
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00a      	beq.n	8008026 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	430a      	orrs	r2, r1
 8008024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802a:	f003 0302 	and.w	r3, r3, #2
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00a      	beq.n	8008048 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	430a      	orrs	r2, r1
 8008046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800804c:	f003 0304 	and.w	r3, r3, #4
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00a      	beq.n	800806a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	430a      	orrs	r2, r1
 8008068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800806e:	f003 0308 	and.w	r3, r3, #8
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00a      	beq.n	800808c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	430a      	orrs	r2, r1
 800808a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008090:	f003 0310 	and.w	r3, r3, #16
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00a      	beq.n	80080ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	430a      	orrs	r2, r1
 80080ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b2:	f003 0320 	and.w	r3, r3, #32
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00a      	beq.n	80080d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	430a      	orrs	r2, r1
 80080ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d01a      	beq.n	8008112 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	430a      	orrs	r2, r1
 80080f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080fa:	d10a      	bne.n	8008112 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	430a      	orrs	r2, r1
 8008110:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00a      	beq.n	8008134 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	430a      	orrs	r2, r1
 8008132:	605a      	str	r2, [r3, #4]
  }
}
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af02      	add	r7, sp, #8
 8008146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008150:	f7fb fd96 	bl	8003c80 <HAL_GetTick>
 8008154:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 0308 	and.w	r3, r3, #8
 8008160:	2b08      	cmp	r3, #8
 8008162:	d10e      	bne.n	8008182 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008164:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008168:	9300      	str	r3, [sp, #0]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2200      	movs	r2, #0
 800816e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f82f 	bl	80081d6 <UART_WaitOnFlagUntilTimeout>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d001      	beq.n	8008182 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	e025      	b.n	80081ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 0304 	and.w	r3, r3, #4
 800818c:	2b04      	cmp	r3, #4
 800818e:	d10e      	bne.n	80081ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008190:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008194:	9300      	str	r3, [sp, #0]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2200      	movs	r2, #0
 800819a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 f819 	bl	80081d6 <UART_WaitOnFlagUntilTimeout>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081aa:	2303      	movs	r3, #3
 80081ac:	e00f      	b.n	80081ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2220      	movs	r2, #32
 80081b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2220      	movs	r2, #32
 80081ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b09c      	sub	sp, #112	; 0x70
 80081da:	af00      	add	r7, sp, #0
 80081dc:	60f8      	str	r0, [r7, #12]
 80081de:	60b9      	str	r1, [r7, #8]
 80081e0:	603b      	str	r3, [r7, #0]
 80081e2:	4613      	mov	r3, r2
 80081e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081e6:	e0a9      	b.n	800833c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ee:	f000 80a5 	beq.w	800833c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081f2:	f7fb fd45 	bl	8003c80 <HAL_GetTick>
 80081f6:	4602      	mov	r2, r0
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	1ad3      	subs	r3, r2, r3
 80081fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80081fe:	429a      	cmp	r2, r3
 8008200:	d302      	bcc.n	8008208 <UART_WaitOnFlagUntilTimeout+0x32>
 8008202:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008204:	2b00      	cmp	r3, #0
 8008206:	d140      	bne.n	800828a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008210:	e853 3f00 	ldrex	r3, [r3]
 8008214:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008218:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800821c:	667b      	str	r3, [r7, #100]	; 0x64
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	461a      	mov	r2, r3
 8008224:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008226:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008228:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800822c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800822e:	e841 2300 	strex	r3, r2, [r1]
 8008232:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1e6      	bne.n	8008208 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3308      	adds	r3, #8
 8008240:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008244:	e853 3f00 	ldrex	r3, [r3]
 8008248:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800824a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824c:	f023 0301 	bic.w	r3, r3, #1
 8008250:	663b      	str	r3, [r7, #96]	; 0x60
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3308      	adds	r3, #8
 8008258:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800825a:	64ba      	str	r2, [r7, #72]	; 0x48
 800825c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008260:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008262:	e841 2300 	strex	r3, r2, [r1]
 8008266:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1e5      	bne.n	800823a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2220      	movs	r2, #32
 8008272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2220      	movs	r2, #32
 800827a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008286:	2303      	movs	r3, #3
 8008288:	e069      	b.n	800835e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 0304 	and.w	r3, r3, #4
 8008294:	2b00      	cmp	r3, #0
 8008296:	d051      	beq.n	800833c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	69db      	ldr	r3, [r3, #28]
 800829e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082a6:	d149      	bne.n	800833c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082b0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ba:	e853 3f00 	ldrex	r3, [r3]
 80082be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	461a      	mov	r2, r3
 80082ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082d0:	637b      	str	r3, [r7, #52]	; 0x34
 80082d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082d8:	e841 2300 	strex	r3, r2, [r1]
 80082dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80082de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1e6      	bne.n	80082b2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	3308      	adds	r3, #8
 80082ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	e853 3f00 	ldrex	r3, [r3]
 80082f2:	613b      	str	r3, [r7, #16]
   return(result);
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	f023 0301 	bic.w	r3, r3, #1
 80082fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	3308      	adds	r3, #8
 8008302:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008304:	623a      	str	r2, [r7, #32]
 8008306:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008308:	69f9      	ldr	r1, [r7, #28]
 800830a:	6a3a      	ldr	r2, [r7, #32]
 800830c:	e841 2300 	strex	r3, r2, [r1]
 8008310:	61bb      	str	r3, [r7, #24]
   return(result);
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d1e5      	bne.n	80082e4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2220      	movs	r2, #32
 800831c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2220      	movs	r2, #32
 8008324:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2220      	movs	r2, #32
 800832c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008338:	2303      	movs	r3, #3
 800833a:	e010      	b.n	800835e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	69da      	ldr	r2, [r3, #28]
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	4013      	ands	r3, r2
 8008346:	68ba      	ldr	r2, [r7, #8]
 8008348:	429a      	cmp	r2, r3
 800834a:	bf0c      	ite	eq
 800834c:	2301      	moveq	r3, #1
 800834e:	2300      	movne	r3, #0
 8008350:	b2db      	uxtb	r3, r3
 8008352:	461a      	mov	r2, r3
 8008354:	79fb      	ldrb	r3, [r7, #7]
 8008356:	429a      	cmp	r2, r3
 8008358:	f43f af46 	beq.w	80081e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3770      	adds	r7, #112	; 0x70
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
	...

08008368 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b096      	sub	sp, #88	; 0x58
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	4613      	mov	r3, r2
 8008374:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	68ba      	ldr	r2, [r7, #8]
 800837a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	88fa      	ldrh	r2, [r7, #6]
 8008380:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2200      	movs	r2, #0
 8008388:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2222      	movs	r2, #34	; 0x22
 8008390:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008398:	2b00      	cmp	r3, #0
 800839a:	d02c      	beq.n	80083f6 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083a0:	4a42      	ldr	r2, [pc, #264]	; (80084ac <UART_Start_Receive_DMA+0x144>)
 80083a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083a8:	4a41      	ldr	r2, [pc, #260]	; (80084b0 <UART_Start_Receive_DMA+0x148>)
 80083aa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083b0:	4a40      	ldr	r2, [pc, #256]	; (80084b4 <UART_Start_Receive_DMA+0x14c>)
 80083b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083b8:	2200      	movs	r2, #0
 80083ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	3324      	adds	r3, #36	; 0x24
 80083c6:	4619      	mov	r1, r3
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083cc:	461a      	mov	r2, r3
 80083ce:	88fb      	ldrh	r3, [r7, #6]
 80083d0:	f7fb fe1a 	bl	8004008 <HAL_DMA_Start_IT>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00d      	beq.n	80083f6 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2210      	movs	r2, #16
 80083de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2220      	movs	r2, #32
 80083ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	e055      	b.n	80084a2 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d018      	beq.n	8008438 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800840e:	e853 3f00 	ldrex	r3, [r3]
 8008412:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800841a:	657b      	str	r3, [r7, #84]	; 0x54
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	461a      	mov	r2, r3
 8008422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008424:	64bb      	str	r3, [r7, #72]	; 0x48
 8008426:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008428:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800842a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800842c:	e841 2300 	strex	r3, r2, [r1]
 8008430:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1e6      	bne.n	8008406 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	3308      	adds	r3, #8
 800843e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008442:	e853 3f00 	ldrex	r3, [r3]
 8008446:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844a:	f043 0301 	orr.w	r3, r3, #1
 800844e:	653b      	str	r3, [r7, #80]	; 0x50
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	3308      	adds	r3, #8
 8008456:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008458:	637a      	str	r2, [r7, #52]	; 0x34
 800845a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800845e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008460:	e841 2300 	strex	r3, r2, [r1]
 8008464:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008468:	2b00      	cmp	r3, #0
 800846a:	d1e5      	bne.n	8008438 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	3308      	adds	r3, #8
 8008472:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	e853 3f00 	ldrex	r3, [r3]
 800847a:	613b      	str	r3, [r7, #16]
   return(result);
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	3308      	adds	r3, #8
 800848a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800848c:	623a      	str	r2, [r7, #32]
 800848e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008490:	69f9      	ldr	r1, [r7, #28]
 8008492:	6a3a      	ldr	r2, [r7, #32]
 8008494:	e841 2300 	strex	r3, r2, [r1]
 8008498:	61bb      	str	r3, [r7, #24]
   return(result);
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d1e5      	bne.n	800846c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3758      	adds	r7, #88	; 0x58
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	080086bd 	.word	0x080086bd
 80084b0:	080087e3 	.word	0x080087e3
 80084b4:	0800881b 	.word	0x0800881b

080084b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b08f      	sub	sp, #60	; 0x3c
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c6:	6a3b      	ldr	r3, [r7, #32]
 80084c8:	e853 3f00 	ldrex	r3, [r3]
 80084cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80084d4:	637b      	str	r3, [r7, #52]	; 0x34
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	461a      	mov	r2, r3
 80084dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084e0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084e6:	e841 2300 	strex	r3, r2, [r1]
 80084ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1e6      	bne.n	80084c0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	3308      	adds	r3, #8
 80084f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	e853 3f00 	ldrex	r3, [r3]
 8008500:	60bb      	str	r3, [r7, #8]
   return(result);
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008508:	633b      	str	r3, [r7, #48]	; 0x30
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	3308      	adds	r3, #8
 8008510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008512:	61ba      	str	r2, [r7, #24]
 8008514:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008516:	6979      	ldr	r1, [r7, #20]
 8008518:	69ba      	ldr	r2, [r7, #24]
 800851a:	e841 2300 	strex	r3, r2, [r1]
 800851e:	613b      	str	r3, [r7, #16]
   return(result);
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1e5      	bne.n	80084f2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2220      	movs	r2, #32
 800852a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800852e:	bf00      	nop
 8008530:	373c      	adds	r7, #60	; 0x3c
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr

0800853a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800853a:	b480      	push	{r7}
 800853c:	b095      	sub	sp, #84	; 0x54
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800854a:	e853 3f00 	ldrex	r3, [r3]
 800854e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008552:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	461a      	mov	r2, r3
 800855e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008560:	643b      	str	r3, [r7, #64]	; 0x40
 8008562:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008564:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008566:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008568:	e841 2300 	strex	r3, r2, [r1]
 800856c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800856e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008570:	2b00      	cmp	r3, #0
 8008572:	d1e6      	bne.n	8008542 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	3308      	adds	r3, #8
 800857a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857c:	6a3b      	ldr	r3, [r7, #32]
 800857e:	e853 3f00 	ldrex	r3, [r3]
 8008582:	61fb      	str	r3, [r7, #28]
   return(result);
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800858a:	f023 0301 	bic.w	r3, r3, #1
 800858e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	3308      	adds	r3, #8
 8008596:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008598:	62fa      	str	r2, [r7, #44]	; 0x2c
 800859a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800859e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085a0:	e841 2300 	strex	r3, r2, [r1]
 80085a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d1e3      	bne.n	8008574 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d118      	bne.n	80085e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	e853 3f00 	ldrex	r3, [r3]
 80085c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	f023 0310 	bic.w	r3, r3, #16
 80085c8:	647b      	str	r3, [r7, #68]	; 0x44
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	461a      	mov	r2, r3
 80085d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085d2:	61bb      	str	r3, [r7, #24]
 80085d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d6:	6979      	ldr	r1, [r7, #20]
 80085d8:	69ba      	ldr	r2, [r7, #24]
 80085da:	e841 2300 	strex	r3, r2, [r1]
 80085de:	613b      	str	r3, [r7, #16]
   return(result);
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1e6      	bne.n	80085b4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2220      	movs	r2, #32
 80085ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	671a      	str	r2, [r3, #112]	; 0x70
}
 80085fa:	bf00      	nop
 80085fc:	3754      	adds	r7, #84	; 0x54
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b090      	sub	sp, #64	; 0x40
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008612:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f003 0320 	and.w	r3, r3, #32
 800861e:	2b00      	cmp	r3, #0
 8008620:	d137      	bne.n	8008692 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008624:	2200      	movs	r2, #0
 8008626:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800862a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	3308      	adds	r3, #8
 8008630:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008634:	e853 3f00 	ldrex	r3, [r3]
 8008638:	623b      	str	r3, [r7, #32]
   return(result);
 800863a:	6a3b      	ldr	r3, [r7, #32]
 800863c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008640:	63bb      	str	r3, [r7, #56]	; 0x38
 8008642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	3308      	adds	r3, #8
 8008648:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800864a:	633a      	str	r2, [r7, #48]	; 0x30
 800864c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008652:	e841 2300 	strex	r3, r2, [r1]
 8008656:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1e5      	bne.n	800862a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800865e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	e853 3f00 	ldrex	r3, [r3]
 800866a:	60fb      	str	r3, [r7, #12]
   return(result);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008672:	637b      	str	r3, [r7, #52]	; 0x34
 8008674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	461a      	mov	r2, r3
 800867a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800867c:	61fb      	str	r3, [r7, #28]
 800867e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008680:	69b9      	ldr	r1, [r7, #24]
 8008682:	69fa      	ldr	r2, [r7, #28]
 8008684:	e841 2300 	strex	r3, r2, [r1]
 8008688:	617b      	str	r3, [r7, #20]
   return(result);
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1e6      	bne.n	800865e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008690:	e002      	b.n	8008698 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008692:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008694:	f7ff f9e2 	bl	8007a5c <HAL_UART_TxCpltCallback>
}
 8008698:	bf00      	nop
 800869a:	3740      	adds	r7, #64	; 0x40
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ac:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80086ae:	68f8      	ldr	r0, [r7, #12]
 80086b0:	f7ff f9de 	bl	8007a70 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086b4:	bf00      	nop
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b09c      	sub	sp, #112	; 0x70
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f003 0320 	and.w	r3, r3, #32
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d171      	bne.n	80087bc <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80086d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086da:	2200      	movs	r2, #0
 80086dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086e8:	e853 3f00 	ldrex	r3, [r3]
 80086ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80086ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80086f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	461a      	mov	r2, r3
 80086fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80086fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8008700:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008702:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008704:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008706:	e841 2300 	strex	r3, r2, [r1]
 800870a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800870c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800870e:	2b00      	cmp	r3, #0
 8008710:	d1e6      	bne.n	80086e0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	3308      	adds	r3, #8
 8008718:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871c:	e853 3f00 	ldrex	r3, [r3]
 8008720:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008724:	f023 0301 	bic.w	r3, r3, #1
 8008728:	667b      	str	r3, [r7, #100]	; 0x64
 800872a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	3308      	adds	r3, #8
 8008730:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008732:	647a      	str	r2, [r7, #68]	; 0x44
 8008734:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008736:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008738:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800873a:	e841 2300 	strex	r3, r2, [r1]
 800873e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1e5      	bne.n	8008712 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	3308      	adds	r3, #8
 800874c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008750:	e853 3f00 	ldrex	r3, [r3]
 8008754:	623b      	str	r3, [r7, #32]
   return(result);
 8008756:	6a3b      	ldr	r3, [r7, #32]
 8008758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800875c:	663b      	str	r3, [r7, #96]	; 0x60
 800875e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	3308      	adds	r3, #8
 8008764:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008766:	633a      	str	r2, [r7, #48]	; 0x30
 8008768:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800876c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800876e:	e841 2300 	strex	r3, r2, [r1]
 8008772:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008776:	2b00      	cmp	r3, #0
 8008778:	d1e5      	bne.n	8008746 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800877a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800877c:	2220      	movs	r2, #32
 800877e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008786:	2b01      	cmp	r3, #1
 8008788:	d118      	bne.n	80087bc <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800878a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	e853 3f00 	ldrex	r3, [r3]
 8008796:	60fb      	str	r3, [r7, #12]
   return(result);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f023 0310 	bic.w	r3, r3, #16
 800879e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	461a      	mov	r2, r3
 80087a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087a8:	61fb      	str	r3, [r7, #28]
 80087aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ac:	69b9      	ldr	r1, [r7, #24]
 80087ae:	69fa      	ldr	r2, [r7, #28]
 80087b0:	e841 2300 	strex	r3, r2, [r1]
 80087b4:	617b      	str	r3, [r7, #20]
   return(result);
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1e6      	bne.n	800878a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d107      	bne.n	80087d4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80087ca:	4619      	mov	r1, r3
 80087cc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80087ce:	f7ff f96d 	bl	8007aac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80087d2:	e002      	b.n	80087da <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80087d4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80087d6:	f7f8 fcb5 	bl	8001144 <HAL_UART_RxCpltCallback>
}
 80087da:	bf00      	nop
 80087dc:	3770      	adds	r7, #112	; 0x70
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b084      	sub	sp, #16
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ee:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d109      	bne.n	800880c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80087fe:	085b      	lsrs	r3, r3, #1
 8008800:	b29b      	uxth	r3, r3
 8008802:	4619      	mov	r1, r3
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f7ff f951 	bl	8007aac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800880a:	e002      	b.n	8008812 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800880c:	68f8      	ldr	r0, [r7, #12]
 800880e:	f7ff f939 	bl	8007a84 <HAL_UART_RxHalfCpltCallback>
}
 8008812:	bf00      	nop
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b086      	sub	sp, #24
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008826:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800882e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008836:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008842:	2b80      	cmp	r3, #128	; 0x80
 8008844:	d109      	bne.n	800885a <UART_DMAError+0x40>
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	2b21      	cmp	r3, #33	; 0x21
 800884a:	d106      	bne.n	800885a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	2200      	movs	r2, #0
 8008850:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008854:	6978      	ldr	r0, [r7, #20]
 8008856:	f7ff fe2f 	bl	80084b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008864:	2b40      	cmp	r3, #64	; 0x40
 8008866:	d109      	bne.n	800887c <UART_DMAError+0x62>
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2b22      	cmp	r3, #34	; 0x22
 800886c:	d106      	bne.n	800887c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	2200      	movs	r2, #0
 8008872:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008876:	6978      	ldr	r0, [r7, #20]
 8008878:	f7ff fe5f 	bl	800853a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008882:	f043 0210 	orr.w	r2, r3, #16
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800888c:	6978      	ldr	r0, [r7, #20]
 800888e:	f7ff f903 	bl	8007a98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008892:	bf00      	nop
 8008894:	3718      	adds	r7, #24
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b084      	sub	sp, #16
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088b8:	68f8      	ldr	r0, [r7, #12]
 80088ba:	f7ff f8ed 	bl	8007a98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088be:	bf00      	nop
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b088      	sub	sp, #32
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	e853 3f00 	ldrex	r3, [r3]
 80088da:	60bb      	str	r3, [r7, #8]
   return(result);
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088e2:	61fb      	str	r3, [r7, #28]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	461a      	mov	r2, r3
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	61bb      	str	r3, [r7, #24]
 80088ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f0:	6979      	ldr	r1, [r7, #20]
 80088f2:	69ba      	ldr	r2, [r7, #24]
 80088f4:	e841 2300 	strex	r3, r2, [r1]
 80088f8:	613b      	str	r3, [r7, #16]
   return(result);
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d1e6      	bne.n	80088ce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2220      	movs	r2, #32
 8008904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f7ff f8a4 	bl	8007a5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008914:	bf00      	nop
 8008916:	3720      	adds	r7, #32
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008924:	bf00      	nop
 8008926:	370c      	adds	r7, #12
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008938:	bf00      	nop
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800894c:	bf00      	nop
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008958:	b480      	push	{r7}
 800895a:	b085      	sub	sp, #20
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008966:	2b01      	cmp	r3, #1
 8008968:	d101      	bne.n	800896e <HAL_UARTEx_DisableFifoMode+0x16>
 800896a:	2302      	movs	r3, #2
 800896c:	e027      	b.n	80089be <HAL_UARTEx_DisableFifoMode+0x66>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2201      	movs	r2, #1
 8008972:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2224      	movs	r2, #36	; 0x24
 800897a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f022 0201 	bic.w	r2, r2, #1
 8008994:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800899c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2220      	movs	r2, #32
 80089b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3714      	adds	r7, #20
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b084      	sub	sp, #16
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d101      	bne.n	80089e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80089de:	2302      	movs	r3, #2
 80089e0:	e02d      	b.n	8008a3e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2201      	movs	r2, #1
 80089e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2224      	movs	r2, #36	; 0x24
 80089ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f022 0201 	bic.w	r2, r2, #1
 8008a08:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	683a      	ldr	r2, [r7, #0]
 8008a1a:	430a      	orrs	r2, r1
 8008a1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 f850 	bl	8008ac4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2220      	movs	r2, #32
 8008a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b084      	sub	sp, #16
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
 8008a4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d101      	bne.n	8008a5e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008a5a:	2302      	movs	r3, #2
 8008a5c:	e02d      	b.n	8008aba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2201      	movs	r2, #1
 8008a62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2224      	movs	r2, #36	; 0x24
 8008a6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f022 0201 	bic.w	r2, r2, #1
 8008a84:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	683a      	ldr	r2, [r7, #0]
 8008a96:	430a      	orrs	r2, r1
 8008a98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f812 	bl	8008ac4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	68fa      	ldr	r2, [r7, #12]
 8008aa6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2220      	movs	r2, #32
 8008aac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
	...

08008ac4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d108      	bne.n	8008ae6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008ae4:	e031      	b.n	8008b4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008ae6:	2308      	movs	r3, #8
 8008ae8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008aea:	2308      	movs	r3, #8
 8008aec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	0e5b      	lsrs	r3, r3, #25
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	f003 0307 	and.w	r3, r3, #7
 8008afc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	0f5b      	lsrs	r3, r3, #29
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	f003 0307 	and.w	r3, r3, #7
 8008b0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b0e:	7bbb      	ldrb	r3, [r7, #14]
 8008b10:	7b3a      	ldrb	r2, [r7, #12]
 8008b12:	4911      	ldr	r1, [pc, #68]	; (8008b58 <UARTEx_SetNbDataToProcess+0x94>)
 8008b14:	5c8a      	ldrb	r2, [r1, r2]
 8008b16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008b1a:	7b3a      	ldrb	r2, [r7, #12]
 8008b1c:	490f      	ldr	r1, [pc, #60]	; (8008b5c <UARTEx_SetNbDataToProcess+0x98>)
 8008b1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b20:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b24:	b29a      	uxth	r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b2c:	7bfb      	ldrb	r3, [r7, #15]
 8008b2e:	7b7a      	ldrb	r2, [r7, #13]
 8008b30:	4909      	ldr	r1, [pc, #36]	; (8008b58 <UARTEx_SetNbDataToProcess+0x94>)
 8008b32:	5c8a      	ldrb	r2, [r1, r2]
 8008b34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008b38:	7b7a      	ldrb	r2, [r7, #13]
 8008b3a:	4908      	ldr	r1, [pc, #32]	; (8008b5c <UARTEx_SetNbDataToProcess+0x98>)
 8008b3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b42:	b29a      	uxth	r2, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008b4a:	bf00      	nop
 8008b4c:	3714      	adds	r7, #20
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	0800fd1c 	.word	0x0800fd1c
 8008b5c:	0800fd24 	.word	0x0800fd24

08008b60 <__errno>:
 8008b60:	4b01      	ldr	r3, [pc, #4]	; (8008b68 <__errno+0x8>)
 8008b62:	6818      	ldr	r0, [r3, #0]
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	2000003c 	.word	0x2000003c

08008b6c <__libc_init_array>:
 8008b6c:	b570      	push	{r4, r5, r6, lr}
 8008b6e:	4d0d      	ldr	r5, [pc, #52]	; (8008ba4 <__libc_init_array+0x38>)
 8008b70:	4c0d      	ldr	r4, [pc, #52]	; (8008ba8 <__libc_init_array+0x3c>)
 8008b72:	1b64      	subs	r4, r4, r5
 8008b74:	10a4      	asrs	r4, r4, #2
 8008b76:	2600      	movs	r6, #0
 8008b78:	42a6      	cmp	r6, r4
 8008b7a:	d109      	bne.n	8008b90 <__libc_init_array+0x24>
 8008b7c:	4d0b      	ldr	r5, [pc, #44]	; (8008bac <__libc_init_array+0x40>)
 8008b7e:	4c0c      	ldr	r4, [pc, #48]	; (8008bb0 <__libc_init_array+0x44>)
 8008b80:	f007 f86c 	bl	800fc5c <_init>
 8008b84:	1b64      	subs	r4, r4, r5
 8008b86:	10a4      	asrs	r4, r4, #2
 8008b88:	2600      	movs	r6, #0
 8008b8a:	42a6      	cmp	r6, r4
 8008b8c:	d105      	bne.n	8008b9a <__libc_init_array+0x2e>
 8008b8e:	bd70      	pop	{r4, r5, r6, pc}
 8008b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b94:	4798      	blx	r3
 8008b96:	3601      	adds	r6, #1
 8008b98:	e7ee      	b.n	8008b78 <__libc_init_array+0xc>
 8008b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b9e:	4798      	blx	r3
 8008ba0:	3601      	adds	r6, #1
 8008ba2:	e7f2      	b.n	8008b8a <__libc_init_array+0x1e>
 8008ba4:	08010478 	.word	0x08010478
 8008ba8:	08010478 	.word	0x08010478
 8008bac:	08010478 	.word	0x08010478
 8008bb0:	0801047c 	.word	0x0801047c

08008bb4 <memset>:
 8008bb4:	4402      	add	r2, r0
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d100      	bne.n	8008bbe <memset+0xa>
 8008bbc:	4770      	bx	lr
 8008bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8008bc2:	e7f9      	b.n	8008bb8 <memset+0x4>

08008bc4 <__cvt>:
 8008bc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bc8:	ec55 4b10 	vmov	r4, r5, d0
 8008bcc:	2d00      	cmp	r5, #0
 8008bce:	460e      	mov	r6, r1
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	462b      	mov	r3, r5
 8008bd4:	bfbb      	ittet	lt
 8008bd6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008bda:	461d      	movlt	r5, r3
 8008bdc:	2300      	movge	r3, #0
 8008bde:	232d      	movlt	r3, #45	; 0x2d
 8008be0:	700b      	strb	r3, [r1, #0]
 8008be2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008be4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008be8:	4691      	mov	r9, r2
 8008bea:	f023 0820 	bic.w	r8, r3, #32
 8008bee:	bfbc      	itt	lt
 8008bf0:	4622      	movlt	r2, r4
 8008bf2:	4614      	movlt	r4, r2
 8008bf4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008bf8:	d005      	beq.n	8008c06 <__cvt+0x42>
 8008bfa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008bfe:	d100      	bne.n	8008c02 <__cvt+0x3e>
 8008c00:	3601      	adds	r6, #1
 8008c02:	2102      	movs	r1, #2
 8008c04:	e000      	b.n	8008c08 <__cvt+0x44>
 8008c06:	2103      	movs	r1, #3
 8008c08:	ab03      	add	r3, sp, #12
 8008c0a:	9301      	str	r3, [sp, #4]
 8008c0c:	ab02      	add	r3, sp, #8
 8008c0e:	9300      	str	r3, [sp, #0]
 8008c10:	ec45 4b10 	vmov	d0, r4, r5
 8008c14:	4653      	mov	r3, sl
 8008c16:	4632      	mov	r2, r6
 8008c18:	f001 fdca 	bl	800a7b0 <_dtoa_r>
 8008c1c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008c20:	4607      	mov	r7, r0
 8008c22:	d102      	bne.n	8008c2a <__cvt+0x66>
 8008c24:	f019 0f01 	tst.w	r9, #1
 8008c28:	d022      	beq.n	8008c70 <__cvt+0xac>
 8008c2a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008c2e:	eb07 0906 	add.w	r9, r7, r6
 8008c32:	d110      	bne.n	8008c56 <__cvt+0x92>
 8008c34:	783b      	ldrb	r3, [r7, #0]
 8008c36:	2b30      	cmp	r3, #48	; 0x30
 8008c38:	d10a      	bne.n	8008c50 <__cvt+0x8c>
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	4620      	mov	r0, r4
 8008c40:	4629      	mov	r1, r5
 8008c42:	f7f7 ff69 	bl	8000b18 <__aeabi_dcmpeq>
 8008c46:	b918      	cbnz	r0, 8008c50 <__cvt+0x8c>
 8008c48:	f1c6 0601 	rsb	r6, r6, #1
 8008c4c:	f8ca 6000 	str.w	r6, [sl]
 8008c50:	f8da 3000 	ldr.w	r3, [sl]
 8008c54:	4499      	add	r9, r3
 8008c56:	2200      	movs	r2, #0
 8008c58:	2300      	movs	r3, #0
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	4629      	mov	r1, r5
 8008c5e:	f7f7 ff5b 	bl	8000b18 <__aeabi_dcmpeq>
 8008c62:	b108      	cbz	r0, 8008c68 <__cvt+0xa4>
 8008c64:	f8cd 900c 	str.w	r9, [sp, #12]
 8008c68:	2230      	movs	r2, #48	; 0x30
 8008c6a:	9b03      	ldr	r3, [sp, #12]
 8008c6c:	454b      	cmp	r3, r9
 8008c6e:	d307      	bcc.n	8008c80 <__cvt+0xbc>
 8008c70:	9b03      	ldr	r3, [sp, #12]
 8008c72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c74:	1bdb      	subs	r3, r3, r7
 8008c76:	4638      	mov	r0, r7
 8008c78:	6013      	str	r3, [r2, #0]
 8008c7a:	b004      	add	sp, #16
 8008c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c80:	1c59      	adds	r1, r3, #1
 8008c82:	9103      	str	r1, [sp, #12]
 8008c84:	701a      	strb	r2, [r3, #0]
 8008c86:	e7f0      	b.n	8008c6a <__cvt+0xa6>

08008c88 <__exponent>:
 8008c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2900      	cmp	r1, #0
 8008c8e:	bfb8      	it	lt
 8008c90:	4249      	neglt	r1, r1
 8008c92:	f803 2b02 	strb.w	r2, [r3], #2
 8008c96:	bfb4      	ite	lt
 8008c98:	222d      	movlt	r2, #45	; 0x2d
 8008c9a:	222b      	movge	r2, #43	; 0x2b
 8008c9c:	2909      	cmp	r1, #9
 8008c9e:	7042      	strb	r2, [r0, #1]
 8008ca0:	dd2a      	ble.n	8008cf8 <__exponent+0x70>
 8008ca2:	f10d 0407 	add.w	r4, sp, #7
 8008ca6:	46a4      	mov	ip, r4
 8008ca8:	270a      	movs	r7, #10
 8008caa:	46a6      	mov	lr, r4
 8008cac:	460a      	mov	r2, r1
 8008cae:	fb91 f6f7 	sdiv	r6, r1, r7
 8008cb2:	fb07 1516 	mls	r5, r7, r6, r1
 8008cb6:	3530      	adds	r5, #48	; 0x30
 8008cb8:	2a63      	cmp	r2, #99	; 0x63
 8008cba:	f104 34ff 	add.w	r4, r4, #4294967295
 8008cbe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008cc2:	4631      	mov	r1, r6
 8008cc4:	dcf1      	bgt.n	8008caa <__exponent+0x22>
 8008cc6:	3130      	adds	r1, #48	; 0x30
 8008cc8:	f1ae 0502 	sub.w	r5, lr, #2
 8008ccc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008cd0:	1c44      	adds	r4, r0, #1
 8008cd2:	4629      	mov	r1, r5
 8008cd4:	4561      	cmp	r1, ip
 8008cd6:	d30a      	bcc.n	8008cee <__exponent+0x66>
 8008cd8:	f10d 0209 	add.w	r2, sp, #9
 8008cdc:	eba2 020e 	sub.w	r2, r2, lr
 8008ce0:	4565      	cmp	r5, ip
 8008ce2:	bf88      	it	hi
 8008ce4:	2200      	movhi	r2, #0
 8008ce6:	4413      	add	r3, r2
 8008ce8:	1a18      	subs	r0, r3, r0
 8008cea:	b003      	add	sp, #12
 8008cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cf2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008cf6:	e7ed      	b.n	8008cd4 <__exponent+0x4c>
 8008cf8:	2330      	movs	r3, #48	; 0x30
 8008cfa:	3130      	adds	r1, #48	; 0x30
 8008cfc:	7083      	strb	r3, [r0, #2]
 8008cfe:	70c1      	strb	r1, [r0, #3]
 8008d00:	1d03      	adds	r3, r0, #4
 8008d02:	e7f1      	b.n	8008ce8 <__exponent+0x60>

08008d04 <_printf_float>:
 8008d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d08:	ed2d 8b02 	vpush	{d8}
 8008d0c:	b08d      	sub	sp, #52	; 0x34
 8008d0e:	460c      	mov	r4, r1
 8008d10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008d14:	4616      	mov	r6, r2
 8008d16:	461f      	mov	r7, r3
 8008d18:	4605      	mov	r5, r0
 8008d1a:	f002 fea5 	bl	800ba68 <_localeconv_r>
 8008d1e:	f8d0 a000 	ldr.w	sl, [r0]
 8008d22:	4650      	mov	r0, sl
 8008d24:	f7f7 fa7c 	bl	8000220 <strlen>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	930a      	str	r3, [sp, #40]	; 0x28
 8008d2c:	6823      	ldr	r3, [r4, #0]
 8008d2e:	9305      	str	r3, [sp, #20]
 8008d30:	f8d8 3000 	ldr.w	r3, [r8]
 8008d34:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008d38:	3307      	adds	r3, #7
 8008d3a:	f023 0307 	bic.w	r3, r3, #7
 8008d3e:	f103 0208 	add.w	r2, r3, #8
 8008d42:	f8c8 2000 	str.w	r2, [r8]
 8008d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008d4e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008d52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008d56:	9307      	str	r3, [sp, #28]
 8008d58:	f8cd 8018 	str.w	r8, [sp, #24]
 8008d5c:	ee08 0a10 	vmov	s16, r0
 8008d60:	4b9f      	ldr	r3, [pc, #636]	; (8008fe0 <_printf_float+0x2dc>)
 8008d62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d66:	f04f 32ff 	mov.w	r2, #4294967295
 8008d6a:	f7f7 ff07 	bl	8000b7c <__aeabi_dcmpun>
 8008d6e:	bb88      	cbnz	r0, 8008dd4 <_printf_float+0xd0>
 8008d70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d74:	4b9a      	ldr	r3, [pc, #616]	; (8008fe0 <_printf_float+0x2dc>)
 8008d76:	f04f 32ff 	mov.w	r2, #4294967295
 8008d7a:	f7f7 fee1 	bl	8000b40 <__aeabi_dcmple>
 8008d7e:	bb48      	cbnz	r0, 8008dd4 <_printf_float+0xd0>
 8008d80:	2200      	movs	r2, #0
 8008d82:	2300      	movs	r3, #0
 8008d84:	4640      	mov	r0, r8
 8008d86:	4649      	mov	r1, r9
 8008d88:	f7f7 fed0 	bl	8000b2c <__aeabi_dcmplt>
 8008d8c:	b110      	cbz	r0, 8008d94 <_printf_float+0x90>
 8008d8e:	232d      	movs	r3, #45	; 0x2d
 8008d90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d94:	4b93      	ldr	r3, [pc, #588]	; (8008fe4 <_printf_float+0x2e0>)
 8008d96:	4894      	ldr	r0, [pc, #592]	; (8008fe8 <_printf_float+0x2e4>)
 8008d98:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008d9c:	bf94      	ite	ls
 8008d9e:	4698      	movls	r8, r3
 8008da0:	4680      	movhi	r8, r0
 8008da2:	2303      	movs	r3, #3
 8008da4:	6123      	str	r3, [r4, #16]
 8008da6:	9b05      	ldr	r3, [sp, #20]
 8008da8:	f023 0204 	bic.w	r2, r3, #4
 8008dac:	6022      	str	r2, [r4, #0]
 8008dae:	f04f 0900 	mov.w	r9, #0
 8008db2:	9700      	str	r7, [sp, #0]
 8008db4:	4633      	mov	r3, r6
 8008db6:	aa0b      	add	r2, sp, #44	; 0x2c
 8008db8:	4621      	mov	r1, r4
 8008dba:	4628      	mov	r0, r5
 8008dbc:	f000 f9d8 	bl	8009170 <_printf_common>
 8008dc0:	3001      	adds	r0, #1
 8008dc2:	f040 8090 	bne.w	8008ee6 <_printf_float+0x1e2>
 8008dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8008dca:	b00d      	add	sp, #52	; 0x34
 8008dcc:	ecbd 8b02 	vpop	{d8}
 8008dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dd4:	4642      	mov	r2, r8
 8008dd6:	464b      	mov	r3, r9
 8008dd8:	4640      	mov	r0, r8
 8008dda:	4649      	mov	r1, r9
 8008ddc:	f7f7 fece 	bl	8000b7c <__aeabi_dcmpun>
 8008de0:	b140      	cbz	r0, 8008df4 <_printf_float+0xf0>
 8008de2:	464b      	mov	r3, r9
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	bfbc      	itt	lt
 8008de8:	232d      	movlt	r3, #45	; 0x2d
 8008dea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008dee:	487f      	ldr	r0, [pc, #508]	; (8008fec <_printf_float+0x2e8>)
 8008df0:	4b7f      	ldr	r3, [pc, #508]	; (8008ff0 <_printf_float+0x2ec>)
 8008df2:	e7d1      	b.n	8008d98 <_printf_float+0x94>
 8008df4:	6863      	ldr	r3, [r4, #4]
 8008df6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008dfa:	9206      	str	r2, [sp, #24]
 8008dfc:	1c5a      	adds	r2, r3, #1
 8008dfe:	d13f      	bne.n	8008e80 <_printf_float+0x17c>
 8008e00:	2306      	movs	r3, #6
 8008e02:	6063      	str	r3, [r4, #4]
 8008e04:	9b05      	ldr	r3, [sp, #20]
 8008e06:	6861      	ldr	r1, [r4, #4]
 8008e08:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	9303      	str	r3, [sp, #12]
 8008e10:	ab0a      	add	r3, sp, #40	; 0x28
 8008e12:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008e16:	ab09      	add	r3, sp, #36	; 0x24
 8008e18:	ec49 8b10 	vmov	d0, r8, r9
 8008e1c:	9300      	str	r3, [sp, #0]
 8008e1e:	6022      	str	r2, [r4, #0]
 8008e20:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008e24:	4628      	mov	r0, r5
 8008e26:	f7ff fecd 	bl	8008bc4 <__cvt>
 8008e2a:	9b06      	ldr	r3, [sp, #24]
 8008e2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e2e:	2b47      	cmp	r3, #71	; 0x47
 8008e30:	4680      	mov	r8, r0
 8008e32:	d108      	bne.n	8008e46 <_printf_float+0x142>
 8008e34:	1cc8      	adds	r0, r1, #3
 8008e36:	db02      	blt.n	8008e3e <_printf_float+0x13a>
 8008e38:	6863      	ldr	r3, [r4, #4]
 8008e3a:	4299      	cmp	r1, r3
 8008e3c:	dd41      	ble.n	8008ec2 <_printf_float+0x1be>
 8008e3e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008e42:	fa5f fb8b 	uxtb.w	fp, fp
 8008e46:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008e4a:	d820      	bhi.n	8008e8e <_printf_float+0x18a>
 8008e4c:	3901      	subs	r1, #1
 8008e4e:	465a      	mov	r2, fp
 8008e50:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008e54:	9109      	str	r1, [sp, #36]	; 0x24
 8008e56:	f7ff ff17 	bl	8008c88 <__exponent>
 8008e5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e5c:	1813      	adds	r3, r2, r0
 8008e5e:	2a01      	cmp	r2, #1
 8008e60:	4681      	mov	r9, r0
 8008e62:	6123      	str	r3, [r4, #16]
 8008e64:	dc02      	bgt.n	8008e6c <_printf_float+0x168>
 8008e66:	6822      	ldr	r2, [r4, #0]
 8008e68:	07d2      	lsls	r2, r2, #31
 8008e6a:	d501      	bpl.n	8008e70 <_printf_float+0x16c>
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	6123      	str	r3, [r4, #16]
 8008e70:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d09c      	beq.n	8008db2 <_printf_float+0xae>
 8008e78:	232d      	movs	r3, #45	; 0x2d
 8008e7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e7e:	e798      	b.n	8008db2 <_printf_float+0xae>
 8008e80:	9a06      	ldr	r2, [sp, #24]
 8008e82:	2a47      	cmp	r2, #71	; 0x47
 8008e84:	d1be      	bne.n	8008e04 <_printf_float+0x100>
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1bc      	bne.n	8008e04 <_printf_float+0x100>
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e7b9      	b.n	8008e02 <_printf_float+0xfe>
 8008e8e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008e92:	d118      	bne.n	8008ec6 <_printf_float+0x1c2>
 8008e94:	2900      	cmp	r1, #0
 8008e96:	6863      	ldr	r3, [r4, #4]
 8008e98:	dd0b      	ble.n	8008eb2 <_printf_float+0x1ae>
 8008e9a:	6121      	str	r1, [r4, #16]
 8008e9c:	b913      	cbnz	r3, 8008ea4 <_printf_float+0x1a0>
 8008e9e:	6822      	ldr	r2, [r4, #0]
 8008ea0:	07d0      	lsls	r0, r2, #31
 8008ea2:	d502      	bpl.n	8008eaa <_printf_float+0x1a6>
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	440b      	add	r3, r1
 8008ea8:	6123      	str	r3, [r4, #16]
 8008eaa:	65a1      	str	r1, [r4, #88]	; 0x58
 8008eac:	f04f 0900 	mov.w	r9, #0
 8008eb0:	e7de      	b.n	8008e70 <_printf_float+0x16c>
 8008eb2:	b913      	cbnz	r3, 8008eba <_printf_float+0x1b6>
 8008eb4:	6822      	ldr	r2, [r4, #0]
 8008eb6:	07d2      	lsls	r2, r2, #31
 8008eb8:	d501      	bpl.n	8008ebe <_printf_float+0x1ba>
 8008eba:	3302      	adds	r3, #2
 8008ebc:	e7f4      	b.n	8008ea8 <_printf_float+0x1a4>
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e7f2      	b.n	8008ea8 <_printf_float+0x1a4>
 8008ec2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008ec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ec8:	4299      	cmp	r1, r3
 8008eca:	db05      	blt.n	8008ed8 <_printf_float+0x1d4>
 8008ecc:	6823      	ldr	r3, [r4, #0]
 8008ece:	6121      	str	r1, [r4, #16]
 8008ed0:	07d8      	lsls	r0, r3, #31
 8008ed2:	d5ea      	bpl.n	8008eaa <_printf_float+0x1a6>
 8008ed4:	1c4b      	adds	r3, r1, #1
 8008ed6:	e7e7      	b.n	8008ea8 <_printf_float+0x1a4>
 8008ed8:	2900      	cmp	r1, #0
 8008eda:	bfd4      	ite	le
 8008edc:	f1c1 0202 	rsble	r2, r1, #2
 8008ee0:	2201      	movgt	r2, #1
 8008ee2:	4413      	add	r3, r2
 8008ee4:	e7e0      	b.n	8008ea8 <_printf_float+0x1a4>
 8008ee6:	6823      	ldr	r3, [r4, #0]
 8008ee8:	055a      	lsls	r2, r3, #21
 8008eea:	d407      	bmi.n	8008efc <_printf_float+0x1f8>
 8008eec:	6923      	ldr	r3, [r4, #16]
 8008eee:	4642      	mov	r2, r8
 8008ef0:	4631      	mov	r1, r6
 8008ef2:	4628      	mov	r0, r5
 8008ef4:	47b8      	blx	r7
 8008ef6:	3001      	adds	r0, #1
 8008ef8:	d12c      	bne.n	8008f54 <_printf_float+0x250>
 8008efa:	e764      	b.n	8008dc6 <_printf_float+0xc2>
 8008efc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008f00:	f240 80e0 	bls.w	80090c4 <_printf_float+0x3c0>
 8008f04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f08:	2200      	movs	r2, #0
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	f7f7 fe04 	bl	8000b18 <__aeabi_dcmpeq>
 8008f10:	2800      	cmp	r0, #0
 8008f12:	d034      	beq.n	8008f7e <_printf_float+0x27a>
 8008f14:	4a37      	ldr	r2, [pc, #220]	; (8008ff4 <_printf_float+0x2f0>)
 8008f16:	2301      	movs	r3, #1
 8008f18:	4631      	mov	r1, r6
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	47b8      	blx	r7
 8008f1e:	3001      	adds	r0, #1
 8008f20:	f43f af51 	beq.w	8008dc6 <_printf_float+0xc2>
 8008f24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	db02      	blt.n	8008f32 <_printf_float+0x22e>
 8008f2c:	6823      	ldr	r3, [r4, #0]
 8008f2e:	07d8      	lsls	r0, r3, #31
 8008f30:	d510      	bpl.n	8008f54 <_printf_float+0x250>
 8008f32:	ee18 3a10 	vmov	r3, s16
 8008f36:	4652      	mov	r2, sl
 8008f38:	4631      	mov	r1, r6
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	47b8      	blx	r7
 8008f3e:	3001      	adds	r0, #1
 8008f40:	f43f af41 	beq.w	8008dc6 <_printf_float+0xc2>
 8008f44:	f04f 0800 	mov.w	r8, #0
 8008f48:	f104 091a 	add.w	r9, r4, #26
 8008f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	4543      	cmp	r3, r8
 8008f52:	dc09      	bgt.n	8008f68 <_printf_float+0x264>
 8008f54:	6823      	ldr	r3, [r4, #0]
 8008f56:	079b      	lsls	r3, r3, #30
 8008f58:	f100 8105 	bmi.w	8009166 <_printf_float+0x462>
 8008f5c:	68e0      	ldr	r0, [r4, #12]
 8008f5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f60:	4298      	cmp	r0, r3
 8008f62:	bfb8      	it	lt
 8008f64:	4618      	movlt	r0, r3
 8008f66:	e730      	b.n	8008dca <_printf_float+0xc6>
 8008f68:	2301      	movs	r3, #1
 8008f6a:	464a      	mov	r2, r9
 8008f6c:	4631      	mov	r1, r6
 8008f6e:	4628      	mov	r0, r5
 8008f70:	47b8      	blx	r7
 8008f72:	3001      	adds	r0, #1
 8008f74:	f43f af27 	beq.w	8008dc6 <_printf_float+0xc2>
 8008f78:	f108 0801 	add.w	r8, r8, #1
 8008f7c:	e7e6      	b.n	8008f4c <_printf_float+0x248>
 8008f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	dc39      	bgt.n	8008ff8 <_printf_float+0x2f4>
 8008f84:	4a1b      	ldr	r2, [pc, #108]	; (8008ff4 <_printf_float+0x2f0>)
 8008f86:	2301      	movs	r3, #1
 8008f88:	4631      	mov	r1, r6
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	47b8      	blx	r7
 8008f8e:	3001      	adds	r0, #1
 8008f90:	f43f af19 	beq.w	8008dc6 <_printf_float+0xc2>
 8008f94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	d102      	bne.n	8008fa2 <_printf_float+0x29e>
 8008f9c:	6823      	ldr	r3, [r4, #0]
 8008f9e:	07d9      	lsls	r1, r3, #31
 8008fa0:	d5d8      	bpl.n	8008f54 <_printf_float+0x250>
 8008fa2:	ee18 3a10 	vmov	r3, s16
 8008fa6:	4652      	mov	r2, sl
 8008fa8:	4631      	mov	r1, r6
 8008faa:	4628      	mov	r0, r5
 8008fac:	47b8      	blx	r7
 8008fae:	3001      	adds	r0, #1
 8008fb0:	f43f af09 	beq.w	8008dc6 <_printf_float+0xc2>
 8008fb4:	f04f 0900 	mov.w	r9, #0
 8008fb8:	f104 0a1a 	add.w	sl, r4, #26
 8008fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fbe:	425b      	negs	r3, r3
 8008fc0:	454b      	cmp	r3, r9
 8008fc2:	dc01      	bgt.n	8008fc8 <_printf_float+0x2c4>
 8008fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fc6:	e792      	b.n	8008eee <_printf_float+0x1ea>
 8008fc8:	2301      	movs	r3, #1
 8008fca:	4652      	mov	r2, sl
 8008fcc:	4631      	mov	r1, r6
 8008fce:	4628      	mov	r0, r5
 8008fd0:	47b8      	blx	r7
 8008fd2:	3001      	adds	r0, #1
 8008fd4:	f43f aef7 	beq.w	8008dc6 <_printf_float+0xc2>
 8008fd8:	f109 0901 	add.w	r9, r9, #1
 8008fdc:	e7ee      	b.n	8008fbc <_printf_float+0x2b8>
 8008fde:	bf00      	nop
 8008fe0:	7fefffff 	.word	0x7fefffff
 8008fe4:	0800fd30 	.word	0x0800fd30
 8008fe8:	0800fd34 	.word	0x0800fd34
 8008fec:	0800fd3c 	.word	0x0800fd3c
 8008ff0:	0800fd38 	.word	0x0800fd38
 8008ff4:	0800fd40 	.word	0x0800fd40
 8008ff8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ffa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	bfa8      	it	ge
 8009000:	461a      	movge	r2, r3
 8009002:	2a00      	cmp	r2, #0
 8009004:	4691      	mov	r9, r2
 8009006:	dc37      	bgt.n	8009078 <_printf_float+0x374>
 8009008:	f04f 0b00 	mov.w	fp, #0
 800900c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009010:	f104 021a 	add.w	r2, r4, #26
 8009014:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009016:	9305      	str	r3, [sp, #20]
 8009018:	eba3 0309 	sub.w	r3, r3, r9
 800901c:	455b      	cmp	r3, fp
 800901e:	dc33      	bgt.n	8009088 <_printf_float+0x384>
 8009020:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009024:	429a      	cmp	r2, r3
 8009026:	db3b      	blt.n	80090a0 <_printf_float+0x39c>
 8009028:	6823      	ldr	r3, [r4, #0]
 800902a:	07da      	lsls	r2, r3, #31
 800902c:	d438      	bmi.n	80090a0 <_printf_float+0x39c>
 800902e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009030:	9b05      	ldr	r3, [sp, #20]
 8009032:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009034:	1ad3      	subs	r3, r2, r3
 8009036:	eba2 0901 	sub.w	r9, r2, r1
 800903a:	4599      	cmp	r9, r3
 800903c:	bfa8      	it	ge
 800903e:	4699      	movge	r9, r3
 8009040:	f1b9 0f00 	cmp.w	r9, #0
 8009044:	dc35      	bgt.n	80090b2 <_printf_float+0x3ae>
 8009046:	f04f 0800 	mov.w	r8, #0
 800904a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800904e:	f104 0a1a 	add.w	sl, r4, #26
 8009052:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009056:	1a9b      	subs	r3, r3, r2
 8009058:	eba3 0309 	sub.w	r3, r3, r9
 800905c:	4543      	cmp	r3, r8
 800905e:	f77f af79 	ble.w	8008f54 <_printf_float+0x250>
 8009062:	2301      	movs	r3, #1
 8009064:	4652      	mov	r2, sl
 8009066:	4631      	mov	r1, r6
 8009068:	4628      	mov	r0, r5
 800906a:	47b8      	blx	r7
 800906c:	3001      	adds	r0, #1
 800906e:	f43f aeaa 	beq.w	8008dc6 <_printf_float+0xc2>
 8009072:	f108 0801 	add.w	r8, r8, #1
 8009076:	e7ec      	b.n	8009052 <_printf_float+0x34e>
 8009078:	4613      	mov	r3, r2
 800907a:	4631      	mov	r1, r6
 800907c:	4642      	mov	r2, r8
 800907e:	4628      	mov	r0, r5
 8009080:	47b8      	blx	r7
 8009082:	3001      	adds	r0, #1
 8009084:	d1c0      	bne.n	8009008 <_printf_float+0x304>
 8009086:	e69e      	b.n	8008dc6 <_printf_float+0xc2>
 8009088:	2301      	movs	r3, #1
 800908a:	4631      	mov	r1, r6
 800908c:	4628      	mov	r0, r5
 800908e:	9205      	str	r2, [sp, #20]
 8009090:	47b8      	blx	r7
 8009092:	3001      	adds	r0, #1
 8009094:	f43f ae97 	beq.w	8008dc6 <_printf_float+0xc2>
 8009098:	9a05      	ldr	r2, [sp, #20]
 800909a:	f10b 0b01 	add.w	fp, fp, #1
 800909e:	e7b9      	b.n	8009014 <_printf_float+0x310>
 80090a0:	ee18 3a10 	vmov	r3, s16
 80090a4:	4652      	mov	r2, sl
 80090a6:	4631      	mov	r1, r6
 80090a8:	4628      	mov	r0, r5
 80090aa:	47b8      	blx	r7
 80090ac:	3001      	adds	r0, #1
 80090ae:	d1be      	bne.n	800902e <_printf_float+0x32a>
 80090b0:	e689      	b.n	8008dc6 <_printf_float+0xc2>
 80090b2:	9a05      	ldr	r2, [sp, #20]
 80090b4:	464b      	mov	r3, r9
 80090b6:	4442      	add	r2, r8
 80090b8:	4631      	mov	r1, r6
 80090ba:	4628      	mov	r0, r5
 80090bc:	47b8      	blx	r7
 80090be:	3001      	adds	r0, #1
 80090c0:	d1c1      	bne.n	8009046 <_printf_float+0x342>
 80090c2:	e680      	b.n	8008dc6 <_printf_float+0xc2>
 80090c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090c6:	2a01      	cmp	r2, #1
 80090c8:	dc01      	bgt.n	80090ce <_printf_float+0x3ca>
 80090ca:	07db      	lsls	r3, r3, #31
 80090cc:	d538      	bpl.n	8009140 <_printf_float+0x43c>
 80090ce:	2301      	movs	r3, #1
 80090d0:	4642      	mov	r2, r8
 80090d2:	4631      	mov	r1, r6
 80090d4:	4628      	mov	r0, r5
 80090d6:	47b8      	blx	r7
 80090d8:	3001      	adds	r0, #1
 80090da:	f43f ae74 	beq.w	8008dc6 <_printf_float+0xc2>
 80090de:	ee18 3a10 	vmov	r3, s16
 80090e2:	4652      	mov	r2, sl
 80090e4:	4631      	mov	r1, r6
 80090e6:	4628      	mov	r0, r5
 80090e8:	47b8      	blx	r7
 80090ea:	3001      	adds	r0, #1
 80090ec:	f43f ae6b 	beq.w	8008dc6 <_printf_float+0xc2>
 80090f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80090f4:	2200      	movs	r2, #0
 80090f6:	2300      	movs	r3, #0
 80090f8:	f7f7 fd0e 	bl	8000b18 <__aeabi_dcmpeq>
 80090fc:	b9d8      	cbnz	r0, 8009136 <_printf_float+0x432>
 80090fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009100:	f108 0201 	add.w	r2, r8, #1
 8009104:	3b01      	subs	r3, #1
 8009106:	4631      	mov	r1, r6
 8009108:	4628      	mov	r0, r5
 800910a:	47b8      	blx	r7
 800910c:	3001      	adds	r0, #1
 800910e:	d10e      	bne.n	800912e <_printf_float+0x42a>
 8009110:	e659      	b.n	8008dc6 <_printf_float+0xc2>
 8009112:	2301      	movs	r3, #1
 8009114:	4652      	mov	r2, sl
 8009116:	4631      	mov	r1, r6
 8009118:	4628      	mov	r0, r5
 800911a:	47b8      	blx	r7
 800911c:	3001      	adds	r0, #1
 800911e:	f43f ae52 	beq.w	8008dc6 <_printf_float+0xc2>
 8009122:	f108 0801 	add.w	r8, r8, #1
 8009126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009128:	3b01      	subs	r3, #1
 800912a:	4543      	cmp	r3, r8
 800912c:	dcf1      	bgt.n	8009112 <_printf_float+0x40e>
 800912e:	464b      	mov	r3, r9
 8009130:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009134:	e6dc      	b.n	8008ef0 <_printf_float+0x1ec>
 8009136:	f04f 0800 	mov.w	r8, #0
 800913a:	f104 0a1a 	add.w	sl, r4, #26
 800913e:	e7f2      	b.n	8009126 <_printf_float+0x422>
 8009140:	2301      	movs	r3, #1
 8009142:	4642      	mov	r2, r8
 8009144:	e7df      	b.n	8009106 <_printf_float+0x402>
 8009146:	2301      	movs	r3, #1
 8009148:	464a      	mov	r2, r9
 800914a:	4631      	mov	r1, r6
 800914c:	4628      	mov	r0, r5
 800914e:	47b8      	blx	r7
 8009150:	3001      	adds	r0, #1
 8009152:	f43f ae38 	beq.w	8008dc6 <_printf_float+0xc2>
 8009156:	f108 0801 	add.w	r8, r8, #1
 800915a:	68e3      	ldr	r3, [r4, #12]
 800915c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800915e:	1a5b      	subs	r3, r3, r1
 8009160:	4543      	cmp	r3, r8
 8009162:	dcf0      	bgt.n	8009146 <_printf_float+0x442>
 8009164:	e6fa      	b.n	8008f5c <_printf_float+0x258>
 8009166:	f04f 0800 	mov.w	r8, #0
 800916a:	f104 0919 	add.w	r9, r4, #25
 800916e:	e7f4      	b.n	800915a <_printf_float+0x456>

08009170 <_printf_common>:
 8009170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009174:	4616      	mov	r6, r2
 8009176:	4699      	mov	r9, r3
 8009178:	688a      	ldr	r2, [r1, #8]
 800917a:	690b      	ldr	r3, [r1, #16]
 800917c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009180:	4293      	cmp	r3, r2
 8009182:	bfb8      	it	lt
 8009184:	4613      	movlt	r3, r2
 8009186:	6033      	str	r3, [r6, #0]
 8009188:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800918c:	4607      	mov	r7, r0
 800918e:	460c      	mov	r4, r1
 8009190:	b10a      	cbz	r2, 8009196 <_printf_common+0x26>
 8009192:	3301      	adds	r3, #1
 8009194:	6033      	str	r3, [r6, #0]
 8009196:	6823      	ldr	r3, [r4, #0]
 8009198:	0699      	lsls	r1, r3, #26
 800919a:	bf42      	ittt	mi
 800919c:	6833      	ldrmi	r3, [r6, #0]
 800919e:	3302      	addmi	r3, #2
 80091a0:	6033      	strmi	r3, [r6, #0]
 80091a2:	6825      	ldr	r5, [r4, #0]
 80091a4:	f015 0506 	ands.w	r5, r5, #6
 80091a8:	d106      	bne.n	80091b8 <_printf_common+0x48>
 80091aa:	f104 0a19 	add.w	sl, r4, #25
 80091ae:	68e3      	ldr	r3, [r4, #12]
 80091b0:	6832      	ldr	r2, [r6, #0]
 80091b2:	1a9b      	subs	r3, r3, r2
 80091b4:	42ab      	cmp	r3, r5
 80091b6:	dc26      	bgt.n	8009206 <_printf_common+0x96>
 80091b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80091bc:	1e13      	subs	r3, r2, #0
 80091be:	6822      	ldr	r2, [r4, #0]
 80091c0:	bf18      	it	ne
 80091c2:	2301      	movne	r3, #1
 80091c4:	0692      	lsls	r2, r2, #26
 80091c6:	d42b      	bmi.n	8009220 <_printf_common+0xb0>
 80091c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091cc:	4649      	mov	r1, r9
 80091ce:	4638      	mov	r0, r7
 80091d0:	47c0      	blx	r8
 80091d2:	3001      	adds	r0, #1
 80091d4:	d01e      	beq.n	8009214 <_printf_common+0xa4>
 80091d6:	6823      	ldr	r3, [r4, #0]
 80091d8:	68e5      	ldr	r5, [r4, #12]
 80091da:	6832      	ldr	r2, [r6, #0]
 80091dc:	f003 0306 	and.w	r3, r3, #6
 80091e0:	2b04      	cmp	r3, #4
 80091e2:	bf08      	it	eq
 80091e4:	1aad      	subeq	r5, r5, r2
 80091e6:	68a3      	ldr	r3, [r4, #8]
 80091e8:	6922      	ldr	r2, [r4, #16]
 80091ea:	bf0c      	ite	eq
 80091ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091f0:	2500      	movne	r5, #0
 80091f2:	4293      	cmp	r3, r2
 80091f4:	bfc4      	itt	gt
 80091f6:	1a9b      	subgt	r3, r3, r2
 80091f8:	18ed      	addgt	r5, r5, r3
 80091fa:	2600      	movs	r6, #0
 80091fc:	341a      	adds	r4, #26
 80091fe:	42b5      	cmp	r5, r6
 8009200:	d11a      	bne.n	8009238 <_printf_common+0xc8>
 8009202:	2000      	movs	r0, #0
 8009204:	e008      	b.n	8009218 <_printf_common+0xa8>
 8009206:	2301      	movs	r3, #1
 8009208:	4652      	mov	r2, sl
 800920a:	4649      	mov	r1, r9
 800920c:	4638      	mov	r0, r7
 800920e:	47c0      	blx	r8
 8009210:	3001      	adds	r0, #1
 8009212:	d103      	bne.n	800921c <_printf_common+0xac>
 8009214:	f04f 30ff 	mov.w	r0, #4294967295
 8009218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800921c:	3501      	adds	r5, #1
 800921e:	e7c6      	b.n	80091ae <_printf_common+0x3e>
 8009220:	18e1      	adds	r1, r4, r3
 8009222:	1c5a      	adds	r2, r3, #1
 8009224:	2030      	movs	r0, #48	; 0x30
 8009226:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800922a:	4422      	add	r2, r4
 800922c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009230:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009234:	3302      	adds	r3, #2
 8009236:	e7c7      	b.n	80091c8 <_printf_common+0x58>
 8009238:	2301      	movs	r3, #1
 800923a:	4622      	mov	r2, r4
 800923c:	4649      	mov	r1, r9
 800923e:	4638      	mov	r0, r7
 8009240:	47c0      	blx	r8
 8009242:	3001      	adds	r0, #1
 8009244:	d0e6      	beq.n	8009214 <_printf_common+0xa4>
 8009246:	3601      	adds	r6, #1
 8009248:	e7d9      	b.n	80091fe <_printf_common+0x8e>
	...

0800924c <_printf_i>:
 800924c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009250:	460c      	mov	r4, r1
 8009252:	4691      	mov	r9, r2
 8009254:	7e27      	ldrb	r7, [r4, #24]
 8009256:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009258:	2f78      	cmp	r7, #120	; 0x78
 800925a:	4680      	mov	r8, r0
 800925c:	469a      	mov	sl, r3
 800925e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009262:	d807      	bhi.n	8009274 <_printf_i+0x28>
 8009264:	2f62      	cmp	r7, #98	; 0x62
 8009266:	d80a      	bhi.n	800927e <_printf_i+0x32>
 8009268:	2f00      	cmp	r7, #0
 800926a:	f000 80d8 	beq.w	800941e <_printf_i+0x1d2>
 800926e:	2f58      	cmp	r7, #88	; 0x58
 8009270:	f000 80a3 	beq.w	80093ba <_printf_i+0x16e>
 8009274:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009278:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800927c:	e03a      	b.n	80092f4 <_printf_i+0xa8>
 800927e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009282:	2b15      	cmp	r3, #21
 8009284:	d8f6      	bhi.n	8009274 <_printf_i+0x28>
 8009286:	a001      	add	r0, pc, #4	; (adr r0, 800928c <_printf_i+0x40>)
 8009288:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800928c:	080092e5 	.word	0x080092e5
 8009290:	080092f9 	.word	0x080092f9
 8009294:	08009275 	.word	0x08009275
 8009298:	08009275 	.word	0x08009275
 800929c:	08009275 	.word	0x08009275
 80092a0:	08009275 	.word	0x08009275
 80092a4:	080092f9 	.word	0x080092f9
 80092a8:	08009275 	.word	0x08009275
 80092ac:	08009275 	.word	0x08009275
 80092b0:	08009275 	.word	0x08009275
 80092b4:	08009275 	.word	0x08009275
 80092b8:	08009405 	.word	0x08009405
 80092bc:	08009329 	.word	0x08009329
 80092c0:	080093e7 	.word	0x080093e7
 80092c4:	08009275 	.word	0x08009275
 80092c8:	08009275 	.word	0x08009275
 80092cc:	08009427 	.word	0x08009427
 80092d0:	08009275 	.word	0x08009275
 80092d4:	08009329 	.word	0x08009329
 80092d8:	08009275 	.word	0x08009275
 80092dc:	08009275 	.word	0x08009275
 80092e0:	080093ef 	.word	0x080093ef
 80092e4:	680b      	ldr	r3, [r1, #0]
 80092e6:	1d1a      	adds	r2, r3, #4
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	600a      	str	r2, [r1, #0]
 80092ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80092f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092f4:	2301      	movs	r3, #1
 80092f6:	e0a3      	b.n	8009440 <_printf_i+0x1f4>
 80092f8:	6825      	ldr	r5, [r4, #0]
 80092fa:	6808      	ldr	r0, [r1, #0]
 80092fc:	062e      	lsls	r6, r5, #24
 80092fe:	f100 0304 	add.w	r3, r0, #4
 8009302:	d50a      	bpl.n	800931a <_printf_i+0xce>
 8009304:	6805      	ldr	r5, [r0, #0]
 8009306:	600b      	str	r3, [r1, #0]
 8009308:	2d00      	cmp	r5, #0
 800930a:	da03      	bge.n	8009314 <_printf_i+0xc8>
 800930c:	232d      	movs	r3, #45	; 0x2d
 800930e:	426d      	negs	r5, r5
 8009310:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009314:	485e      	ldr	r0, [pc, #376]	; (8009490 <_printf_i+0x244>)
 8009316:	230a      	movs	r3, #10
 8009318:	e019      	b.n	800934e <_printf_i+0x102>
 800931a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800931e:	6805      	ldr	r5, [r0, #0]
 8009320:	600b      	str	r3, [r1, #0]
 8009322:	bf18      	it	ne
 8009324:	b22d      	sxthne	r5, r5
 8009326:	e7ef      	b.n	8009308 <_printf_i+0xbc>
 8009328:	680b      	ldr	r3, [r1, #0]
 800932a:	6825      	ldr	r5, [r4, #0]
 800932c:	1d18      	adds	r0, r3, #4
 800932e:	6008      	str	r0, [r1, #0]
 8009330:	0628      	lsls	r0, r5, #24
 8009332:	d501      	bpl.n	8009338 <_printf_i+0xec>
 8009334:	681d      	ldr	r5, [r3, #0]
 8009336:	e002      	b.n	800933e <_printf_i+0xf2>
 8009338:	0669      	lsls	r1, r5, #25
 800933a:	d5fb      	bpl.n	8009334 <_printf_i+0xe8>
 800933c:	881d      	ldrh	r5, [r3, #0]
 800933e:	4854      	ldr	r0, [pc, #336]	; (8009490 <_printf_i+0x244>)
 8009340:	2f6f      	cmp	r7, #111	; 0x6f
 8009342:	bf0c      	ite	eq
 8009344:	2308      	moveq	r3, #8
 8009346:	230a      	movne	r3, #10
 8009348:	2100      	movs	r1, #0
 800934a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800934e:	6866      	ldr	r6, [r4, #4]
 8009350:	60a6      	str	r6, [r4, #8]
 8009352:	2e00      	cmp	r6, #0
 8009354:	bfa2      	ittt	ge
 8009356:	6821      	ldrge	r1, [r4, #0]
 8009358:	f021 0104 	bicge.w	r1, r1, #4
 800935c:	6021      	strge	r1, [r4, #0]
 800935e:	b90d      	cbnz	r5, 8009364 <_printf_i+0x118>
 8009360:	2e00      	cmp	r6, #0
 8009362:	d04d      	beq.n	8009400 <_printf_i+0x1b4>
 8009364:	4616      	mov	r6, r2
 8009366:	fbb5 f1f3 	udiv	r1, r5, r3
 800936a:	fb03 5711 	mls	r7, r3, r1, r5
 800936e:	5dc7      	ldrb	r7, [r0, r7]
 8009370:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009374:	462f      	mov	r7, r5
 8009376:	42bb      	cmp	r3, r7
 8009378:	460d      	mov	r5, r1
 800937a:	d9f4      	bls.n	8009366 <_printf_i+0x11a>
 800937c:	2b08      	cmp	r3, #8
 800937e:	d10b      	bne.n	8009398 <_printf_i+0x14c>
 8009380:	6823      	ldr	r3, [r4, #0]
 8009382:	07df      	lsls	r7, r3, #31
 8009384:	d508      	bpl.n	8009398 <_printf_i+0x14c>
 8009386:	6923      	ldr	r3, [r4, #16]
 8009388:	6861      	ldr	r1, [r4, #4]
 800938a:	4299      	cmp	r1, r3
 800938c:	bfde      	ittt	le
 800938e:	2330      	movle	r3, #48	; 0x30
 8009390:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009394:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009398:	1b92      	subs	r2, r2, r6
 800939a:	6122      	str	r2, [r4, #16]
 800939c:	f8cd a000 	str.w	sl, [sp]
 80093a0:	464b      	mov	r3, r9
 80093a2:	aa03      	add	r2, sp, #12
 80093a4:	4621      	mov	r1, r4
 80093a6:	4640      	mov	r0, r8
 80093a8:	f7ff fee2 	bl	8009170 <_printf_common>
 80093ac:	3001      	adds	r0, #1
 80093ae:	d14c      	bne.n	800944a <_printf_i+0x1fe>
 80093b0:	f04f 30ff 	mov.w	r0, #4294967295
 80093b4:	b004      	add	sp, #16
 80093b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ba:	4835      	ldr	r0, [pc, #212]	; (8009490 <_printf_i+0x244>)
 80093bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80093c0:	6823      	ldr	r3, [r4, #0]
 80093c2:	680e      	ldr	r6, [r1, #0]
 80093c4:	061f      	lsls	r7, r3, #24
 80093c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80093ca:	600e      	str	r6, [r1, #0]
 80093cc:	d514      	bpl.n	80093f8 <_printf_i+0x1ac>
 80093ce:	07d9      	lsls	r1, r3, #31
 80093d0:	bf44      	itt	mi
 80093d2:	f043 0320 	orrmi.w	r3, r3, #32
 80093d6:	6023      	strmi	r3, [r4, #0]
 80093d8:	b91d      	cbnz	r5, 80093e2 <_printf_i+0x196>
 80093da:	6823      	ldr	r3, [r4, #0]
 80093dc:	f023 0320 	bic.w	r3, r3, #32
 80093e0:	6023      	str	r3, [r4, #0]
 80093e2:	2310      	movs	r3, #16
 80093e4:	e7b0      	b.n	8009348 <_printf_i+0xfc>
 80093e6:	6823      	ldr	r3, [r4, #0]
 80093e8:	f043 0320 	orr.w	r3, r3, #32
 80093ec:	6023      	str	r3, [r4, #0]
 80093ee:	2378      	movs	r3, #120	; 0x78
 80093f0:	4828      	ldr	r0, [pc, #160]	; (8009494 <_printf_i+0x248>)
 80093f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093f6:	e7e3      	b.n	80093c0 <_printf_i+0x174>
 80093f8:	065e      	lsls	r6, r3, #25
 80093fa:	bf48      	it	mi
 80093fc:	b2ad      	uxthmi	r5, r5
 80093fe:	e7e6      	b.n	80093ce <_printf_i+0x182>
 8009400:	4616      	mov	r6, r2
 8009402:	e7bb      	b.n	800937c <_printf_i+0x130>
 8009404:	680b      	ldr	r3, [r1, #0]
 8009406:	6826      	ldr	r6, [r4, #0]
 8009408:	6960      	ldr	r0, [r4, #20]
 800940a:	1d1d      	adds	r5, r3, #4
 800940c:	600d      	str	r5, [r1, #0]
 800940e:	0635      	lsls	r5, r6, #24
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	d501      	bpl.n	8009418 <_printf_i+0x1cc>
 8009414:	6018      	str	r0, [r3, #0]
 8009416:	e002      	b.n	800941e <_printf_i+0x1d2>
 8009418:	0671      	lsls	r1, r6, #25
 800941a:	d5fb      	bpl.n	8009414 <_printf_i+0x1c8>
 800941c:	8018      	strh	r0, [r3, #0]
 800941e:	2300      	movs	r3, #0
 8009420:	6123      	str	r3, [r4, #16]
 8009422:	4616      	mov	r6, r2
 8009424:	e7ba      	b.n	800939c <_printf_i+0x150>
 8009426:	680b      	ldr	r3, [r1, #0]
 8009428:	1d1a      	adds	r2, r3, #4
 800942a:	600a      	str	r2, [r1, #0]
 800942c:	681e      	ldr	r6, [r3, #0]
 800942e:	6862      	ldr	r2, [r4, #4]
 8009430:	2100      	movs	r1, #0
 8009432:	4630      	mov	r0, r6
 8009434:	f7f6 fefc 	bl	8000230 <memchr>
 8009438:	b108      	cbz	r0, 800943e <_printf_i+0x1f2>
 800943a:	1b80      	subs	r0, r0, r6
 800943c:	6060      	str	r0, [r4, #4]
 800943e:	6863      	ldr	r3, [r4, #4]
 8009440:	6123      	str	r3, [r4, #16]
 8009442:	2300      	movs	r3, #0
 8009444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009448:	e7a8      	b.n	800939c <_printf_i+0x150>
 800944a:	6923      	ldr	r3, [r4, #16]
 800944c:	4632      	mov	r2, r6
 800944e:	4649      	mov	r1, r9
 8009450:	4640      	mov	r0, r8
 8009452:	47d0      	blx	sl
 8009454:	3001      	adds	r0, #1
 8009456:	d0ab      	beq.n	80093b0 <_printf_i+0x164>
 8009458:	6823      	ldr	r3, [r4, #0]
 800945a:	079b      	lsls	r3, r3, #30
 800945c:	d413      	bmi.n	8009486 <_printf_i+0x23a>
 800945e:	68e0      	ldr	r0, [r4, #12]
 8009460:	9b03      	ldr	r3, [sp, #12]
 8009462:	4298      	cmp	r0, r3
 8009464:	bfb8      	it	lt
 8009466:	4618      	movlt	r0, r3
 8009468:	e7a4      	b.n	80093b4 <_printf_i+0x168>
 800946a:	2301      	movs	r3, #1
 800946c:	4632      	mov	r2, r6
 800946e:	4649      	mov	r1, r9
 8009470:	4640      	mov	r0, r8
 8009472:	47d0      	blx	sl
 8009474:	3001      	adds	r0, #1
 8009476:	d09b      	beq.n	80093b0 <_printf_i+0x164>
 8009478:	3501      	adds	r5, #1
 800947a:	68e3      	ldr	r3, [r4, #12]
 800947c:	9903      	ldr	r1, [sp, #12]
 800947e:	1a5b      	subs	r3, r3, r1
 8009480:	42ab      	cmp	r3, r5
 8009482:	dcf2      	bgt.n	800946a <_printf_i+0x21e>
 8009484:	e7eb      	b.n	800945e <_printf_i+0x212>
 8009486:	2500      	movs	r5, #0
 8009488:	f104 0619 	add.w	r6, r4, #25
 800948c:	e7f5      	b.n	800947a <_printf_i+0x22e>
 800948e:	bf00      	nop
 8009490:	0800fd42 	.word	0x0800fd42
 8009494:	0800fd53 	.word	0x0800fd53

08009498 <_scanf_float>:
 8009498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800949c:	b087      	sub	sp, #28
 800949e:	4617      	mov	r7, r2
 80094a0:	9303      	str	r3, [sp, #12]
 80094a2:	688b      	ldr	r3, [r1, #8]
 80094a4:	1e5a      	subs	r2, r3, #1
 80094a6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80094aa:	bf83      	ittte	hi
 80094ac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80094b0:	195b      	addhi	r3, r3, r5
 80094b2:	9302      	strhi	r3, [sp, #8]
 80094b4:	2300      	movls	r3, #0
 80094b6:	bf86      	itte	hi
 80094b8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80094bc:	608b      	strhi	r3, [r1, #8]
 80094be:	9302      	strls	r3, [sp, #8]
 80094c0:	680b      	ldr	r3, [r1, #0]
 80094c2:	468b      	mov	fp, r1
 80094c4:	2500      	movs	r5, #0
 80094c6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80094ca:	f84b 3b1c 	str.w	r3, [fp], #28
 80094ce:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80094d2:	4680      	mov	r8, r0
 80094d4:	460c      	mov	r4, r1
 80094d6:	465e      	mov	r6, fp
 80094d8:	46aa      	mov	sl, r5
 80094da:	46a9      	mov	r9, r5
 80094dc:	9501      	str	r5, [sp, #4]
 80094de:	68a2      	ldr	r2, [r4, #8]
 80094e0:	b152      	cbz	r2, 80094f8 <_scanf_float+0x60>
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	2b4e      	cmp	r3, #78	; 0x4e
 80094e8:	d864      	bhi.n	80095b4 <_scanf_float+0x11c>
 80094ea:	2b40      	cmp	r3, #64	; 0x40
 80094ec:	d83c      	bhi.n	8009568 <_scanf_float+0xd0>
 80094ee:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80094f2:	b2c8      	uxtb	r0, r1
 80094f4:	280e      	cmp	r0, #14
 80094f6:	d93a      	bls.n	800956e <_scanf_float+0xd6>
 80094f8:	f1b9 0f00 	cmp.w	r9, #0
 80094fc:	d003      	beq.n	8009506 <_scanf_float+0x6e>
 80094fe:	6823      	ldr	r3, [r4, #0]
 8009500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009504:	6023      	str	r3, [r4, #0]
 8009506:	f10a 3aff 	add.w	sl, sl, #4294967295
 800950a:	f1ba 0f01 	cmp.w	sl, #1
 800950e:	f200 8113 	bhi.w	8009738 <_scanf_float+0x2a0>
 8009512:	455e      	cmp	r6, fp
 8009514:	f200 8105 	bhi.w	8009722 <_scanf_float+0x28a>
 8009518:	2501      	movs	r5, #1
 800951a:	4628      	mov	r0, r5
 800951c:	b007      	add	sp, #28
 800951e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009522:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009526:	2a0d      	cmp	r2, #13
 8009528:	d8e6      	bhi.n	80094f8 <_scanf_float+0x60>
 800952a:	a101      	add	r1, pc, #4	; (adr r1, 8009530 <_scanf_float+0x98>)
 800952c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009530:	0800966f 	.word	0x0800966f
 8009534:	080094f9 	.word	0x080094f9
 8009538:	080094f9 	.word	0x080094f9
 800953c:	080094f9 	.word	0x080094f9
 8009540:	080096cf 	.word	0x080096cf
 8009544:	080096a7 	.word	0x080096a7
 8009548:	080094f9 	.word	0x080094f9
 800954c:	080094f9 	.word	0x080094f9
 8009550:	0800967d 	.word	0x0800967d
 8009554:	080094f9 	.word	0x080094f9
 8009558:	080094f9 	.word	0x080094f9
 800955c:	080094f9 	.word	0x080094f9
 8009560:	080094f9 	.word	0x080094f9
 8009564:	08009635 	.word	0x08009635
 8009568:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800956c:	e7db      	b.n	8009526 <_scanf_float+0x8e>
 800956e:	290e      	cmp	r1, #14
 8009570:	d8c2      	bhi.n	80094f8 <_scanf_float+0x60>
 8009572:	a001      	add	r0, pc, #4	; (adr r0, 8009578 <_scanf_float+0xe0>)
 8009574:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009578:	08009627 	.word	0x08009627
 800957c:	080094f9 	.word	0x080094f9
 8009580:	08009627 	.word	0x08009627
 8009584:	080096bb 	.word	0x080096bb
 8009588:	080094f9 	.word	0x080094f9
 800958c:	080095d5 	.word	0x080095d5
 8009590:	08009611 	.word	0x08009611
 8009594:	08009611 	.word	0x08009611
 8009598:	08009611 	.word	0x08009611
 800959c:	08009611 	.word	0x08009611
 80095a0:	08009611 	.word	0x08009611
 80095a4:	08009611 	.word	0x08009611
 80095a8:	08009611 	.word	0x08009611
 80095ac:	08009611 	.word	0x08009611
 80095b0:	08009611 	.word	0x08009611
 80095b4:	2b6e      	cmp	r3, #110	; 0x6e
 80095b6:	d809      	bhi.n	80095cc <_scanf_float+0x134>
 80095b8:	2b60      	cmp	r3, #96	; 0x60
 80095ba:	d8b2      	bhi.n	8009522 <_scanf_float+0x8a>
 80095bc:	2b54      	cmp	r3, #84	; 0x54
 80095be:	d077      	beq.n	80096b0 <_scanf_float+0x218>
 80095c0:	2b59      	cmp	r3, #89	; 0x59
 80095c2:	d199      	bne.n	80094f8 <_scanf_float+0x60>
 80095c4:	2d07      	cmp	r5, #7
 80095c6:	d197      	bne.n	80094f8 <_scanf_float+0x60>
 80095c8:	2508      	movs	r5, #8
 80095ca:	e029      	b.n	8009620 <_scanf_float+0x188>
 80095cc:	2b74      	cmp	r3, #116	; 0x74
 80095ce:	d06f      	beq.n	80096b0 <_scanf_float+0x218>
 80095d0:	2b79      	cmp	r3, #121	; 0x79
 80095d2:	e7f6      	b.n	80095c2 <_scanf_float+0x12a>
 80095d4:	6821      	ldr	r1, [r4, #0]
 80095d6:	05c8      	lsls	r0, r1, #23
 80095d8:	d51a      	bpl.n	8009610 <_scanf_float+0x178>
 80095da:	9b02      	ldr	r3, [sp, #8]
 80095dc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80095e0:	6021      	str	r1, [r4, #0]
 80095e2:	f109 0901 	add.w	r9, r9, #1
 80095e6:	b11b      	cbz	r3, 80095f0 <_scanf_float+0x158>
 80095e8:	3b01      	subs	r3, #1
 80095ea:	3201      	adds	r2, #1
 80095ec:	9302      	str	r3, [sp, #8]
 80095ee:	60a2      	str	r2, [r4, #8]
 80095f0:	68a3      	ldr	r3, [r4, #8]
 80095f2:	3b01      	subs	r3, #1
 80095f4:	60a3      	str	r3, [r4, #8]
 80095f6:	6923      	ldr	r3, [r4, #16]
 80095f8:	3301      	adds	r3, #1
 80095fa:	6123      	str	r3, [r4, #16]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	3b01      	subs	r3, #1
 8009600:	2b00      	cmp	r3, #0
 8009602:	607b      	str	r3, [r7, #4]
 8009604:	f340 8084 	ble.w	8009710 <_scanf_float+0x278>
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	3301      	adds	r3, #1
 800960c:	603b      	str	r3, [r7, #0]
 800960e:	e766      	b.n	80094de <_scanf_float+0x46>
 8009610:	eb1a 0f05 	cmn.w	sl, r5
 8009614:	f47f af70 	bne.w	80094f8 <_scanf_float+0x60>
 8009618:	6822      	ldr	r2, [r4, #0]
 800961a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800961e:	6022      	str	r2, [r4, #0]
 8009620:	f806 3b01 	strb.w	r3, [r6], #1
 8009624:	e7e4      	b.n	80095f0 <_scanf_float+0x158>
 8009626:	6822      	ldr	r2, [r4, #0]
 8009628:	0610      	lsls	r0, r2, #24
 800962a:	f57f af65 	bpl.w	80094f8 <_scanf_float+0x60>
 800962e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009632:	e7f4      	b.n	800961e <_scanf_float+0x186>
 8009634:	f1ba 0f00 	cmp.w	sl, #0
 8009638:	d10e      	bne.n	8009658 <_scanf_float+0x1c0>
 800963a:	f1b9 0f00 	cmp.w	r9, #0
 800963e:	d10e      	bne.n	800965e <_scanf_float+0x1c6>
 8009640:	6822      	ldr	r2, [r4, #0]
 8009642:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009646:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800964a:	d108      	bne.n	800965e <_scanf_float+0x1c6>
 800964c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009650:	6022      	str	r2, [r4, #0]
 8009652:	f04f 0a01 	mov.w	sl, #1
 8009656:	e7e3      	b.n	8009620 <_scanf_float+0x188>
 8009658:	f1ba 0f02 	cmp.w	sl, #2
 800965c:	d055      	beq.n	800970a <_scanf_float+0x272>
 800965e:	2d01      	cmp	r5, #1
 8009660:	d002      	beq.n	8009668 <_scanf_float+0x1d0>
 8009662:	2d04      	cmp	r5, #4
 8009664:	f47f af48 	bne.w	80094f8 <_scanf_float+0x60>
 8009668:	3501      	adds	r5, #1
 800966a:	b2ed      	uxtb	r5, r5
 800966c:	e7d8      	b.n	8009620 <_scanf_float+0x188>
 800966e:	f1ba 0f01 	cmp.w	sl, #1
 8009672:	f47f af41 	bne.w	80094f8 <_scanf_float+0x60>
 8009676:	f04f 0a02 	mov.w	sl, #2
 800967a:	e7d1      	b.n	8009620 <_scanf_float+0x188>
 800967c:	b97d      	cbnz	r5, 800969e <_scanf_float+0x206>
 800967e:	f1b9 0f00 	cmp.w	r9, #0
 8009682:	f47f af3c 	bne.w	80094fe <_scanf_float+0x66>
 8009686:	6822      	ldr	r2, [r4, #0]
 8009688:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800968c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009690:	f47f af39 	bne.w	8009506 <_scanf_float+0x6e>
 8009694:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009698:	6022      	str	r2, [r4, #0]
 800969a:	2501      	movs	r5, #1
 800969c:	e7c0      	b.n	8009620 <_scanf_float+0x188>
 800969e:	2d03      	cmp	r5, #3
 80096a0:	d0e2      	beq.n	8009668 <_scanf_float+0x1d0>
 80096a2:	2d05      	cmp	r5, #5
 80096a4:	e7de      	b.n	8009664 <_scanf_float+0x1cc>
 80096a6:	2d02      	cmp	r5, #2
 80096a8:	f47f af26 	bne.w	80094f8 <_scanf_float+0x60>
 80096ac:	2503      	movs	r5, #3
 80096ae:	e7b7      	b.n	8009620 <_scanf_float+0x188>
 80096b0:	2d06      	cmp	r5, #6
 80096b2:	f47f af21 	bne.w	80094f8 <_scanf_float+0x60>
 80096b6:	2507      	movs	r5, #7
 80096b8:	e7b2      	b.n	8009620 <_scanf_float+0x188>
 80096ba:	6822      	ldr	r2, [r4, #0]
 80096bc:	0591      	lsls	r1, r2, #22
 80096be:	f57f af1b 	bpl.w	80094f8 <_scanf_float+0x60>
 80096c2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80096c6:	6022      	str	r2, [r4, #0]
 80096c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80096cc:	e7a8      	b.n	8009620 <_scanf_float+0x188>
 80096ce:	6822      	ldr	r2, [r4, #0]
 80096d0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80096d4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80096d8:	d006      	beq.n	80096e8 <_scanf_float+0x250>
 80096da:	0550      	lsls	r0, r2, #21
 80096dc:	f57f af0c 	bpl.w	80094f8 <_scanf_float+0x60>
 80096e0:	f1b9 0f00 	cmp.w	r9, #0
 80096e4:	f43f af0f 	beq.w	8009506 <_scanf_float+0x6e>
 80096e8:	0591      	lsls	r1, r2, #22
 80096ea:	bf58      	it	pl
 80096ec:	9901      	ldrpl	r1, [sp, #4]
 80096ee:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80096f2:	bf58      	it	pl
 80096f4:	eba9 0101 	subpl.w	r1, r9, r1
 80096f8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80096fc:	bf58      	it	pl
 80096fe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009702:	6022      	str	r2, [r4, #0]
 8009704:	f04f 0900 	mov.w	r9, #0
 8009708:	e78a      	b.n	8009620 <_scanf_float+0x188>
 800970a:	f04f 0a03 	mov.w	sl, #3
 800970e:	e787      	b.n	8009620 <_scanf_float+0x188>
 8009710:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009714:	4639      	mov	r1, r7
 8009716:	4640      	mov	r0, r8
 8009718:	4798      	blx	r3
 800971a:	2800      	cmp	r0, #0
 800971c:	f43f aedf 	beq.w	80094de <_scanf_float+0x46>
 8009720:	e6ea      	b.n	80094f8 <_scanf_float+0x60>
 8009722:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009726:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800972a:	463a      	mov	r2, r7
 800972c:	4640      	mov	r0, r8
 800972e:	4798      	blx	r3
 8009730:	6923      	ldr	r3, [r4, #16]
 8009732:	3b01      	subs	r3, #1
 8009734:	6123      	str	r3, [r4, #16]
 8009736:	e6ec      	b.n	8009512 <_scanf_float+0x7a>
 8009738:	1e6b      	subs	r3, r5, #1
 800973a:	2b06      	cmp	r3, #6
 800973c:	d825      	bhi.n	800978a <_scanf_float+0x2f2>
 800973e:	2d02      	cmp	r5, #2
 8009740:	d836      	bhi.n	80097b0 <_scanf_float+0x318>
 8009742:	455e      	cmp	r6, fp
 8009744:	f67f aee8 	bls.w	8009518 <_scanf_float+0x80>
 8009748:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800974c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009750:	463a      	mov	r2, r7
 8009752:	4640      	mov	r0, r8
 8009754:	4798      	blx	r3
 8009756:	6923      	ldr	r3, [r4, #16]
 8009758:	3b01      	subs	r3, #1
 800975a:	6123      	str	r3, [r4, #16]
 800975c:	e7f1      	b.n	8009742 <_scanf_float+0x2aa>
 800975e:	9802      	ldr	r0, [sp, #8]
 8009760:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009764:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009768:	9002      	str	r0, [sp, #8]
 800976a:	463a      	mov	r2, r7
 800976c:	4640      	mov	r0, r8
 800976e:	4798      	blx	r3
 8009770:	6923      	ldr	r3, [r4, #16]
 8009772:	3b01      	subs	r3, #1
 8009774:	6123      	str	r3, [r4, #16]
 8009776:	f10a 3aff 	add.w	sl, sl, #4294967295
 800977a:	fa5f fa8a 	uxtb.w	sl, sl
 800977e:	f1ba 0f02 	cmp.w	sl, #2
 8009782:	d1ec      	bne.n	800975e <_scanf_float+0x2c6>
 8009784:	3d03      	subs	r5, #3
 8009786:	b2ed      	uxtb	r5, r5
 8009788:	1b76      	subs	r6, r6, r5
 800978a:	6823      	ldr	r3, [r4, #0]
 800978c:	05da      	lsls	r2, r3, #23
 800978e:	d52f      	bpl.n	80097f0 <_scanf_float+0x358>
 8009790:	055b      	lsls	r3, r3, #21
 8009792:	d510      	bpl.n	80097b6 <_scanf_float+0x31e>
 8009794:	455e      	cmp	r6, fp
 8009796:	f67f aebf 	bls.w	8009518 <_scanf_float+0x80>
 800979a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800979e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80097a2:	463a      	mov	r2, r7
 80097a4:	4640      	mov	r0, r8
 80097a6:	4798      	blx	r3
 80097a8:	6923      	ldr	r3, [r4, #16]
 80097aa:	3b01      	subs	r3, #1
 80097ac:	6123      	str	r3, [r4, #16]
 80097ae:	e7f1      	b.n	8009794 <_scanf_float+0x2fc>
 80097b0:	46aa      	mov	sl, r5
 80097b2:	9602      	str	r6, [sp, #8]
 80097b4:	e7df      	b.n	8009776 <_scanf_float+0x2de>
 80097b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80097ba:	6923      	ldr	r3, [r4, #16]
 80097bc:	2965      	cmp	r1, #101	; 0x65
 80097be:	f103 33ff 	add.w	r3, r3, #4294967295
 80097c2:	f106 35ff 	add.w	r5, r6, #4294967295
 80097c6:	6123      	str	r3, [r4, #16]
 80097c8:	d00c      	beq.n	80097e4 <_scanf_float+0x34c>
 80097ca:	2945      	cmp	r1, #69	; 0x45
 80097cc:	d00a      	beq.n	80097e4 <_scanf_float+0x34c>
 80097ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80097d2:	463a      	mov	r2, r7
 80097d4:	4640      	mov	r0, r8
 80097d6:	4798      	blx	r3
 80097d8:	6923      	ldr	r3, [r4, #16]
 80097da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80097de:	3b01      	subs	r3, #1
 80097e0:	1eb5      	subs	r5, r6, #2
 80097e2:	6123      	str	r3, [r4, #16]
 80097e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80097e8:	463a      	mov	r2, r7
 80097ea:	4640      	mov	r0, r8
 80097ec:	4798      	blx	r3
 80097ee:	462e      	mov	r6, r5
 80097f0:	6825      	ldr	r5, [r4, #0]
 80097f2:	f015 0510 	ands.w	r5, r5, #16
 80097f6:	d158      	bne.n	80098aa <_scanf_float+0x412>
 80097f8:	7035      	strb	r5, [r6, #0]
 80097fa:	6823      	ldr	r3, [r4, #0]
 80097fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009804:	d11c      	bne.n	8009840 <_scanf_float+0x3a8>
 8009806:	9b01      	ldr	r3, [sp, #4]
 8009808:	454b      	cmp	r3, r9
 800980a:	eba3 0209 	sub.w	r2, r3, r9
 800980e:	d124      	bne.n	800985a <_scanf_float+0x3c2>
 8009810:	2200      	movs	r2, #0
 8009812:	4659      	mov	r1, fp
 8009814:	4640      	mov	r0, r8
 8009816:	f000 fe9d 	bl	800a554 <_strtod_r>
 800981a:	9b03      	ldr	r3, [sp, #12]
 800981c:	6821      	ldr	r1, [r4, #0]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f011 0f02 	tst.w	r1, #2
 8009824:	ec57 6b10 	vmov	r6, r7, d0
 8009828:	f103 0204 	add.w	r2, r3, #4
 800982c:	d020      	beq.n	8009870 <_scanf_float+0x3d8>
 800982e:	9903      	ldr	r1, [sp, #12]
 8009830:	600a      	str	r2, [r1, #0]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	e9c3 6700 	strd	r6, r7, [r3]
 8009838:	68e3      	ldr	r3, [r4, #12]
 800983a:	3301      	adds	r3, #1
 800983c:	60e3      	str	r3, [r4, #12]
 800983e:	e66c      	b.n	800951a <_scanf_float+0x82>
 8009840:	9b04      	ldr	r3, [sp, #16]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d0e4      	beq.n	8009810 <_scanf_float+0x378>
 8009846:	9905      	ldr	r1, [sp, #20]
 8009848:	230a      	movs	r3, #10
 800984a:	462a      	mov	r2, r5
 800984c:	3101      	adds	r1, #1
 800984e:	4640      	mov	r0, r8
 8009850:	f000 ff16 	bl	800a680 <_strtol_r>
 8009854:	9b04      	ldr	r3, [sp, #16]
 8009856:	9e05      	ldr	r6, [sp, #20]
 8009858:	1ac2      	subs	r2, r0, r3
 800985a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800985e:	429e      	cmp	r6, r3
 8009860:	bf28      	it	cs
 8009862:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009866:	4912      	ldr	r1, [pc, #72]	; (80098b0 <_scanf_float+0x418>)
 8009868:	4630      	mov	r0, r6
 800986a:	f000 f82b 	bl	80098c4 <siprintf>
 800986e:	e7cf      	b.n	8009810 <_scanf_float+0x378>
 8009870:	f011 0f04 	tst.w	r1, #4
 8009874:	9903      	ldr	r1, [sp, #12]
 8009876:	600a      	str	r2, [r1, #0]
 8009878:	d1db      	bne.n	8009832 <_scanf_float+0x39a>
 800987a:	f8d3 8000 	ldr.w	r8, [r3]
 800987e:	ee10 2a10 	vmov	r2, s0
 8009882:	ee10 0a10 	vmov	r0, s0
 8009886:	463b      	mov	r3, r7
 8009888:	4639      	mov	r1, r7
 800988a:	f7f7 f977 	bl	8000b7c <__aeabi_dcmpun>
 800988e:	b128      	cbz	r0, 800989c <_scanf_float+0x404>
 8009890:	4808      	ldr	r0, [pc, #32]	; (80098b4 <_scanf_float+0x41c>)
 8009892:	f000 f811 	bl	80098b8 <nanf>
 8009896:	ed88 0a00 	vstr	s0, [r8]
 800989a:	e7cd      	b.n	8009838 <_scanf_float+0x3a0>
 800989c:	4630      	mov	r0, r6
 800989e:	4639      	mov	r1, r7
 80098a0:	f7f7 f9ca 	bl	8000c38 <__aeabi_d2f>
 80098a4:	f8c8 0000 	str.w	r0, [r8]
 80098a8:	e7c6      	b.n	8009838 <_scanf_float+0x3a0>
 80098aa:	2500      	movs	r5, #0
 80098ac:	e635      	b.n	800951a <_scanf_float+0x82>
 80098ae:	bf00      	nop
 80098b0:	0800fd64 	.word	0x0800fd64
 80098b4:	08010180 	.word	0x08010180

080098b8 <nanf>:
 80098b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80098c0 <nanf+0x8>
 80098bc:	4770      	bx	lr
 80098be:	bf00      	nop
 80098c0:	7fc00000 	.word	0x7fc00000

080098c4 <siprintf>:
 80098c4:	b40e      	push	{r1, r2, r3}
 80098c6:	b500      	push	{lr}
 80098c8:	b09c      	sub	sp, #112	; 0x70
 80098ca:	ab1d      	add	r3, sp, #116	; 0x74
 80098cc:	9002      	str	r0, [sp, #8]
 80098ce:	9006      	str	r0, [sp, #24]
 80098d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80098d4:	4809      	ldr	r0, [pc, #36]	; (80098fc <siprintf+0x38>)
 80098d6:	9107      	str	r1, [sp, #28]
 80098d8:	9104      	str	r1, [sp, #16]
 80098da:	4909      	ldr	r1, [pc, #36]	; (8009900 <siprintf+0x3c>)
 80098dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80098e0:	9105      	str	r1, [sp, #20]
 80098e2:	6800      	ldr	r0, [r0, #0]
 80098e4:	9301      	str	r3, [sp, #4]
 80098e6:	a902      	add	r1, sp, #8
 80098e8:	f002 feba 	bl	800c660 <_svfiprintf_r>
 80098ec:	9b02      	ldr	r3, [sp, #8]
 80098ee:	2200      	movs	r2, #0
 80098f0:	701a      	strb	r2, [r3, #0]
 80098f2:	b01c      	add	sp, #112	; 0x70
 80098f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80098f8:	b003      	add	sp, #12
 80098fa:	4770      	bx	lr
 80098fc:	2000003c 	.word	0x2000003c
 8009900:	ffff0208 	.word	0xffff0208

08009904 <sulp>:
 8009904:	b570      	push	{r4, r5, r6, lr}
 8009906:	4604      	mov	r4, r0
 8009908:	460d      	mov	r5, r1
 800990a:	ec45 4b10 	vmov	d0, r4, r5
 800990e:	4616      	mov	r6, r2
 8009910:	f002 fc42 	bl	800c198 <__ulp>
 8009914:	ec51 0b10 	vmov	r0, r1, d0
 8009918:	b17e      	cbz	r6, 800993a <sulp+0x36>
 800991a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800991e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009922:	2b00      	cmp	r3, #0
 8009924:	dd09      	ble.n	800993a <sulp+0x36>
 8009926:	051b      	lsls	r3, r3, #20
 8009928:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800992c:	2400      	movs	r4, #0
 800992e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009932:	4622      	mov	r2, r4
 8009934:	462b      	mov	r3, r5
 8009936:	f7f6 fe87 	bl	8000648 <__aeabi_dmul>
 800993a:	bd70      	pop	{r4, r5, r6, pc}
 800993c:	0000      	movs	r0, r0
	...

08009940 <_strtod_l>:
 8009940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009944:	b0a3      	sub	sp, #140	; 0x8c
 8009946:	461f      	mov	r7, r3
 8009948:	2300      	movs	r3, #0
 800994a:	931e      	str	r3, [sp, #120]	; 0x78
 800994c:	4ba4      	ldr	r3, [pc, #656]	; (8009be0 <_strtod_l+0x2a0>)
 800994e:	9219      	str	r2, [sp, #100]	; 0x64
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	9307      	str	r3, [sp, #28]
 8009954:	4604      	mov	r4, r0
 8009956:	4618      	mov	r0, r3
 8009958:	4688      	mov	r8, r1
 800995a:	f7f6 fc61 	bl	8000220 <strlen>
 800995e:	f04f 0a00 	mov.w	sl, #0
 8009962:	4605      	mov	r5, r0
 8009964:	f04f 0b00 	mov.w	fp, #0
 8009968:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800996c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800996e:	781a      	ldrb	r2, [r3, #0]
 8009970:	2a2b      	cmp	r2, #43	; 0x2b
 8009972:	d04c      	beq.n	8009a0e <_strtod_l+0xce>
 8009974:	d839      	bhi.n	80099ea <_strtod_l+0xaa>
 8009976:	2a0d      	cmp	r2, #13
 8009978:	d832      	bhi.n	80099e0 <_strtod_l+0xa0>
 800997a:	2a08      	cmp	r2, #8
 800997c:	d832      	bhi.n	80099e4 <_strtod_l+0xa4>
 800997e:	2a00      	cmp	r2, #0
 8009980:	d03c      	beq.n	80099fc <_strtod_l+0xbc>
 8009982:	2300      	movs	r3, #0
 8009984:	930e      	str	r3, [sp, #56]	; 0x38
 8009986:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009988:	7833      	ldrb	r3, [r6, #0]
 800998a:	2b30      	cmp	r3, #48	; 0x30
 800998c:	f040 80b4 	bne.w	8009af8 <_strtod_l+0x1b8>
 8009990:	7873      	ldrb	r3, [r6, #1]
 8009992:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009996:	2b58      	cmp	r3, #88	; 0x58
 8009998:	d16c      	bne.n	8009a74 <_strtod_l+0x134>
 800999a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800999c:	9301      	str	r3, [sp, #4]
 800999e:	ab1e      	add	r3, sp, #120	; 0x78
 80099a0:	9702      	str	r7, [sp, #8]
 80099a2:	9300      	str	r3, [sp, #0]
 80099a4:	4a8f      	ldr	r2, [pc, #572]	; (8009be4 <_strtod_l+0x2a4>)
 80099a6:	ab1f      	add	r3, sp, #124	; 0x7c
 80099a8:	a91d      	add	r1, sp, #116	; 0x74
 80099aa:	4620      	mov	r0, r4
 80099ac:	f001 fd54 	bl	800b458 <__gethex>
 80099b0:	f010 0707 	ands.w	r7, r0, #7
 80099b4:	4605      	mov	r5, r0
 80099b6:	d005      	beq.n	80099c4 <_strtod_l+0x84>
 80099b8:	2f06      	cmp	r7, #6
 80099ba:	d12a      	bne.n	8009a12 <_strtod_l+0xd2>
 80099bc:	3601      	adds	r6, #1
 80099be:	2300      	movs	r3, #0
 80099c0:	961d      	str	r6, [sp, #116]	; 0x74
 80099c2:	930e      	str	r3, [sp, #56]	; 0x38
 80099c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	f040 8596 	bne.w	800a4f8 <_strtod_l+0xbb8>
 80099cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099ce:	b1db      	cbz	r3, 8009a08 <_strtod_l+0xc8>
 80099d0:	4652      	mov	r2, sl
 80099d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80099d6:	ec43 2b10 	vmov	d0, r2, r3
 80099da:	b023      	add	sp, #140	; 0x8c
 80099dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099e0:	2a20      	cmp	r2, #32
 80099e2:	d1ce      	bne.n	8009982 <_strtod_l+0x42>
 80099e4:	3301      	adds	r3, #1
 80099e6:	931d      	str	r3, [sp, #116]	; 0x74
 80099e8:	e7c0      	b.n	800996c <_strtod_l+0x2c>
 80099ea:	2a2d      	cmp	r2, #45	; 0x2d
 80099ec:	d1c9      	bne.n	8009982 <_strtod_l+0x42>
 80099ee:	2201      	movs	r2, #1
 80099f0:	920e      	str	r2, [sp, #56]	; 0x38
 80099f2:	1c5a      	adds	r2, r3, #1
 80099f4:	921d      	str	r2, [sp, #116]	; 0x74
 80099f6:	785b      	ldrb	r3, [r3, #1]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d1c4      	bne.n	8009986 <_strtod_l+0x46>
 80099fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80099fe:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f040 8576 	bne.w	800a4f4 <_strtod_l+0xbb4>
 8009a08:	4652      	mov	r2, sl
 8009a0a:	465b      	mov	r3, fp
 8009a0c:	e7e3      	b.n	80099d6 <_strtod_l+0x96>
 8009a0e:	2200      	movs	r2, #0
 8009a10:	e7ee      	b.n	80099f0 <_strtod_l+0xb0>
 8009a12:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009a14:	b13a      	cbz	r2, 8009a26 <_strtod_l+0xe6>
 8009a16:	2135      	movs	r1, #53	; 0x35
 8009a18:	a820      	add	r0, sp, #128	; 0x80
 8009a1a:	f002 fcc8 	bl	800c3ae <__copybits>
 8009a1e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009a20:	4620      	mov	r0, r4
 8009a22:	f002 f88d 	bl	800bb40 <_Bfree>
 8009a26:	3f01      	subs	r7, #1
 8009a28:	2f05      	cmp	r7, #5
 8009a2a:	d807      	bhi.n	8009a3c <_strtod_l+0xfc>
 8009a2c:	e8df f007 	tbb	[pc, r7]
 8009a30:	1d180b0e 	.word	0x1d180b0e
 8009a34:	030e      	.short	0x030e
 8009a36:	f04f 0b00 	mov.w	fp, #0
 8009a3a:	46da      	mov	sl, fp
 8009a3c:	0728      	lsls	r0, r5, #28
 8009a3e:	d5c1      	bpl.n	80099c4 <_strtod_l+0x84>
 8009a40:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009a44:	e7be      	b.n	80099c4 <_strtod_l+0x84>
 8009a46:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8009a4a:	e7f7      	b.n	8009a3c <_strtod_l+0xfc>
 8009a4c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8009a50:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009a52:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009a56:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009a5a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009a5e:	e7ed      	b.n	8009a3c <_strtod_l+0xfc>
 8009a60:	f8df b184 	ldr.w	fp, [pc, #388]	; 8009be8 <_strtod_l+0x2a8>
 8009a64:	f04f 0a00 	mov.w	sl, #0
 8009a68:	e7e8      	b.n	8009a3c <_strtod_l+0xfc>
 8009a6a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009a6e:	f04f 3aff 	mov.w	sl, #4294967295
 8009a72:	e7e3      	b.n	8009a3c <_strtod_l+0xfc>
 8009a74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009a76:	1c5a      	adds	r2, r3, #1
 8009a78:	921d      	str	r2, [sp, #116]	; 0x74
 8009a7a:	785b      	ldrb	r3, [r3, #1]
 8009a7c:	2b30      	cmp	r3, #48	; 0x30
 8009a7e:	d0f9      	beq.n	8009a74 <_strtod_l+0x134>
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d09f      	beq.n	80099c4 <_strtod_l+0x84>
 8009a84:	2301      	movs	r3, #1
 8009a86:	f04f 0900 	mov.w	r9, #0
 8009a8a:	9304      	str	r3, [sp, #16]
 8009a8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009a8e:	930a      	str	r3, [sp, #40]	; 0x28
 8009a90:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009a94:	464f      	mov	r7, r9
 8009a96:	220a      	movs	r2, #10
 8009a98:	981d      	ldr	r0, [sp, #116]	; 0x74
 8009a9a:	7806      	ldrb	r6, [r0, #0]
 8009a9c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009aa0:	b2d9      	uxtb	r1, r3
 8009aa2:	2909      	cmp	r1, #9
 8009aa4:	d92a      	bls.n	8009afc <_strtod_l+0x1bc>
 8009aa6:	9907      	ldr	r1, [sp, #28]
 8009aa8:	462a      	mov	r2, r5
 8009aaa:	f002 fef1 	bl	800c890 <strncmp>
 8009aae:	b398      	cbz	r0, 8009b18 <_strtod_l+0x1d8>
 8009ab0:	2000      	movs	r0, #0
 8009ab2:	4633      	mov	r3, r6
 8009ab4:	463d      	mov	r5, r7
 8009ab6:	9007      	str	r0, [sp, #28]
 8009ab8:	4602      	mov	r2, r0
 8009aba:	2b65      	cmp	r3, #101	; 0x65
 8009abc:	d001      	beq.n	8009ac2 <_strtod_l+0x182>
 8009abe:	2b45      	cmp	r3, #69	; 0x45
 8009ac0:	d118      	bne.n	8009af4 <_strtod_l+0x1b4>
 8009ac2:	b91d      	cbnz	r5, 8009acc <_strtod_l+0x18c>
 8009ac4:	9b04      	ldr	r3, [sp, #16]
 8009ac6:	4303      	orrs	r3, r0
 8009ac8:	d098      	beq.n	80099fc <_strtod_l+0xbc>
 8009aca:	2500      	movs	r5, #0
 8009acc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8009ad0:	f108 0301 	add.w	r3, r8, #1
 8009ad4:	931d      	str	r3, [sp, #116]	; 0x74
 8009ad6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009ada:	2b2b      	cmp	r3, #43	; 0x2b
 8009adc:	d075      	beq.n	8009bca <_strtod_l+0x28a>
 8009ade:	2b2d      	cmp	r3, #45	; 0x2d
 8009ae0:	d07b      	beq.n	8009bda <_strtod_l+0x29a>
 8009ae2:	f04f 0c00 	mov.w	ip, #0
 8009ae6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009aea:	2909      	cmp	r1, #9
 8009aec:	f240 8082 	bls.w	8009bf4 <_strtod_l+0x2b4>
 8009af0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009af4:	2600      	movs	r6, #0
 8009af6:	e09d      	b.n	8009c34 <_strtod_l+0x2f4>
 8009af8:	2300      	movs	r3, #0
 8009afa:	e7c4      	b.n	8009a86 <_strtod_l+0x146>
 8009afc:	2f08      	cmp	r7, #8
 8009afe:	bfd8      	it	le
 8009b00:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009b02:	f100 0001 	add.w	r0, r0, #1
 8009b06:	bfda      	itte	le
 8009b08:	fb02 3301 	mlale	r3, r2, r1, r3
 8009b0c:	9309      	strle	r3, [sp, #36]	; 0x24
 8009b0e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009b12:	3701      	adds	r7, #1
 8009b14:	901d      	str	r0, [sp, #116]	; 0x74
 8009b16:	e7bf      	b.n	8009a98 <_strtod_l+0x158>
 8009b18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b1a:	195a      	adds	r2, r3, r5
 8009b1c:	921d      	str	r2, [sp, #116]	; 0x74
 8009b1e:	5d5b      	ldrb	r3, [r3, r5]
 8009b20:	2f00      	cmp	r7, #0
 8009b22:	d037      	beq.n	8009b94 <_strtod_l+0x254>
 8009b24:	9007      	str	r0, [sp, #28]
 8009b26:	463d      	mov	r5, r7
 8009b28:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009b2c:	2a09      	cmp	r2, #9
 8009b2e:	d912      	bls.n	8009b56 <_strtod_l+0x216>
 8009b30:	2201      	movs	r2, #1
 8009b32:	e7c2      	b.n	8009aba <_strtod_l+0x17a>
 8009b34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b36:	1c5a      	adds	r2, r3, #1
 8009b38:	921d      	str	r2, [sp, #116]	; 0x74
 8009b3a:	785b      	ldrb	r3, [r3, #1]
 8009b3c:	3001      	adds	r0, #1
 8009b3e:	2b30      	cmp	r3, #48	; 0x30
 8009b40:	d0f8      	beq.n	8009b34 <_strtod_l+0x1f4>
 8009b42:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009b46:	2a08      	cmp	r2, #8
 8009b48:	f200 84db 	bhi.w	800a502 <_strtod_l+0xbc2>
 8009b4c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009b4e:	9007      	str	r0, [sp, #28]
 8009b50:	2000      	movs	r0, #0
 8009b52:	920a      	str	r2, [sp, #40]	; 0x28
 8009b54:	4605      	mov	r5, r0
 8009b56:	3b30      	subs	r3, #48	; 0x30
 8009b58:	f100 0201 	add.w	r2, r0, #1
 8009b5c:	d014      	beq.n	8009b88 <_strtod_l+0x248>
 8009b5e:	9907      	ldr	r1, [sp, #28]
 8009b60:	4411      	add	r1, r2
 8009b62:	9107      	str	r1, [sp, #28]
 8009b64:	462a      	mov	r2, r5
 8009b66:	eb00 0e05 	add.w	lr, r0, r5
 8009b6a:	210a      	movs	r1, #10
 8009b6c:	4572      	cmp	r2, lr
 8009b6e:	d113      	bne.n	8009b98 <_strtod_l+0x258>
 8009b70:	182a      	adds	r2, r5, r0
 8009b72:	2a08      	cmp	r2, #8
 8009b74:	f105 0501 	add.w	r5, r5, #1
 8009b78:	4405      	add	r5, r0
 8009b7a:	dc1c      	bgt.n	8009bb6 <_strtod_l+0x276>
 8009b7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b7e:	220a      	movs	r2, #10
 8009b80:	fb02 3301 	mla	r3, r2, r1, r3
 8009b84:	9309      	str	r3, [sp, #36]	; 0x24
 8009b86:	2200      	movs	r2, #0
 8009b88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b8a:	1c59      	adds	r1, r3, #1
 8009b8c:	911d      	str	r1, [sp, #116]	; 0x74
 8009b8e:	785b      	ldrb	r3, [r3, #1]
 8009b90:	4610      	mov	r0, r2
 8009b92:	e7c9      	b.n	8009b28 <_strtod_l+0x1e8>
 8009b94:	4638      	mov	r0, r7
 8009b96:	e7d2      	b.n	8009b3e <_strtod_l+0x1fe>
 8009b98:	2a08      	cmp	r2, #8
 8009b9a:	dc04      	bgt.n	8009ba6 <_strtod_l+0x266>
 8009b9c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009b9e:	434e      	muls	r6, r1
 8009ba0:	9609      	str	r6, [sp, #36]	; 0x24
 8009ba2:	3201      	adds	r2, #1
 8009ba4:	e7e2      	b.n	8009b6c <_strtod_l+0x22c>
 8009ba6:	f102 0c01 	add.w	ip, r2, #1
 8009baa:	f1bc 0f10 	cmp.w	ip, #16
 8009bae:	bfd8      	it	le
 8009bb0:	fb01 f909 	mulle.w	r9, r1, r9
 8009bb4:	e7f5      	b.n	8009ba2 <_strtod_l+0x262>
 8009bb6:	2d10      	cmp	r5, #16
 8009bb8:	bfdc      	itt	le
 8009bba:	220a      	movle	r2, #10
 8009bbc:	fb02 3909 	mlale	r9, r2, r9, r3
 8009bc0:	e7e1      	b.n	8009b86 <_strtod_l+0x246>
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	9307      	str	r3, [sp, #28]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	e77c      	b.n	8009ac4 <_strtod_l+0x184>
 8009bca:	f04f 0c00 	mov.w	ip, #0
 8009bce:	f108 0302 	add.w	r3, r8, #2
 8009bd2:	931d      	str	r3, [sp, #116]	; 0x74
 8009bd4:	f898 3002 	ldrb.w	r3, [r8, #2]
 8009bd8:	e785      	b.n	8009ae6 <_strtod_l+0x1a6>
 8009bda:	f04f 0c01 	mov.w	ip, #1
 8009bde:	e7f6      	b.n	8009bce <_strtod_l+0x28e>
 8009be0:	0800ffc0 	.word	0x0800ffc0
 8009be4:	0800fd6c 	.word	0x0800fd6c
 8009be8:	7ff00000 	.word	0x7ff00000
 8009bec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009bee:	1c59      	adds	r1, r3, #1
 8009bf0:	911d      	str	r1, [sp, #116]	; 0x74
 8009bf2:	785b      	ldrb	r3, [r3, #1]
 8009bf4:	2b30      	cmp	r3, #48	; 0x30
 8009bf6:	d0f9      	beq.n	8009bec <_strtod_l+0x2ac>
 8009bf8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8009bfc:	2908      	cmp	r1, #8
 8009bfe:	f63f af79 	bhi.w	8009af4 <_strtod_l+0x1b4>
 8009c02:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009c06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c08:	9308      	str	r3, [sp, #32]
 8009c0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c0c:	1c59      	adds	r1, r3, #1
 8009c0e:	911d      	str	r1, [sp, #116]	; 0x74
 8009c10:	785b      	ldrb	r3, [r3, #1]
 8009c12:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8009c16:	2e09      	cmp	r6, #9
 8009c18:	d937      	bls.n	8009c8a <_strtod_l+0x34a>
 8009c1a:	9e08      	ldr	r6, [sp, #32]
 8009c1c:	1b89      	subs	r1, r1, r6
 8009c1e:	2908      	cmp	r1, #8
 8009c20:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009c24:	dc02      	bgt.n	8009c2c <_strtod_l+0x2ec>
 8009c26:	4576      	cmp	r6, lr
 8009c28:	bfa8      	it	ge
 8009c2a:	4676      	movge	r6, lr
 8009c2c:	f1bc 0f00 	cmp.w	ip, #0
 8009c30:	d000      	beq.n	8009c34 <_strtod_l+0x2f4>
 8009c32:	4276      	negs	r6, r6
 8009c34:	2d00      	cmp	r5, #0
 8009c36:	d14f      	bne.n	8009cd8 <_strtod_l+0x398>
 8009c38:	9904      	ldr	r1, [sp, #16]
 8009c3a:	4301      	orrs	r1, r0
 8009c3c:	f47f aec2 	bne.w	80099c4 <_strtod_l+0x84>
 8009c40:	2a00      	cmp	r2, #0
 8009c42:	f47f aedb 	bne.w	80099fc <_strtod_l+0xbc>
 8009c46:	2b69      	cmp	r3, #105	; 0x69
 8009c48:	d027      	beq.n	8009c9a <_strtod_l+0x35a>
 8009c4a:	dc24      	bgt.n	8009c96 <_strtod_l+0x356>
 8009c4c:	2b49      	cmp	r3, #73	; 0x49
 8009c4e:	d024      	beq.n	8009c9a <_strtod_l+0x35a>
 8009c50:	2b4e      	cmp	r3, #78	; 0x4e
 8009c52:	f47f aed3 	bne.w	80099fc <_strtod_l+0xbc>
 8009c56:	499e      	ldr	r1, [pc, #632]	; (8009ed0 <_strtod_l+0x590>)
 8009c58:	a81d      	add	r0, sp, #116	; 0x74
 8009c5a:	f001 fe55 	bl	800b908 <__match>
 8009c5e:	2800      	cmp	r0, #0
 8009c60:	f43f aecc 	beq.w	80099fc <_strtod_l+0xbc>
 8009c64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	2b28      	cmp	r3, #40	; 0x28
 8009c6a:	d12d      	bne.n	8009cc8 <_strtod_l+0x388>
 8009c6c:	4999      	ldr	r1, [pc, #612]	; (8009ed4 <_strtod_l+0x594>)
 8009c6e:	aa20      	add	r2, sp, #128	; 0x80
 8009c70:	a81d      	add	r0, sp, #116	; 0x74
 8009c72:	f001 fe5d 	bl	800b930 <__hexnan>
 8009c76:	2805      	cmp	r0, #5
 8009c78:	d126      	bne.n	8009cc8 <_strtod_l+0x388>
 8009c7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c7c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8009c80:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009c84:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009c88:	e69c      	b.n	80099c4 <_strtod_l+0x84>
 8009c8a:	210a      	movs	r1, #10
 8009c8c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009c90:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009c94:	e7b9      	b.n	8009c0a <_strtod_l+0x2ca>
 8009c96:	2b6e      	cmp	r3, #110	; 0x6e
 8009c98:	e7db      	b.n	8009c52 <_strtod_l+0x312>
 8009c9a:	498f      	ldr	r1, [pc, #572]	; (8009ed8 <_strtod_l+0x598>)
 8009c9c:	a81d      	add	r0, sp, #116	; 0x74
 8009c9e:	f001 fe33 	bl	800b908 <__match>
 8009ca2:	2800      	cmp	r0, #0
 8009ca4:	f43f aeaa 	beq.w	80099fc <_strtod_l+0xbc>
 8009ca8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009caa:	498c      	ldr	r1, [pc, #560]	; (8009edc <_strtod_l+0x59c>)
 8009cac:	3b01      	subs	r3, #1
 8009cae:	a81d      	add	r0, sp, #116	; 0x74
 8009cb0:	931d      	str	r3, [sp, #116]	; 0x74
 8009cb2:	f001 fe29 	bl	800b908 <__match>
 8009cb6:	b910      	cbnz	r0, 8009cbe <_strtod_l+0x37e>
 8009cb8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009cba:	3301      	adds	r3, #1
 8009cbc:	931d      	str	r3, [sp, #116]	; 0x74
 8009cbe:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8009eec <_strtod_l+0x5ac>
 8009cc2:	f04f 0a00 	mov.w	sl, #0
 8009cc6:	e67d      	b.n	80099c4 <_strtod_l+0x84>
 8009cc8:	4885      	ldr	r0, [pc, #532]	; (8009ee0 <_strtod_l+0x5a0>)
 8009cca:	f002 fdc9 	bl	800c860 <nan>
 8009cce:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009cd2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009cd6:	e675      	b.n	80099c4 <_strtod_l+0x84>
 8009cd8:	9b07      	ldr	r3, [sp, #28]
 8009cda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cdc:	1af3      	subs	r3, r6, r3
 8009cde:	2f00      	cmp	r7, #0
 8009ce0:	bf08      	it	eq
 8009ce2:	462f      	moveq	r7, r5
 8009ce4:	2d10      	cmp	r5, #16
 8009ce6:	9308      	str	r3, [sp, #32]
 8009ce8:	46a8      	mov	r8, r5
 8009cea:	bfa8      	it	ge
 8009cec:	f04f 0810 	movge.w	r8, #16
 8009cf0:	f7f6 fc30 	bl	8000554 <__aeabi_ui2d>
 8009cf4:	2d09      	cmp	r5, #9
 8009cf6:	4682      	mov	sl, r0
 8009cf8:	468b      	mov	fp, r1
 8009cfa:	dd13      	ble.n	8009d24 <_strtod_l+0x3e4>
 8009cfc:	4b79      	ldr	r3, [pc, #484]	; (8009ee4 <_strtod_l+0x5a4>)
 8009cfe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009d02:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009d06:	f7f6 fc9f 	bl	8000648 <__aeabi_dmul>
 8009d0a:	4682      	mov	sl, r0
 8009d0c:	4648      	mov	r0, r9
 8009d0e:	468b      	mov	fp, r1
 8009d10:	f7f6 fc20 	bl	8000554 <__aeabi_ui2d>
 8009d14:	4602      	mov	r2, r0
 8009d16:	460b      	mov	r3, r1
 8009d18:	4650      	mov	r0, sl
 8009d1a:	4659      	mov	r1, fp
 8009d1c:	f7f6 fade 	bl	80002dc <__adddf3>
 8009d20:	4682      	mov	sl, r0
 8009d22:	468b      	mov	fp, r1
 8009d24:	2d0f      	cmp	r5, #15
 8009d26:	dc38      	bgt.n	8009d9a <_strtod_l+0x45a>
 8009d28:	9b08      	ldr	r3, [sp, #32]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	f43f ae4a 	beq.w	80099c4 <_strtod_l+0x84>
 8009d30:	dd24      	ble.n	8009d7c <_strtod_l+0x43c>
 8009d32:	2b16      	cmp	r3, #22
 8009d34:	dc0b      	bgt.n	8009d4e <_strtod_l+0x40e>
 8009d36:	4d6b      	ldr	r5, [pc, #428]	; (8009ee4 <_strtod_l+0x5a4>)
 8009d38:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8009d3c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009d40:	4652      	mov	r2, sl
 8009d42:	465b      	mov	r3, fp
 8009d44:	f7f6 fc80 	bl	8000648 <__aeabi_dmul>
 8009d48:	4682      	mov	sl, r0
 8009d4a:	468b      	mov	fp, r1
 8009d4c:	e63a      	b.n	80099c4 <_strtod_l+0x84>
 8009d4e:	9a08      	ldr	r2, [sp, #32]
 8009d50:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009d54:	4293      	cmp	r3, r2
 8009d56:	db20      	blt.n	8009d9a <_strtod_l+0x45a>
 8009d58:	4c62      	ldr	r4, [pc, #392]	; (8009ee4 <_strtod_l+0x5a4>)
 8009d5a:	f1c5 050f 	rsb	r5, r5, #15
 8009d5e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009d62:	4652      	mov	r2, sl
 8009d64:	465b      	mov	r3, fp
 8009d66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d6a:	f7f6 fc6d 	bl	8000648 <__aeabi_dmul>
 8009d6e:	9b08      	ldr	r3, [sp, #32]
 8009d70:	1b5d      	subs	r5, r3, r5
 8009d72:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009d76:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009d7a:	e7e3      	b.n	8009d44 <_strtod_l+0x404>
 8009d7c:	9b08      	ldr	r3, [sp, #32]
 8009d7e:	3316      	adds	r3, #22
 8009d80:	db0b      	blt.n	8009d9a <_strtod_l+0x45a>
 8009d82:	9b07      	ldr	r3, [sp, #28]
 8009d84:	4a57      	ldr	r2, [pc, #348]	; (8009ee4 <_strtod_l+0x5a4>)
 8009d86:	1b9e      	subs	r6, r3, r6
 8009d88:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8009d8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009d90:	4650      	mov	r0, sl
 8009d92:	4659      	mov	r1, fp
 8009d94:	f7f6 fd82 	bl	800089c <__aeabi_ddiv>
 8009d98:	e7d6      	b.n	8009d48 <_strtod_l+0x408>
 8009d9a:	9b08      	ldr	r3, [sp, #32]
 8009d9c:	eba5 0808 	sub.w	r8, r5, r8
 8009da0:	4498      	add	r8, r3
 8009da2:	f1b8 0f00 	cmp.w	r8, #0
 8009da6:	dd71      	ble.n	8009e8c <_strtod_l+0x54c>
 8009da8:	f018 030f 	ands.w	r3, r8, #15
 8009dac:	d00a      	beq.n	8009dc4 <_strtod_l+0x484>
 8009dae:	494d      	ldr	r1, [pc, #308]	; (8009ee4 <_strtod_l+0x5a4>)
 8009db0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009db4:	4652      	mov	r2, sl
 8009db6:	465b      	mov	r3, fp
 8009db8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dbc:	f7f6 fc44 	bl	8000648 <__aeabi_dmul>
 8009dc0:	4682      	mov	sl, r0
 8009dc2:	468b      	mov	fp, r1
 8009dc4:	f038 080f 	bics.w	r8, r8, #15
 8009dc8:	d04d      	beq.n	8009e66 <_strtod_l+0x526>
 8009dca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009dce:	dd22      	ble.n	8009e16 <_strtod_l+0x4d6>
 8009dd0:	2500      	movs	r5, #0
 8009dd2:	462e      	mov	r6, r5
 8009dd4:	9509      	str	r5, [sp, #36]	; 0x24
 8009dd6:	9507      	str	r5, [sp, #28]
 8009dd8:	2322      	movs	r3, #34	; 0x22
 8009dda:	f8df b110 	ldr.w	fp, [pc, #272]	; 8009eec <_strtod_l+0x5ac>
 8009dde:	6023      	str	r3, [r4, #0]
 8009de0:	f04f 0a00 	mov.w	sl, #0
 8009de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	f43f adec 	beq.w	80099c4 <_strtod_l+0x84>
 8009dec:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009dee:	4620      	mov	r0, r4
 8009df0:	f001 fea6 	bl	800bb40 <_Bfree>
 8009df4:	9907      	ldr	r1, [sp, #28]
 8009df6:	4620      	mov	r0, r4
 8009df8:	f001 fea2 	bl	800bb40 <_Bfree>
 8009dfc:	4631      	mov	r1, r6
 8009dfe:	4620      	mov	r0, r4
 8009e00:	f001 fe9e 	bl	800bb40 <_Bfree>
 8009e04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e06:	4620      	mov	r0, r4
 8009e08:	f001 fe9a 	bl	800bb40 <_Bfree>
 8009e0c:	4629      	mov	r1, r5
 8009e0e:	4620      	mov	r0, r4
 8009e10:	f001 fe96 	bl	800bb40 <_Bfree>
 8009e14:	e5d6      	b.n	80099c4 <_strtod_l+0x84>
 8009e16:	2300      	movs	r3, #0
 8009e18:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009e1c:	4650      	mov	r0, sl
 8009e1e:	4659      	mov	r1, fp
 8009e20:	4699      	mov	r9, r3
 8009e22:	f1b8 0f01 	cmp.w	r8, #1
 8009e26:	dc21      	bgt.n	8009e6c <_strtod_l+0x52c>
 8009e28:	b10b      	cbz	r3, 8009e2e <_strtod_l+0x4ee>
 8009e2a:	4682      	mov	sl, r0
 8009e2c:	468b      	mov	fp, r1
 8009e2e:	4b2e      	ldr	r3, [pc, #184]	; (8009ee8 <_strtod_l+0x5a8>)
 8009e30:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009e34:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009e38:	4652      	mov	r2, sl
 8009e3a:	465b      	mov	r3, fp
 8009e3c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009e40:	f7f6 fc02 	bl	8000648 <__aeabi_dmul>
 8009e44:	4b29      	ldr	r3, [pc, #164]	; (8009eec <_strtod_l+0x5ac>)
 8009e46:	460a      	mov	r2, r1
 8009e48:	400b      	ands	r3, r1
 8009e4a:	4929      	ldr	r1, [pc, #164]	; (8009ef0 <_strtod_l+0x5b0>)
 8009e4c:	428b      	cmp	r3, r1
 8009e4e:	4682      	mov	sl, r0
 8009e50:	d8be      	bhi.n	8009dd0 <_strtod_l+0x490>
 8009e52:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009e56:	428b      	cmp	r3, r1
 8009e58:	bf86      	itte	hi
 8009e5a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009ef4 <_strtod_l+0x5b4>
 8009e5e:	f04f 3aff 	movhi.w	sl, #4294967295
 8009e62:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009e66:	2300      	movs	r3, #0
 8009e68:	9304      	str	r3, [sp, #16]
 8009e6a:	e081      	b.n	8009f70 <_strtod_l+0x630>
 8009e6c:	f018 0f01 	tst.w	r8, #1
 8009e70:	d007      	beq.n	8009e82 <_strtod_l+0x542>
 8009e72:	4b1d      	ldr	r3, [pc, #116]	; (8009ee8 <_strtod_l+0x5a8>)
 8009e74:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7c:	f7f6 fbe4 	bl	8000648 <__aeabi_dmul>
 8009e80:	2301      	movs	r3, #1
 8009e82:	f109 0901 	add.w	r9, r9, #1
 8009e86:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009e8a:	e7ca      	b.n	8009e22 <_strtod_l+0x4e2>
 8009e8c:	d0eb      	beq.n	8009e66 <_strtod_l+0x526>
 8009e8e:	f1c8 0800 	rsb	r8, r8, #0
 8009e92:	f018 020f 	ands.w	r2, r8, #15
 8009e96:	d00a      	beq.n	8009eae <_strtod_l+0x56e>
 8009e98:	4b12      	ldr	r3, [pc, #72]	; (8009ee4 <_strtod_l+0x5a4>)
 8009e9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e9e:	4650      	mov	r0, sl
 8009ea0:	4659      	mov	r1, fp
 8009ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea6:	f7f6 fcf9 	bl	800089c <__aeabi_ddiv>
 8009eaa:	4682      	mov	sl, r0
 8009eac:	468b      	mov	fp, r1
 8009eae:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009eb2:	d0d8      	beq.n	8009e66 <_strtod_l+0x526>
 8009eb4:	f1b8 0f1f 	cmp.w	r8, #31
 8009eb8:	dd1e      	ble.n	8009ef8 <_strtod_l+0x5b8>
 8009eba:	2500      	movs	r5, #0
 8009ebc:	462e      	mov	r6, r5
 8009ebe:	9509      	str	r5, [sp, #36]	; 0x24
 8009ec0:	9507      	str	r5, [sp, #28]
 8009ec2:	2322      	movs	r3, #34	; 0x22
 8009ec4:	f04f 0a00 	mov.w	sl, #0
 8009ec8:	f04f 0b00 	mov.w	fp, #0
 8009ecc:	6023      	str	r3, [r4, #0]
 8009ece:	e789      	b.n	8009de4 <_strtod_l+0x4a4>
 8009ed0:	0800fd3d 	.word	0x0800fd3d
 8009ed4:	0800fd80 	.word	0x0800fd80
 8009ed8:	0800fd35 	.word	0x0800fd35
 8009edc:	0800fec4 	.word	0x0800fec4
 8009ee0:	08010180 	.word	0x08010180
 8009ee4:	08010060 	.word	0x08010060
 8009ee8:	08010038 	.word	0x08010038
 8009eec:	7ff00000 	.word	0x7ff00000
 8009ef0:	7ca00000 	.word	0x7ca00000
 8009ef4:	7fefffff 	.word	0x7fefffff
 8009ef8:	f018 0310 	ands.w	r3, r8, #16
 8009efc:	bf18      	it	ne
 8009efe:	236a      	movne	r3, #106	; 0x6a
 8009f00:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800a2b8 <_strtod_l+0x978>
 8009f04:	9304      	str	r3, [sp, #16]
 8009f06:	4650      	mov	r0, sl
 8009f08:	4659      	mov	r1, fp
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	f018 0f01 	tst.w	r8, #1
 8009f10:	d004      	beq.n	8009f1c <_strtod_l+0x5dc>
 8009f12:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009f16:	f7f6 fb97 	bl	8000648 <__aeabi_dmul>
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009f20:	f109 0908 	add.w	r9, r9, #8
 8009f24:	d1f2      	bne.n	8009f0c <_strtod_l+0x5cc>
 8009f26:	b10b      	cbz	r3, 8009f2c <_strtod_l+0x5ec>
 8009f28:	4682      	mov	sl, r0
 8009f2a:	468b      	mov	fp, r1
 8009f2c:	9b04      	ldr	r3, [sp, #16]
 8009f2e:	b1bb      	cbz	r3, 8009f60 <_strtod_l+0x620>
 8009f30:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009f34:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	4659      	mov	r1, fp
 8009f3c:	dd10      	ble.n	8009f60 <_strtod_l+0x620>
 8009f3e:	2b1f      	cmp	r3, #31
 8009f40:	f340 8128 	ble.w	800a194 <_strtod_l+0x854>
 8009f44:	2b34      	cmp	r3, #52	; 0x34
 8009f46:	bfde      	ittt	le
 8009f48:	3b20      	suble	r3, #32
 8009f4a:	f04f 32ff 	movle.w	r2, #4294967295
 8009f4e:	fa02 f303 	lslle.w	r3, r2, r3
 8009f52:	f04f 0a00 	mov.w	sl, #0
 8009f56:	bfcc      	ite	gt
 8009f58:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009f5c:	ea03 0b01 	andle.w	fp, r3, r1
 8009f60:	2200      	movs	r2, #0
 8009f62:	2300      	movs	r3, #0
 8009f64:	4650      	mov	r0, sl
 8009f66:	4659      	mov	r1, fp
 8009f68:	f7f6 fdd6 	bl	8000b18 <__aeabi_dcmpeq>
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	d1a4      	bne.n	8009eba <_strtod_l+0x57a>
 8009f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f72:	9300      	str	r3, [sp, #0]
 8009f74:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009f76:	462b      	mov	r3, r5
 8009f78:	463a      	mov	r2, r7
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	f001 fe4c 	bl	800bc18 <__s2b>
 8009f80:	9009      	str	r0, [sp, #36]	; 0x24
 8009f82:	2800      	cmp	r0, #0
 8009f84:	f43f af24 	beq.w	8009dd0 <_strtod_l+0x490>
 8009f88:	9b07      	ldr	r3, [sp, #28]
 8009f8a:	1b9e      	subs	r6, r3, r6
 8009f8c:	9b08      	ldr	r3, [sp, #32]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	bfb4      	ite	lt
 8009f92:	4633      	movlt	r3, r6
 8009f94:	2300      	movge	r3, #0
 8009f96:	9310      	str	r3, [sp, #64]	; 0x40
 8009f98:	9b08      	ldr	r3, [sp, #32]
 8009f9a:	2500      	movs	r5, #0
 8009f9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009fa0:	9318      	str	r3, [sp, #96]	; 0x60
 8009fa2:	462e      	mov	r6, r5
 8009fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	6859      	ldr	r1, [r3, #4]
 8009faa:	f001 fd89 	bl	800bac0 <_Balloc>
 8009fae:	9007      	str	r0, [sp, #28]
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	f43f af11 	beq.w	8009dd8 <_strtod_l+0x498>
 8009fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fb8:	691a      	ldr	r2, [r3, #16]
 8009fba:	3202      	adds	r2, #2
 8009fbc:	f103 010c 	add.w	r1, r3, #12
 8009fc0:	0092      	lsls	r2, r2, #2
 8009fc2:	300c      	adds	r0, #12
 8009fc4:	f001 fd6e 	bl	800baa4 <memcpy>
 8009fc8:	ec4b ab10 	vmov	d0, sl, fp
 8009fcc:	aa20      	add	r2, sp, #128	; 0x80
 8009fce:	a91f      	add	r1, sp, #124	; 0x7c
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8009fd6:	f002 f95b 	bl	800c290 <__d2b>
 8009fda:	901e      	str	r0, [sp, #120]	; 0x78
 8009fdc:	2800      	cmp	r0, #0
 8009fde:	f43f aefb 	beq.w	8009dd8 <_strtod_l+0x498>
 8009fe2:	2101      	movs	r1, #1
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	f001 feb1 	bl	800bd4c <__i2b>
 8009fea:	4606      	mov	r6, r0
 8009fec:	2800      	cmp	r0, #0
 8009fee:	f43f aef3 	beq.w	8009dd8 <_strtod_l+0x498>
 8009ff2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009ff4:	9904      	ldr	r1, [sp, #16]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	bfab      	itete	ge
 8009ffa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8009ffc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8009ffe:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800a000:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800a004:	bfac      	ite	ge
 800a006:	eb03 0902 	addge.w	r9, r3, r2
 800a00a:	1ad7      	sublt	r7, r2, r3
 800a00c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a00e:	eba3 0801 	sub.w	r8, r3, r1
 800a012:	4490      	add	r8, r2
 800a014:	4ba3      	ldr	r3, [pc, #652]	; (800a2a4 <_strtod_l+0x964>)
 800a016:	f108 38ff 	add.w	r8, r8, #4294967295
 800a01a:	4598      	cmp	r8, r3
 800a01c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a020:	f280 80cc 	bge.w	800a1bc <_strtod_l+0x87c>
 800a024:	eba3 0308 	sub.w	r3, r3, r8
 800a028:	2b1f      	cmp	r3, #31
 800a02a:	eba2 0203 	sub.w	r2, r2, r3
 800a02e:	f04f 0101 	mov.w	r1, #1
 800a032:	f300 80b6 	bgt.w	800a1a2 <_strtod_l+0x862>
 800a036:	fa01 f303 	lsl.w	r3, r1, r3
 800a03a:	9311      	str	r3, [sp, #68]	; 0x44
 800a03c:	2300      	movs	r3, #0
 800a03e:	930c      	str	r3, [sp, #48]	; 0x30
 800a040:	eb09 0802 	add.w	r8, r9, r2
 800a044:	9b04      	ldr	r3, [sp, #16]
 800a046:	45c1      	cmp	r9, r8
 800a048:	4417      	add	r7, r2
 800a04a:	441f      	add	r7, r3
 800a04c:	464b      	mov	r3, r9
 800a04e:	bfa8      	it	ge
 800a050:	4643      	movge	r3, r8
 800a052:	42bb      	cmp	r3, r7
 800a054:	bfa8      	it	ge
 800a056:	463b      	movge	r3, r7
 800a058:	2b00      	cmp	r3, #0
 800a05a:	bfc2      	ittt	gt
 800a05c:	eba8 0803 	subgt.w	r8, r8, r3
 800a060:	1aff      	subgt	r7, r7, r3
 800a062:	eba9 0903 	subgt.w	r9, r9, r3
 800a066:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a068:	2b00      	cmp	r3, #0
 800a06a:	dd17      	ble.n	800a09c <_strtod_l+0x75c>
 800a06c:	4631      	mov	r1, r6
 800a06e:	461a      	mov	r2, r3
 800a070:	4620      	mov	r0, r4
 800a072:	f001 ff27 	bl	800bec4 <__pow5mult>
 800a076:	4606      	mov	r6, r0
 800a078:	2800      	cmp	r0, #0
 800a07a:	f43f aead 	beq.w	8009dd8 <_strtod_l+0x498>
 800a07e:	4601      	mov	r1, r0
 800a080:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a082:	4620      	mov	r0, r4
 800a084:	f001 fe78 	bl	800bd78 <__multiply>
 800a088:	900f      	str	r0, [sp, #60]	; 0x3c
 800a08a:	2800      	cmp	r0, #0
 800a08c:	f43f aea4 	beq.w	8009dd8 <_strtod_l+0x498>
 800a090:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a092:	4620      	mov	r0, r4
 800a094:	f001 fd54 	bl	800bb40 <_Bfree>
 800a098:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a09a:	931e      	str	r3, [sp, #120]	; 0x78
 800a09c:	f1b8 0f00 	cmp.w	r8, #0
 800a0a0:	f300 8091 	bgt.w	800a1c6 <_strtod_l+0x886>
 800a0a4:	9b08      	ldr	r3, [sp, #32]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	dd08      	ble.n	800a0bc <_strtod_l+0x77c>
 800a0aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a0ac:	9907      	ldr	r1, [sp, #28]
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	f001 ff08 	bl	800bec4 <__pow5mult>
 800a0b4:	9007      	str	r0, [sp, #28]
 800a0b6:	2800      	cmp	r0, #0
 800a0b8:	f43f ae8e 	beq.w	8009dd8 <_strtod_l+0x498>
 800a0bc:	2f00      	cmp	r7, #0
 800a0be:	dd08      	ble.n	800a0d2 <_strtod_l+0x792>
 800a0c0:	9907      	ldr	r1, [sp, #28]
 800a0c2:	463a      	mov	r2, r7
 800a0c4:	4620      	mov	r0, r4
 800a0c6:	f001 ff57 	bl	800bf78 <__lshift>
 800a0ca:	9007      	str	r0, [sp, #28]
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	f43f ae83 	beq.w	8009dd8 <_strtod_l+0x498>
 800a0d2:	f1b9 0f00 	cmp.w	r9, #0
 800a0d6:	dd08      	ble.n	800a0ea <_strtod_l+0x7aa>
 800a0d8:	4631      	mov	r1, r6
 800a0da:	464a      	mov	r2, r9
 800a0dc:	4620      	mov	r0, r4
 800a0de:	f001 ff4b 	bl	800bf78 <__lshift>
 800a0e2:	4606      	mov	r6, r0
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	f43f ae77 	beq.w	8009dd8 <_strtod_l+0x498>
 800a0ea:	9a07      	ldr	r2, [sp, #28]
 800a0ec:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	f001 ffca 	bl	800c088 <__mdiff>
 800a0f4:	4605      	mov	r5, r0
 800a0f6:	2800      	cmp	r0, #0
 800a0f8:	f43f ae6e 	beq.w	8009dd8 <_strtod_l+0x498>
 800a0fc:	68c3      	ldr	r3, [r0, #12]
 800a0fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800a100:	2300      	movs	r3, #0
 800a102:	60c3      	str	r3, [r0, #12]
 800a104:	4631      	mov	r1, r6
 800a106:	f001 ffa3 	bl	800c050 <__mcmp>
 800a10a:	2800      	cmp	r0, #0
 800a10c:	da65      	bge.n	800a1da <_strtod_l+0x89a>
 800a10e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a110:	ea53 030a 	orrs.w	r3, r3, sl
 800a114:	f040 8087 	bne.w	800a226 <_strtod_l+0x8e6>
 800a118:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	f040 8082 	bne.w	800a226 <_strtod_l+0x8e6>
 800a122:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a126:	0d1b      	lsrs	r3, r3, #20
 800a128:	051b      	lsls	r3, r3, #20
 800a12a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a12e:	d97a      	bls.n	800a226 <_strtod_l+0x8e6>
 800a130:	696b      	ldr	r3, [r5, #20]
 800a132:	b913      	cbnz	r3, 800a13a <_strtod_l+0x7fa>
 800a134:	692b      	ldr	r3, [r5, #16]
 800a136:	2b01      	cmp	r3, #1
 800a138:	dd75      	ble.n	800a226 <_strtod_l+0x8e6>
 800a13a:	4629      	mov	r1, r5
 800a13c:	2201      	movs	r2, #1
 800a13e:	4620      	mov	r0, r4
 800a140:	f001 ff1a 	bl	800bf78 <__lshift>
 800a144:	4631      	mov	r1, r6
 800a146:	4605      	mov	r5, r0
 800a148:	f001 ff82 	bl	800c050 <__mcmp>
 800a14c:	2800      	cmp	r0, #0
 800a14e:	dd6a      	ble.n	800a226 <_strtod_l+0x8e6>
 800a150:	9904      	ldr	r1, [sp, #16]
 800a152:	4a55      	ldr	r2, [pc, #340]	; (800a2a8 <_strtod_l+0x968>)
 800a154:	465b      	mov	r3, fp
 800a156:	2900      	cmp	r1, #0
 800a158:	f000 8085 	beq.w	800a266 <_strtod_l+0x926>
 800a15c:	ea02 010b 	and.w	r1, r2, fp
 800a160:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a164:	dc7f      	bgt.n	800a266 <_strtod_l+0x926>
 800a166:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a16a:	f77f aeaa 	ble.w	8009ec2 <_strtod_l+0x582>
 800a16e:	4a4f      	ldr	r2, [pc, #316]	; (800a2ac <_strtod_l+0x96c>)
 800a170:	2300      	movs	r3, #0
 800a172:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800a176:	4650      	mov	r0, sl
 800a178:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800a17c:	4659      	mov	r1, fp
 800a17e:	f7f6 fa63 	bl	8000648 <__aeabi_dmul>
 800a182:	460b      	mov	r3, r1
 800a184:	4303      	orrs	r3, r0
 800a186:	bf08      	it	eq
 800a188:	2322      	moveq	r3, #34	; 0x22
 800a18a:	4682      	mov	sl, r0
 800a18c:	468b      	mov	fp, r1
 800a18e:	bf08      	it	eq
 800a190:	6023      	streq	r3, [r4, #0]
 800a192:	e62b      	b.n	8009dec <_strtod_l+0x4ac>
 800a194:	f04f 32ff 	mov.w	r2, #4294967295
 800a198:	fa02 f303 	lsl.w	r3, r2, r3
 800a19c:	ea03 0a0a 	and.w	sl, r3, sl
 800a1a0:	e6de      	b.n	8009f60 <_strtod_l+0x620>
 800a1a2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a1a6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a1aa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a1ae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a1b2:	fa01 f308 	lsl.w	r3, r1, r8
 800a1b6:	930c      	str	r3, [sp, #48]	; 0x30
 800a1b8:	9111      	str	r1, [sp, #68]	; 0x44
 800a1ba:	e741      	b.n	800a040 <_strtod_l+0x700>
 800a1bc:	2300      	movs	r3, #0
 800a1be:	930c      	str	r3, [sp, #48]	; 0x30
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	9311      	str	r3, [sp, #68]	; 0x44
 800a1c4:	e73c      	b.n	800a040 <_strtod_l+0x700>
 800a1c6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a1c8:	4642      	mov	r2, r8
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	f001 fed4 	bl	800bf78 <__lshift>
 800a1d0:	901e      	str	r0, [sp, #120]	; 0x78
 800a1d2:	2800      	cmp	r0, #0
 800a1d4:	f47f af66 	bne.w	800a0a4 <_strtod_l+0x764>
 800a1d8:	e5fe      	b.n	8009dd8 <_strtod_l+0x498>
 800a1da:	465f      	mov	r7, fp
 800a1dc:	d16e      	bne.n	800a2bc <_strtod_l+0x97c>
 800a1de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a1e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a1e4:	b342      	cbz	r2, 800a238 <_strtod_l+0x8f8>
 800a1e6:	4a32      	ldr	r2, [pc, #200]	; (800a2b0 <_strtod_l+0x970>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d128      	bne.n	800a23e <_strtod_l+0x8fe>
 800a1ec:	9b04      	ldr	r3, [sp, #16]
 800a1ee:	4650      	mov	r0, sl
 800a1f0:	b1eb      	cbz	r3, 800a22e <_strtod_l+0x8ee>
 800a1f2:	4a2d      	ldr	r2, [pc, #180]	; (800a2a8 <_strtod_l+0x968>)
 800a1f4:	403a      	ands	r2, r7
 800a1f6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a1fa:	f04f 31ff 	mov.w	r1, #4294967295
 800a1fe:	d819      	bhi.n	800a234 <_strtod_l+0x8f4>
 800a200:	0d12      	lsrs	r2, r2, #20
 800a202:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a206:	fa01 f303 	lsl.w	r3, r1, r3
 800a20a:	4298      	cmp	r0, r3
 800a20c:	d117      	bne.n	800a23e <_strtod_l+0x8fe>
 800a20e:	4b29      	ldr	r3, [pc, #164]	; (800a2b4 <_strtod_l+0x974>)
 800a210:	429f      	cmp	r7, r3
 800a212:	d102      	bne.n	800a21a <_strtod_l+0x8da>
 800a214:	3001      	adds	r0, #1
 800a216:	f43f addf 	beq.w	8009dd8 <_strtod_l+0x498>
 800a21a:	4b23      	ldr	r3, [pc, #140]	; (800a2a8 <_strtod_l+0x968>)
 800a21c:	403b      	ands	r3, r7
 800a21e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a222:	f04f 0a00 	mov.w	sl, #0
 800a226:	9b04      	ldr	r3, [sp, #16]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d1a0      	bne.n	800a16e <_strtod_l+0x82e>
 800a22c:	e5de      	b.n	8009dec <_strtod_l+0x4ac>
 800a22e:	f04f 33ff 	mov.w	r3, #4294967295
 800a232:	e7ea      	b.n	800a20a <_strtod_l+0x8ca>
 800a234:	460b      	mov	r3, r1
 800a236:	e7e8      	b.n	800a20a <_strtod_l+0x8ca>
 800a238:	ea53 030a 	orrs.w	r3, r3, sl
 800a23c:	d088      	beq.n	800a150 <_strtod_l+0x810>
 800a23e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a240:	b1db      	cbz	r3, 800a27a <_strtod_l+0x93a>
 800a242:	423b      	tst	r3, r7
 800a244:	d0ef      	beq.n	800a226 <_strtod_l+0x8e6>
 800a246:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a248:	9a04      	ldr	r2, [sp, #16]
 800a24a:	4650      	mov	r0, sl
 800a24c:	4659      	mov	r1, fp
 800a24e:	b1c3      	cbz	r3, 800a282 <_strtod_l+0x942>
 800a250:	f7ff fb58 	bl	8009904 <sulp>
 800a254:	4602      	mov	r2, r0
 800a256:	460b      	mov	r3, r1
 800a258:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a25c:	f7f6 f83e 	bl	80002dc <__adddf3>
 800a260:	4682      	mov	sl, r0
 800a262:	468b      	mov	fp, r1
 800a264:	e7df      	b.n	800a226 <_strtod_l+0x8e6>
 800a266:	4013      	ands	r3, r2
 800a268:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a26c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a270:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a274:	f04f 3aff 	mov.w	sl, #4294967295
 800a278:	e7d5      	b.n	800a226 <_strtod_l+0x8e6>
 800a27a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a27c:	ea13 0f0a 	tst.w	r3, sl
 800a280:	e7e0      	b.n	800a244 <_strtod_l+0x904>
 800a282:	f7ff fb3f 	bl	8009904 <sulp>
 800a286:	4602      	mov	r2, r0
 800a288:	460b      	mov	r3, r1
 800a28a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a28e:	f7f6 f823 	bl	80002d8 <__aeabi_dsub>
 800a292:	2200      	movs	r2, #0
 800a294:	2300      	movs	r3, #0
 800a296:	4682      	mov	sl, r0
 800a298:	468b      	mov	fp, r1
 800a29a:	f7f6 fc3d 	bl	8000b18 <__aeabi_dcmpeq>
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	d0c1      	beq.n	800a226 <_strtod_l+0x8e6>
 800a2a2:	e60e      	b.n	8009ec2 <_strtod_l+0x582>
 800a2a4:	fffffc02 	.word	0xfffffc02
 800a2a8:	7ff00000 	.word	0x7ff00000
 800a2ac:	39500000 	.word	0x39500000
 800a2b0:	000fffff 	.word	0x000fffff
 800a2b4:	7fefffff 	.word	0x7fefffff
 800a2b8:	0800fd98 	.word	0x0800fd98
 800a2bc:	4631      	mov	r1, r6
 800a2be:	4628      	mov	r0, r5
 800a2c0:	f002 f842 	bl	800c348 <__ratio>
 800a2c4:	ec59 8b10 	vmov	r8, r9, d0
 800a2c8:	ee10 0a10 	vmov	r0, s0
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a2d2:	4649      	mov	r1, r9
 800a2d4:	f7f6 fc34 	bl	8000b40 <__aeabi_dcmple>
 800a2d8:	2800      	cmp	r0, #0
 800a2da:	d07c      	beq.n	800a3d6 <_strtod_l+0xa96>
 800a2dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d04c      	beq.n	800a37c <_strtod_l+0xa3c>
 800a2e2:	4b95      	ldr	r3, [pc, #596]	; (800a538 <_strtod_l+0xbf8>)
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a2ea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a538 <_strtod_l+0xbf8>
 800a2ee:	f04f 0800 	mov.w	r8, #0
 800a2f2:	4b92      	ldr	r3, [pc, #584]	; (800a53c <_strtod_l+0xbfc>)
 800a2f4:	403b      	ands	r3, r7
 800a2f6:	9311      	str	r3, [sp, #68]	; 0x44
 800a2f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a2fa:	4b91      	ldr	r3, [pc, #580]	; (800a540 <_strtod_l+0xc00>)
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	f040 80b2 	bne.w	800a466 <_strtod_l+0xb26>
 800a302:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a306:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a30a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a30e:	ec4b ab10 	vmov	d0, sl, fp
 800a312:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800a316:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a31a:	f001 ff3d 	bl	800c198 <__ulp>
 800a31e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a322:	ec53 2b10 	vmov	r2, r3, d0
 800a326:	f7f6 f98f 	bl	8000648 <__aeabi_dmul>
 800a32a:	4652      	mov	r2, sl
 800a32c:	465b      	mov	r3, fp
 800a32e:	f7f5 ffd5 	bl	80002dc <__adddf3>
 800a332:	460b      	mov	r3, r1
 800a334:	4981      	ldr	r1, [pc, #516]	; (800a53c <_strtod_l+0xbfc>)
 800a336:	4a83      	ldr	r2, [pc, #524]	; (800a544 <_strtod_l+0xc04>)
 800a338:	4019      	ands	r1, r3
 800a33a:	4291      	cmp	r1, r2
 800a33c:	4682      	mov	sl, r0
 800a33e:	d95e      	bls.n	800a3fe <_strtod_l+0xabe>
 800a340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a342:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a346:	4293      	cmp	r3, r2
 800a348:	d103      	bne.n	800a352 <_strtod_l+0xa12>
 800a34a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a34c:	3301      	adds	r3, #1
 800a34e:	f43f ad43 	beq.w	8009dd8 <_strtod_l+0x498>
 800a352:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800a550 <_strtod_l+0xc10>
 800a356:	f04f 3aff 	mov.w	sl, #4294967295
 800a35a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a35c:	4620      	mov	r0, r4
 800a35e:	f001 fbef 	bl	800bb40 <_Bfree>
 800a362:	9907      	ldr	r1, [sp, #28]
 800a364:	4620      	mov	r0, r4
 800a366:	f001 fbeb 	bl	800bb40 <_Bfree>
 800a36a:	4631      	mov	r1, r6
 800a36c:	4620      	mov	r0, r4
 800a36e:	f001 fbe7 	bl	800bb40 <_Bfree>
 800a372:	4629      	mov	r1, r5
 800a374:	4620      	mov	r0, r4
 800a376:	f001 fbe3 	bl	800bb40 <_Bfree>
 800a37a:	e613      	b.n	8009fa4 <_strtod_l+0x664>
 800a37c:	f1ba 0f00 	cmp.w	sl, #0
 800a380:	d11b      	bne.n	800a3ba <_strtod_l+0xa7a>
 800a382:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a386:	b9f3      	cbnz	r3, 800a3c6 <_strtod_l+0xa86>
 800a388:	4b6b      	ldr	r3, [pc, #428]	; (800a538 <_strtod_l+0xbf8>)
 800a38a:	2200      	movs	r2, #0
 800a38c:	4640      	mov	r0, r8
 800a38e:	4649      	mov	r1, r9
 800a390:	f7f6 fbcc 	bl	8000b2c <__aeabi_dcmplt>
 800a394:	b9d0      	cbnz	r0, 800a3cc <_strtod_l+0xa8c>
 800a396:	4640      	mov	r0, r8
 800a398:	4649      	mov	r1, r9
 800a39a:	4b6b      	ldr	r3, [pc, #428]	; (800a548 <_strtod_l+0xc08>)
 800a39c:	2200      	movs	r2, #0
 800a39e:	f7f6 f953 	bl	8000648 <__aeabi_dmul>
 800a3a2:	4680      	mov	r8, r0
 800a3a4:	4689      	mov	r9, r1
 800a3a6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a3aa:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800a3ae:	931b      	str	r3, [sp, #108]	; 0x6c
 800a3b0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800a3b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a3b8:	e79b      	b.n	800a2f2 <_strtod_l+0x9b2>
 800a3ba:	f1ba 0f01 	cmp.w	sl, #1
 800a3be:	d102      	bne.n	800a3c6 <_strtod_l+0xa86>
 800a3c0:	2f00      	cmp	r7, #0
 800a3c2:	f43f ad7e 	beq.w	8009ec2 <_strtod_l+0x582>
 800a3c6:	4b61      	ldr	r3, [pc, #388]	; (800a54c <_strtod_l+0xc0c>)
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	e78c      	b.n	800a2e6 <_strtod_l+0x9a6>
 800a3cc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a548 <_strtod_l+0xc08>
 800a3d0:	f04f 0800 	mov.w	r8, #0
 800a3d4:	e7e7      	b.n	800a3a6 <_strtod_l+0xa66>
 800a3d6:	4b5c      	ldr	r3, [pc, #368]	; (800a548 <_strtod_l+0xc08>)
 800a3d8:	4640      	mov	r0, r8
 800a3da:	4649      	mov	r1, r9
 800a3dc:	2200      	movs	r2, #0
 800a3de:	f7f6 f933 	bl	8000648 <__aeabi_dmul>
 800a3e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3e4:	4680      	mov	r8, r0
 800a3e6:	4689      	mov	r9, r1
 800a3e8:	b933      	cbnz	r3, 800a3f8 <_strtod_l+0xab8>
 800a3ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3ee:	9012      	str	r0, [sp, #72]	; 0x48
 800a3f0:	9313      	str	r3, [sp, #76]	; 0x4c
 800a3f2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a3f6:	e7dd      	b.n	800a3b4 <_strtod_l+0xa74>
 800a3f8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800a3fc:	e7f9      	b.n	800a3f2 <_strtod_l+0xab2>
 800a3fe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a402:	9b04      	ldr	r3, [sp, #16]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d1a8      	bne.n	800a35a <_strtod_l+0xa1a>
 800a408:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a40c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a40e:	0d1b      	lsrs	r3, r3, #20
 800a410:	051b      	lsls	r3, r3, #20
 800a412:	429a      	cmp	r2, r3
 800a414:	d1a1      	bne.n	800a35a <_strtod_l+0xa1a>
 800a416:	4640      	mov	r0, r8
 800a418:	4649      	mov	r1, r9
 800a41a:	f7f6 fc75 	bl	8000d08 <__aeabi_d2lz>
 800a41e:	f7f6 f8e5 	bl	80005ec <__aeabi_l2d>
 800a422:	4602      	mov	r2, r0
 800a424:	460b      	mov	r3, r1
 800a426:	4640      	mov	r0, r8
 800a428:	4649      	mov	r1, r9
 800a42a:	f7f5 ff55 	bl	80002d8 <__aeabi_dsub>
 800a42e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a430:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a434:	ea43 030a 	orr.w	r3, r3, sl
 800a438:	4313      	orrs	r3, r2
 800a43a:	4680      	mov	r8, r0
 800a43c:	4689      	mov	r9, r1
 800a43e:	d053      	beq.n	800a4e8 <_strtod_l+0xba8>
 800a440:	a335      	add	r3, pc, #212	; (adr r3, 800a518 <_strtod_l+0xbd8>)
 800a442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a446:	f7f6 fb71 	bl	8000b2c <__aeabi_dcmplt>
 800a44a:	2800      	cmp	r0, #0
 800a44c:	f47f acce 	bne.w	8009dec <_strtod_l+0x4ac>
 800a450:	a333      	add	r3, pc, #204	; (adr r3, 800a520 <_strtod_l+0xbe0>)
 800a452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a456:	4640      	mov	r0, r8
 800a458:	4649      	mov	r1, r9
 800a45a:	f7f6 fb85 	bl	8000b68 <__aeabi_dcmpgt>
 800a45e:	2800      	cmp	r0, #0
 800a460:	f43f af7b 	beq.w	800a35a <_strtod_l+0xa1a>
 800a464:	e4c2      	b.n	8009dec <_strtod_l+0x4ac>
 800a466:	9b04      	ldr	r3, [sp, #16]
 800a468:	b333      	cbz	r3, 800a4b8 <_strtod_l+0xb78>
 800a46a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a46c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a470:	d822      	bhi.n	800a4b8 <_strtod_l+0xb78>
 800a472:	a32d      	add	r3, pc, #180	; (adr r3, 800a528 <_strtod_l+0xbe8>)
 800a474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a478:	4640      	mov	r0, r8
 800a47a:	4649      	mov	r1, r9
 800a47c:	f7f6 fb60 	bl	8000b40 <__aeabi_dcmple>
 800a480:	b1a0      	cbz	r0, 800a4ac <_strtod_l+0xb6c>
 800a482:	4649      	mov	r1, r9
 800a484:	4640      	mov	r0, r8
 800a486:	f7f6 fbb7 	bl	8000bf8 <__aeabi_d2uiz>
 800a48a:	2801      	cmp	r0, #1
 800a48c:	bf38      	it	cc
 800a48e:	2001      	movcc	r0, #1
 800a490:	f7f6 f860 	bl	8000554 <__aeabi_ui2d>
 800a494:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a496:	4680      	mov	r8, r0
 800a498:	4689      	mov	r9, r1
 800a49a:	bb13      	cbnz	r3, 800a4e2 <_strtod_l+0xba2>
 800a49c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a4a0:	9014      	str	r0, [sp, #80]	; 0x50
 800a4a2:	9315      	str	r3, [sp, #84]	; 0x54
 800a4a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a4a8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a4ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a4b0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a4b4:	1a9b      	subs	r3, r3, r2
 800a4b6:	930d      	str	r3, [sp, #52]	; 0x34
 800a4b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a4bc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a4c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a4c4:	f001 fe68 	bl	800c198 <__ulp>
 800a4c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a4cc:	ec53 2b10 	vmov	r2, r3, d0
 800a4d0:	f7f6 f8ba 	bl	8000648 <__aeabi_dmul>
 800a4d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a4d8:	f7f5 ff00 	bl	80002dc <__adddf3>
 800a4dc:	4682      	mov	sl, r0
 800a4de:	468b      	mov	fp, r1
 800a4e0:	e78f      	b.n	800a402 <_strtod_l+0xac2>
 800a4e2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800a4e6:	e7dd      	b.n	800a4a4 <_strtod_l+0xb64>
 800a4e8:	a311      	add	r3, pc, #68	; (adr r3, 800a530 <_strtod_l+0xbf0>)
 800a4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ee:	f7f6 fb1d 	bl	8000b2c <__aeabi_dcmplt>
 800a4f2:	e7b4      	b.n	800a45e <_strtod_l+0xb1e>
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	930e      	str	r3, [sp, #56]	; 0x38
 800a4f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a4fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a4fc:	6013      	str	r3, [r2, #0]
 800a4fe:	f7ff ba65 	b.w	80099cc <_strtod_l+0x8c>
 800a502:	2b65      	cmp	r3, #101	; 0x65
 800a504:	f43f ab5d 	beq.w	8009bc2 <_strtod_l+0x282>
 800a508:	2b45      	cmp	r3, #69	; 0x45
 800a50a:	f43f ab5a 	beq.w	8009bc2 <_strtod_l+0x282>
 800a50e:	2201      	movs	r2, #1
 800a510:	f7ff bb92 	b.w	8009c38 <_strtod_l+0x2f8>
 800a514:	f3af 8000 	nop.w
 800a518:	94a03595 	.word	0x94a03595
 800a51c:	3fdfffff 	.word	0x3fdfffff
 800a520:	35afe535 	.word	0x35afe535
 800a524:	3fe00000 	.word	0x3fe00000
 800a528:	ffc00000 	.word	0xffc00000
 800a52c:	41dfffff 	.word	0x41dfffff
 800a530:	94a03595 	.word	0x94a03595
 800a534:	3fcfffff 	.word	0x3fcfffff
 800a538:	3ff00000 	.word	0x3ff00000
 800a53c:	7ff00000 	.word	0x7ff00000
 800a540:	7fe00000 	.word	0x7fe00000
 800a544:	7c9fffff 	.word	0x7c9fffff
 800a548:	3fe00000 	.word	0x3fe00000
 800a54c:	bff00000 	.word	0xbff00000
 800a550:	7fefffff 	.word	0x7fefffff

0800a554 <_strtod_r>:
 800a554:	4b01      	ldr	r3, [pc, #4]	; (800a55c <_strtod_r+0x8>)
 800a556:	f7ff b9f3 	b.w	8009940 <_strtod_l>
 800a55a:	bf00      	nop
 800a55c:	200000a4 	.word	0x200000a4

0800a560 <strtod>:
 800a560:	460a      	mov	r2, r1
 800a562:	4601      	mov	r1, r0
 800a564:	4802      	ldr	r0, [pc, #8]	; (800a570 <strtod+0x10>)
 800a566:	4b03      	ldr	r3, [pc, #12]	; (800a574 <strtod+0x14>)
 800a568:	6800      	ldr	r0, [r0, #0]
 800a56a:	f7ff b9e9 	b.w	8009940 <_strtod_l>
 800a56e:	bf00      	nop
 800a570:	2000003c 	.word	0x2000003c
 800a574:	200000a4 	.word	0x200000a4

0800a578 <_strtol_l.isra.0>:
 800a578:	2b01      	cmp	r3, #1
 800a57a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a57e:	d001      	beq.n	800a584 <_strtol_l.isra.0+0xc>
 800a580:	2b24      	cmp	r3, #36	; 0x24
 800a582:	d906      	bls.n	800a592 <_strtol_l.isra.0+0x1a>
 800a584:	f7fe faec 	bl	8008b60 <__errno>
 800a588:	2316      	movs	r3, #22
 800a58a:	6003      	str	r3, [r0, #0]
 800a58c:	2000      	movs	r0, #0
 800a58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a592:	4f3a      	ldr	r7, [pc, #232]	; (800a67c <_strtol_l.isra.0+0x104>)
 800a594:	468e      	mov	lr, r1
 800a596:	4676      	mov	r6, lr
 800a598:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a59c:	5de5      	ldrb	r5, [r4, r7]
 800a59e:	f015 0508 	ands.w	r5, r5, #8
 800a5a2:	d1f8      	bne.n	800a596 <_strtol_l.isra.0+0x1e>
 800a5a4:	2c2d      	cmp	r4, #45	; 0x2d
 800a5a6:	d134      	bne.n	800a612 <_strtol_l.isra.0+0x9a>
 800a5a8:	f89e 4000 	ldrb.w	r4, [lr]
 800a5ac:	f04f 0801 	mov.w	r8, #1
 800a5b0:	f106 0e02 	add.w	lr, r6, #2
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d05c      	beq.n	800a672 <_strtol_l.isra.0+0xfa>
 800a5b8:	2b10      	cmp	r3, #16
 800a5ba:	d10c      	bne.n	800a5d6 <_strtol_l.isra.0+0x5e>
 800a5bc:	2c30      	cmp	r4, #48	; 0x30
 800a5be:	d10a      	bne.n	800a5d6 <_strtol_l.isra.0+0x5e>
 800a5c0:	f89e 4000 	ldrb.w	r4, [lr]
 800a5c4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a5c8:	2c58      	cmp	r4, #88	; 0x58
 800a5ca:	d14d      	bne.n	800a668 <_strtol_l.isra.0+0xf0>
 800a5cc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800a5d0:	2310      	movs	r3, #16
 800a5d2:	f10e 0e02 	add.w	lr, lr, #2
 800a5d6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800a5da:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a5de:	2600      	movs	r6, #0
 800a5e0:	fbbc f9f3 	udiv	r9, ip, r3
 800a5e4:	4635      	mov	r5, r6
 800a5e6:	fb03 ca19 	mls	sl, r3, r9, ip
 800a5ea:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a5ee:	2f09      	cmp	r7, #9
 800a5f0:	d818      	bhi.n	800a624 <_strtol_l.isra.0+0xac>
 800a5f2:	463c      	mov	r4, r7
 800a5f4:	42a3      	cmp	r3, r4
 800a5f6:	dd24      	ble.n	800a642 <_strtol_l.isra.0+0xca>
 800a5f8:	2e00      	cmp	r6, #0
 800a5fa:	db1f      	blt.n	800a63c <_strtol_l.isra.0+0xc4>
 800a5fc:	45a9      	cmp	r9, r5
 800a5fe:	d31d      	bcc.n	800a63c <_strtol_l.isra.0+0xc4>
 800a600:	d101      	bne.n	800a606 <_strtol_l.isra.0+0x8e>
 800a602:	45a2      	cmp	sl, r4
 800a604:	db1a      	blt.n	800a63c <_strtol_l.isra.0+0xc4>
 800a606:	fb05 4503 	mla	r5, r5, r3, r4
 800a60a:	2601      	movs	r6, #1
 800a60c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a610:	e7eb      	b.n	800a5ea <_strtol_l.isra.0+0x72>
 800a612:	2c2b      	cmp	r4, #43	; 0x2b
 800a614:	bf08      	it	eq
 800a616:	f89e 4000 	ldrbeq.w	r4, [lr]
 800a61a:	46a8      	mov	r8, r5
 800a61c:	bf08      	it	eq
 800a61e:	f106 0e02 	addeq.w	lr, r6, #2
 800a622:	e7c7      	b.n	800a5b4 <_strtol_l.isra.0+0x3c>
 800a624:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a628:	2f19      	cmp	r7, #25
 800a62a:	d801      	bhi.n	800a630 <_strtol_l.isra.0+0xb8>
 800a62c:	3c37      	subs	r4, #55	; 0x37
 800a62e:	e7e1      	b.n	800a5f4 <_strtol_l.isra.0+0x7c>
 800a630:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a634:	2f19      	cmp	r7, #25
 800a636:	d804      	bhi.n	800a642 <_strtol_l.isra.0+0xca>
 800a638:	3c57      	subs	r4, #87	; 0x57
 800a63a:	e7db      	b.n	800a5f4 <_strtol_l.isra.0+0x7c>
 800a63c:	f04f 36ff 	mov.w	r6, #4294967295
 800a640:	e7e4      	b.n	800a60c <_strtol_l.isra.0+0x94>
 800a642:	2e00      	cmp	r6, #0
 800a644:	da05      	bge.n	800a652 <_strtol_l.isra.0+0xda>
 800a646:	2322      	movs	r3, #34	; 0x22
 800a648:	6003      	str	r3, [r0, #0]
 800a64a:	4665      	mov	r5, ip
 800a64c:	b942      	cbnz	r2, 800a660 <_strtol_l.isra.0+0xe8>
 800a64e:	4628      	mov	r0, r5
 800a650:	e79d      	b.n	800a58e <_strtol_l.isra.0+0x16>
 800a652:	f1b8 0f00 	cmp.w	r8, #0
 800a656:	d000      	beq.n	800a65a <_strtol_l.isra.0+0xe2>
 800a658:	426d      	negs	r5, r5
 800a65a:	2a00      	cmp	r2, #0
 800a65c:	d0f7      	beq.n	800a64e <_strtol_l.isra.0+0xd6>
 800a65e:	b10e      	cbz	r6, 800a664 <_strtol_l.isra.0+0xec>
 800a660:	f10e 31ff 	add.w	r1, lr, #4294967295
 800a664:	6011      	str	r1, [r2, #0]
 800a666:	e7f2      	b.n	800a64e <_strtol_l.isra.0+0xd6>
 800a668:	2430      	movs	r4, #48	; 0x30
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d1b3      	bne.n	800a5d6 <_strtol_l.isra.0+0x5e>
 800a66e:	2308      	movs	r3, #8
 800a670:	e7b1      	b.n	800a5d6 <_strtol_l.isra.0+0x5e>
 800a672:	2c30      	cmp	r4, #48	; 0x30
 800a674:	d0a4      	beq.n	800a5c0 <_strtol_l.isra.0+0x48>
 800a676:	230a      	movs	r3, #10
 800a678:	e7ad      	b.n	800a5d6 <_strtol_l.isra.0+0x5e>
 800a67a:	bf00      	nop
 800a67c:	0800fdc1 	.word	0x0800fdc1

0800a680 <_strtol_r>:
 800a680:	f7ff bf7a 	b.w	800a578 <_strtol_l.isra.0>

0800a684 <strtol>:
 800a684:	4613      	mov	r3, r2
 800a686:	460a      	mov	r2, r1
 800a688:	4601      	mov	r1, r0
 800a68a:	4802      	ldr	r0, [pc, #8]	; (800a694 <strtol+0x10>)
 800a68c:	6800      	ldr	r0, [r0, #0]
 800a68e:	f7ff bf73 	b.w	800a578 <_strtol_l.isra.0>
 800a692:	bf00      	nop
 800a694:	2000003c 	.word	0x2000003c

0800a698 <quorem>:
 800a698:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a69c:	6903      	ldr	r3, [r0, #16]
 800a69e:	690c      	ldr	r4, [r1, #16]
 800a6a0:	42a3      	cmp	r3, r4
 800a6a2:	4607      	mov	r7, r0
 800a6a4:	f2c0 8081 	blt.w	800a7aa <quorem+0x112>
 800a6a8:	3c01      	subs	r4, #1
 800a6aa:	f101 0814 	add.w	r8, r1, #20
 800a6ae:	f100 0514 	add.w	r5, r0, #20
 800a6b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6b6:	9301      	str	r3, [sp, #4]
 800a6b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a6bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a6c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a6cc:	fbb2 f6f3 	udiv	r6, r2, r3
 800a6d0:	d331      	bcc.n	800a736 <quorem+0x9e>
 800a6d2:	f04f 0e00 	mov.w	lr, #0
 800a6d6:	4640      	mov	r0, r8
 800a6d8:	46ac      	mov	ip, r5
 800a6da:	46f2      	mov	sl, lr
 800a6dc:	f850 2b04 	ldr.w	r2, [r0], #4
 800a6e0:	b293      	uxth	r3, r2
 800a6e2:	fb06 e303 	mla	r3, r6, r3, lr
 800a6e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	ebaa 0303 	sub.w	r3, sl, r3
 800a6f0:	0c12      	lsrs	r2, r2, #16
 800a6f2:	f8dc a000 	ldr.w	sl, [ip]
 800a6f6:	fb06 e202 	mla	r2, r6, r2, lr
 800a6fa:	fa13 f38a 	uxtah	r3, r3, sl
 800a6fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a702:	fa1f fa82 	uxth.w	sl, r2
 800a706:	f8dc 2000 	ldr.w	r2, [ip]
 800a70a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a70e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a712:	b29b      	uxth	r3, r3
 800a714:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a718:	4581      	cmp	r9, r0
 800a71a:	f84c 3b04 	str.w	r3, [ip], #4
 800a71e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a722:	d2db      	bcs.n	800a6dc <quorem+0x44>
 800a724:	f855 300b 	ldr.w	r3, [r5, fp]
 800a728:	b92b      	cbnz	r3, 800a736 <quorem+0x9e>
 800a72a:	9b01      	ldr	r3, [sp, #4]
 800a72c:	3b04      	subs	r3, #4
 800a72e:	429d      	cmp	r5, r3
 800a730:	461a      	mov	r2, r3
 800a732:	d32e      	bcc.n	800a792 <quorem+0xfa>
 800a734:	613c      	str	r4, [r7, #16]
 800a736:	4638      	mov	r0, r7
 800a738:	f001 fc8a 	bl	800c050 <__mcmp>
 800a73c:	2800      	cmp	r0, #0
 800a73e:	db24      	blt.n	800a78a <quorem+0xf2>
 800a740:	3601      	adds	r6, #1
 800a742:	4628      	mov	r0, r5
 800a744:	f04f 0c00 	mov.w	ip, #0
 800a748:	f858 2b04 	ldr.w	r2, [r8], #4
 800a74c:	f8d0 e000 	ldr.w	lr, [r0]
 800a750:	b293      	uxth	r3, r2
 800a752:	ebac 0303 	sub.w	r3, ip, r3
 800a756:	0c12      	lsrs	r2, r2, #16
 800a758:	fa13 f38e 	uxtah	r3, r3, lr
 800a75c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a760:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a764:	b29b      	uxth	r3, r3
 800a766:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a76a:	45c1      	cmp	r9, r8
 800a76c:	f840 3b04 	str.w	r3, [r0], #4
 800a770:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a774:	d2e8      	bcs.n	800a748 <quorem+0xb0>
 800a776:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a77a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a77e:	b922      	cbnz	r2, 800a78a <quorem+0xf2>
 800a780:	3b04      	subs	r3, #4
 800a782:	429d      	cmp	r5, r3
 800a784:	461a      	mov	r2, r3
 800a786:	d30a      	bcc.n	800a79e <quorem+0x106>
 800a788:	613c      	str	r4, [r7, #16]
 800a78a:	4630      	mov	r0, r6
 800a78c:	b003      	add	sp, #12
 800a78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a792:	6812      	ldr	r2, [r2, #0]
 800a794:	3b04      	subs	r3, #4
 800a796:	2a00      	cmp	r2, #0
 800a798:	d1cc      	bne.n	800a734 <quorem+0x9c>
 800a79a:	3c01      	subs	r4, #1
 800a79c:	e7c7      	b.n	800a72e <quorem+0x96>
 800a79e:	6812      	ldr	r2, [r2, #0]
 800a7a0:	3b04      	subs	r3, #4
 800a7a2:	2a00      	cmp	r2, #0
 800a7a4:	d1f0      	bne.n	800a788 <quorem+0xf0>
 800a7a6:	3c01      	subs	r4, #1
 800a7a8:	e7eb      	b.n	800a782 <quorem+0xea>
 800a7aa:	2000      	movs	r0, #0
 800a7ac:	e7ee      	b.n	800a78c <quorem+0xf4>
	...

0800a7b0 <_dtoa_r>:
 800a7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b4:	ed2d 8b02 	vpush	{d8}
 800a7b8:	ec57 6b10 	vmov	r6, r7, d0
 800a7bc:	b095      	sub	sp, #84	; 0x54
 800a7be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a7c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a7c4:	9105      	str	r1, [sp, #20]
 800a7c6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a7ca:	4604      	mov	r4, r0
 800a7cc:	9209      	str	r2, [sp, #36]	; 0x24
 800a7ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7d0:	b975      	cbnz	r5, 800a7f0 <_dtoa_r+0x40>
 800a7d2:	2010      	movs	r0, #16
 800a7d4:	f001 f94c 	bl	800ba70 <malloc>
 800a7d8:	4602      	mov	r2, r0
 800a7da:	6260      	str	r0, [r4, #36]	; 0x24
 800a7dc:	b920      	cbnz	r0, 800a7e8 <_dtoa_r+0x38>
 800a7de:	4bb2      	ldr	r3, [pc, #712]	; (800aaa8 <_dtoa_r+0x2f8>)
 800a7e0:	21ea      	movs	r1, #234	; 0xea
 800a7e2:	48b2      	ldr	r0, [pc, #712]	; (800aaac <_dtoa_r+0x2fc>)
 800a7e4:	f002 f874 	bl	800c8d0 <__assert_func>
 800a7e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a7ec:	6005      	str	r5, [r0, #0]
 800a7ee:	60c5      	str	r5, [r0, #12]
 800a7f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7f2:	6819      	ldr	r1, [r3, #0]
 800a7f4:	b151      	cbz	r1, 800a80c <_dtoa_r+0x5c>
 800a7f6:	685a      	ldr	r2, [r3, #4]
 800a7f8:	604a      	str	r2, [r1, #4]
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	4093      	lsls	r3, r2
 800a7fe:	608b      	str	r3, [r1, #8]
 800a800:	4620      	mov	r0, r4
 800a802:	f001 f99d 	bl	800bb40 <_Bfree>
 800a806:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a808:	2200      	movs	r2, #0
 800a80a:	601a      	str	r2, [r3, #0]
 800a80c:	1e3b      	subs	r3, r7, #0
 800a80e:	bfb9      	ittee	lt
 800a810:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a814:	9303      	strlt	r3, [sp, #12]
 800a816:	2300      	movge	r3, #0
 800a818:	f8c8 3000 	strge.w	r3, [r8]
 800a81c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a820:	4ba3      	ldr	r3, [pc, #652]	; (800aab0 <_dtoa_r+0x300>)
 800a822:	bfbc      	itt	lt
 800a824:	2201      	movlt	r2, #1
 800a826:	f8c8 2000 	strlt.w	r2, [r8]
 800a82a:	ea33 0309 	bics.w	r3, r3, r9
 800a82e:	d11b      	bne.n	800a868 <_dtoa_r+0xb8>
 800a830:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a832:	f242 730f 	movw	r3, #9999	; 0x270f
 800a836:	6013      	str	r3, [r2, #0]
 800a838:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a83c:	4333      	orrs	r3, r6
 800a83e:	f000 857a 	beq.w	800b336 <_dtoa_r+0xb86>
 800a842:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a844:	b963      	cbnz	r3, 800a860 <_dtoa_r+0xb0>
 800a846:	4b9b      	ldr	r3, [pc, #620]	; (800aab4 <_dtoa_r+0x304>)
 800a848:	e024      	b.n	800a894 <_dtoa_r+0xe4>
 800a84a:	4b9b      	ldr	r3, [pc, #620]	; (800aab8 <_dtoa_r+0x308>)
 800a84c:	9300      	str	r3, [sp, #0]
 800a84e:	3308      	adds	r3, #8
 800a850:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a852:	6013      	str	r3, [r2, #0]
 800a854:	9800      	ldr	r0, [sp, #0]
 800a856:	b015      	add	sp, #84	; 0x54
 800a858:	ecbd 8b02 	vpop	{d8}
 800a85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a860:	4b94      	ldr	r3, [pc, #592]	; (800aab4 <_dtoa_r+0x304>)
 800a862:	9300      	str	r3, [sp, #0]
 800a864:	3303      	adds	r3, #3
 800a866:	e7f3      	b.n	800a850 <_dtoa_r+0xa0>
 800a868:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a86c:	2200      	movs	r2, #0
 800a86e:	ec51 0b17 	vmov	r0, r1, d7
 800a872:	2300      	movs	r3, #0
 800a874:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a878:	f7f6 f94e 	bl	8000b18 <__aeabi_dcmpeq>
 800a87c:	4680      	mov	r8, r0
 800a87e:	b158      	cbz	r0, 800a898 <_dtoa_r+0xe8>
 800a880:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a882:	2301      	movs	r3, #1
 800a884:	6013      	str	r3, [r2, #0]
 800a886:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a888:	2b00      	cmp	r3, #0
 800a88a:	f000 8551 	beq.w	800b330 <_dtoa_r+0xb80>
 800a88e:	488b      	ldr	r0, [pc, #556]	; (800aabc <_dtoa_r+0x30c>)
 800a890:	6018      	str	r0, [r3, #0]
 800a892:	1e43      	subs	r3, r0, #1
 800a894:	9300      	str	r3, [sp, #0]
 800a896:	e7dd      	b.n	800a854 <_dtoa_r+0xa4>
 800a898:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a89c:	aa12      	add	r2, sp, #72	; 0x48
 800a89e:	a913      	add	r1, sp, #76	; 0x4c
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	f001 fcf5 	bl	800c290 <__d2b>
 800a8a6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a8aa:	4683      	mov	fp, r0
 800a8ac:	2d00      	cmp	r5, #0
 800a8ae:	d07c      	beq.n	800a9aa <_dtoa_r+0x1fa>
 800a8b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8b2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a8b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8ba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a8be:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a8c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a8c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a8ca:	4b7d      	ldr	r3, [pc, #500]	; (800aac0 <_dtoa_r+0x310>)
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	4630      	mov	r0, r6
 800a8d0:	4639      	mov	r1, r7
 800a8d2:	f7f5 fd01 	bl	80002d8 <__aeabi_dsub>
 800a8d6:	a36e      	add	r3, pc, #440	; (adr r3, 800aa90 <_dtoa_r+0x2e0>)
 800a8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8dc:	f7f5 feb4 	bl	8000648 <__aeabi_dmul>
 800a8e0:	a36d      	add	r3, pc, #436	; (adr r3, 800aa98 <_dtoa_r+0x2e8>)
 800a8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e6:	f7f5 fcf9 	bl	80002dc <__adddf3>
 800a8ea:	4606      	mov	r6, r0
 800a8ec:	4628      	mov	r0, r5
 800a8ee:	460f      	mov	r7, r1
 800a8f0:	f7f5 fe40 	bl	8000574 <__aeabi_i2d>
 800a8f4:	a36a      	add	r3, pc, #424	; (adr r3, 800aaa0 <_dtoa_r+0x2f0>)
 800a8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fa:	f7f5 fea5 	bl	8000648 <__aeabi_dmul>
 800a8fe:	4602      	mov	r2, r0
 800a900:	460b      	mov	r3, r1
 800a902:	4630      	mov	r0, r6
 800a904:	4639      	mov	r1, r7
 800a906:	f7f5 fce9 	bl	80002dc <__adddf3>
 800a90a:	4606      	mov	r6, r0
 800a90c:	460f      	mov	r7, r1
 800a90e:	f7f6 f94b 	bl	8000ba8 <__aeabi_d2iz>
 800a912:	2200      	movs	r2, #0
 800a914:	4682      	mov	sl, r0
 800a916:	2300      	movs	r3, #0
 800a918:	4630      	mov	r0, r6
 800a91a:	4639      	mov	r1, r7
 800a91c:	f7f6 f906 	bl	8000b2c <__aeabi_dcmplt>
 800a920:	b148      	cbz	r0, 800a936 <_dtoa_r+0x186>
 800a922:	4650      	mov	r0, sl
 800a924:	f7f5 fe26 	bl	8000574 <__aeabi_i2d>
 800a928:	4632      	mov	r2, r6
 800a92a:	463b      	mov	r3, r7
 800a92c:	f7f6 f8f4 	bl	8000b18 <__aeabi_dcmpeq>
 800a930:	b908      	cbnz	r0, 800a936 <_dtoa_r+0x186>
 800a932:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a936:	f1ba 0f16 	cmp.w	sl, #22
 800a93a:	d854      	bhi.n	800a9e6 <_dtoa_r+0x236>
 800a93c:	4b61      	ldr	r3, [pc, #388]	; (800aac4 <_dtoa_r+0x314>)
 800a93e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a946:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a94a:	f7f6 f8ef 	bl	8000b2c <__aeabi_dcmplt>
 800a94e:	2800      	cmp	r0, #0
 800a950:	d04b      	beq.n	800a9ea <_dtoa_r+0x23a>
 800a952:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a956:	2300      	movs	r3, #0
 800a958:	930e      	str	r3, [sp, #56]	; 0x38
 800a95a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a95c:	1b5d      	subs	r5, r3, r5
 800a95e:	1e6b      	subs	r3, r5, #1
 800a960:	9304      	str	r3, [sp, #16]
 800a962:	bf43      	ittte	mi
 800a964:	2300      	movmi	r3, #0
 800a966:	f1c5 0801 	rsbmi	r8, r5, #1
 800a96a:	9304      	strmi	r3, [sp, #16]
 800a96c:	f04f 0800 	movpl.w	r8, #0
 800a970:	f1ba 0f00 	cmp.w	sl, #0
 800a974:	db3b      	blt.n	800a9ee <_dtoa_r+0x23e>
 800a976:	9b04      	ldr	r3, [sp, #16]
 800a978:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a97c:	4453      	add	r3, sl
 800a97e:	9304      	str	r3, [sp, #16]
 800a980:	2300      	movs	r3, #0
 800a982:	9306      	str	r3, [sp, #24]
 800a984:	9b05      	ldr	r3, [sp, #20]
 800a986:	2b09      	cmp	r3, #9
 800a988:	d869      	bhi.n	800aa5e <_dtoa_r+0x2ae>
 800a98a:	2b05      	cmp	r3, #5
 800a98c:	bfc4      	itt	gt
 800a98e:	3b04      	subgt	r3, #4
 800a990:	9305      	strgt	r3, [sp, #20]
 800a992:	9b05      	ldr	r3, [sp, #20]
 800a994:	f1a3 0302 	sub.w	r3, r3, #2
 800a998:	bfcc      	ite	gt
 800a99a:	2500      	movgt	r5, #0
 800a99c:	2501      	movle	r5, #1
 800a99e:	2b03      	cmp	r3, #3
 800a9a0:	d869      	bhi.n	800aa76 <_dtoa_r+0x2c6>
 800a9a2:	e8df f003 	tbb	[pc, r3]
 800a9a6:	4e2c      	.short	0x4e2c
 800a9a8:	5a4c      	.short	0x5a4c
 800a9aa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a9ae:	441d      	add	r5, r3
 800a9b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a9b4:	2b20      	cmp	r3, #32
 800a9b6:	bfc1      	itttt	gt
 800a9b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a9bc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a9c0:	fa09 f303 	lslgt.w	r3, r9, r3
 800a9c4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a9c8:	bfda      	itte	le
 800a9ca:	f1c3 0320 	rsble	r3, r3, #32
 800a9ce:	fa06 f003 	lslle.w	r0, r6, r3
 800a9d2:	4318      	orrgt	r0, r3
 800a9d4:	f7f5 fdbe 	bl	8000554 <__aeabi_ui2d>
 800a9d8:	2301      	movs	r3, #1
 800a9da:	4606      	mov	r6, r0
 800a9dc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a9e0:	3d01      	subs	r5, #1
 800a9e2:	9310      	str	r3, [sp, #64]	; 0x40
 800a9e4:	e771      	b.n	800a8ca <_dtoa_r+0x11a>
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e7b6      	b.n	800a958 <_dtoa_r+0x1a8>
 800a9ea:	900e      	str	r0, [sp, #56]	; 0x38
 800a9ec:	e7b5      	b.n	800a95a <_dtoa_r+0x1aa>
 800a9ee:	f1ca 0300 	rsb	r3, sl, #0
 800a9f2:	9306      	str	r3, [sp, #24]
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	eba8 080a 	sub.w	r8, r8, sl
 800a9fa:	930d      	str	r3, [sp, #52]	; 0x34
 800a9fc:	e7c2      	b.n	800a984 <_dtoa_r+0x1d4>
 800a9fe:	2300      	movs	r3, #0
 800aa00:	9308      	str	r3, [sp, #32]
 800aa02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	dc39      	bgt.n	800aa7c <_dtoa_r+0x2cc>
 800aa08:	f04f 0901 	mov.w	r9, #1
 800aa0c:	f8cd 9004 	str.w	r9, [sp, #4]
 800aa10:	464b      	mov	r3, r9
 800aa12:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800aa16:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800aa18:	2200      	movs	r2, #0
 800aa1a:	6042      	str	r2, [r0, #4]
 800aa1c:	2204      	movs	r2, #4
 800aa1e:	f102 0614 	add.w	r6, r2, #20
 800aa22:	429e      	cmp	r6, r3
 800aa24:	6841      	ldr	r1, [r0, #4]
 800aa26:	d92f      	bls.n	800aa88 <_dtoa_r+0x2d8>
 800aa28:	4620      	mov	r0, r4
 800aa2a:	f001 f849 	bl	800bac0 <_Balloc>
 800aa2e:	9000      	str	r0, [sp, #0]
 800aa30:	2800      	cmp	r0, #0
 800aa32:	d14b      	bne.n	800aacc <_dtoa_r+0x31c>
 800aa34:	4b24      	ldr	r3, [pc, #144]	; (800aac8 <_dtoa_r+0x318>)
 800aa36:	4602      	mov	r2, r0
 800aa38:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800aa3c:	e6d1      	b.n	800a7e2 <_dtoa_r+0x32>
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e7de      	b.n	800aa00 <_dtoa_r+0x250>
 800aa42:	2300      	movs	r3, #0
 800aa44:	9308      	str	r3, [sp, #32]
 800aa46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa48:	eb0a 0903 	add.w	r9, sl, r3
 800aa4c:	f109 0301 	add.w	r3, r9, #1
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	9301      	str	r3, [sp, #4]
 800aa54:	bfb8      	it	lt
 800aa56:	2301      	movlt	r3, #1
 800aa58:	e7dd      	b.n	800aa16 <_dtoa_r+0x266>
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	e7f2      	b.n	800aa44 <_dtoa_r+0x294>
 800aa5e:	2501      	movs	r5, #1
 800aa60:	2300      	movs	r3, #0
 800aa62:	9305      	str	r3, [sp, #20]
 800aa64:	9508      	str	r5, [sp, #32]
 800aa66:	f04f 39ff 	mov.w	r9, #4294967295
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f8cd 9004 	str.w	r9, [sp, #4]
 800aa70:	2312      	movs	r3, #18
 800aa72:	9209      	str	r2, [sp, #36]	; 0x24
 800aa74:	e7cf      	b.n	800aa16 <_dtoa_r+0x266>
 800aa76:	2301      	movs	r3, #1
 800aa78:	9308      	str	r3, [sp, #32]
 800aa7a:	e7f4      	b.n	800aa66 <_dtoa_r+0x2b6>
 800aa7c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800aa80:	f8cd 9004 	str.w	r9, [sp, #4]
 800aa84:	464b      	mov	r3, r9
 800aa86:	e7c6      	b.n	800aa16 <_dtoa_r+0x266>
 800aa88:	3101      	adds	r1, #1
 800aa8a:	6041      	str	r1, [r0, #4]
 800aa8c:	0052      	lsls	r2, r2, #1
 800aa8e:	e7c6      	b.n	800aa1e <_dtoa_r+0x26e>
 800aa90:	636f4361 	.word	0x636f4361
 800aa94:	3fd287a7 	.word	0x3fd287a7
 800aa98:	8b60c8b3 	.word	0x8b60c8b3
 800aa9c:	3fc68a28 	.word	0x3fc68a28
 800aaa0:	509f79fb 	.word	0x509f79fb
 800aaa4:	3fd34413 	.word	0x3fd34413
 800aaa8:	0800fece 	.word	0x0800fece
 800aaac:	0800fee5 	.word	0x0800fee5
 800aab0:	7ff00000 	.word	0x7ff00000
 800aab4:	0800feca 	.word	0x0800feca
 800aab8:	0800fec1 	.word	0x0800fec1
 800aabc:	0800fd41 	.word	0x0800fd41
 800aac0:	3ff80000 	.word	0x3ff80000
 800aac4:	08010060 	.word	0x08010060
 800aac8:	0800ff44 	.word	0x0800ff44
 800aacc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aace:	9a00      	ldr	r2, [sp, #0]
 800aad0:	601a      	str	r2, [r3, #0]
 800aad2:	9b01      	ldr	r3, [sp, #4]
 800aad4:	2b0e      	cmp	r3, #14
 800aad6:	f200 80ad 	bhi.w	800ac34 <_dtoa_r+0x484>
 800aada:	2d00      	cmp	r5, #0
 800aadc:	f000 80aa 	beq.w	800ac34 <_dtoa_r+0x484>
 800aae0:	f1ba 0f00 	cmp.w	sl, #0
 800aae4:	dd36      	ble.n	800ab54 <_dtoa_r+0x3a4>
 800aae6:	4ac3      	ldr	r2, [pc, #780]	; (800adf4 <_dtoa_r+0x644>)
 800aae8:	f00a 030f 	and.w	r3, sl, #15
 800aaec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aaf0:	ed93 7b00 	vldr	d7, [r3]
 800aaf4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800aaf8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800aafc:	eeb0 8a47 	vmov.f32	s16, s14
 800ab00:	eef0 8a67 	vmov.f32	s17, s15
 800ab04:	d016      	beq.n	800ab34 <_dtoa_r+0x384>
 800ab06:	4bbc      	ldr	r3, [pc, #752]	; (800adf8 <_dtoa_r+0x648>)
 800ab08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ab0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ab10:	f7f5 fec4 	bl	800089c <__aeabi_ddiv>
 800ab14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab18:	f007 070f 	and.w	r7, r7, #15
 800ab1c:	2503      	movs	r5, #3
 800ab1e:	4eb6      	ldr	r6, [pc, #728]	; (800adf8 <_dtoa_r+0x648>)
 800ab20:	b957      	cbnz	r7, 800ab38 <_dtoa_r+0x388>
 800ab22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab26:	ec53 2b18 	vmov	r2, r3, d8
 800ab2a:	f7f5 feb7 	bl	800089c <__aeabi_ddiv>
 800ab2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab32:	e029      	b.n	800ab88 <_dtoa_r+0x3d8>
 800ab34:	2502      	movs	r5, #2
 800ab36:	e7f2      	b.n	800ab1e <_dtoa_r+0x36e>
 800ab38:	07f9      	lsls	r1, r7, #31
 800ab3a:	d508      	bpl.n	800ab4e <_dtoa_r+0x39e>
 800ab3c:	ec51 0b18 	vmov	r0, r1, d8
 800ab40:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ab44:	f7f5 fd80 	bl	8000648 <__aeabi_dmul>
 800ab48:	ec41 0b18 	vmov	d8, r0, r1
 800ab4c:	3501      	adds	r5, #1
 800ab4e:	107f      	asrs	r7, r7, #1
 800ab50:	3608      	adds	r6, #8
 800ab52:	e7e5      	b.n	800ab20 <_dtoa_r+0x370>
 800ab54:	f000 80a6 	beq.w	800aca4 <_dtoa_r+0x4f4>
 800ab58:	f1ca 0600 	rsb	r6, sl, #0
 800ab5c:	4ba5      	ldr	r3, [pc, #660]	; (800adf4 <_dtoa_r+0x644>)
 800ab5e:	4fa6      	ldr	r7, [pc, #664]	; (800adf8 <_dtoa_r+0x648>)
 800ab60:	f006 020f 	and.w	r2, r6, #15
 800ab64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab6c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ab70:	f7f5 fd6a 	bl	8000648 <__aeabi_dmul>
 800ab74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab78:	1136      	asrs	r6, r6, #4
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	2502      	movs	r5, #2
 800ab7e:	2e00      	cmp	r6, #0
 800ab80:	f040 8085 	bne.w	800ac8e <_dtoa_r+0x4de>
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d1d2      	bne.n	800ab2e <_dtoa_r+0x37e>
 800ab88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	f000 808c 	beq.w	800aca8 <_dtoa_r+0x4f8>
 800ab90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ab94:	4b99      	ldr	r3, [pc, #612]	; (800adfc <_dtoa_r+0x64c>)
 800ab96:	2200      	movs	r2, #0
 800ab98:	4630      	mov	r0, r6
 800ab9a:	4639      	mov	r1, r7
 800ab9c:	f7f5 ffc6 	bl	8000b2c <__aeabi_dcmplt>
 800aba0:	2800      	cmp	r0, #0
 800aba2:	f000 8081 	beq.w	800aca8 <_dtoa_r+0x4f8>
 800aba6:	9b01      	ldr	r3, [sp, #4]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d07d      	beq.n	800aca8 <_dtoa_r+0x4f8>
 800abac:	f1b9 0f00 	cmp.w	r9, #0
 800abb0:	dd3c      	ble.n	800ac2c <_dtoa_r+0x47c>
 800abb2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800abb6:	9307      	str	r3, [sp, #28]
 800abb8:	2200      	movs	r2, #0
 800abba:	4b91      	ldr	r3, [pc, #580]	; (800ae00 <_dtoa_r+0x650>)
 800abbc:	4630      	mov	r0, r6
 800abbe:	4639      	mov	r1, r7
 800abc0:	f7f5 fd42 	bl	8000648 <__aeabi_dmul>
 800abc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abc8:	3501      	adds	r5, #1
 800abca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800abce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800abd2:	4628      	mov	r0, r5
 800abd4:	f7f5 fcce 	bl	8000574 <__aeabi_i2d>
 800abd8:	4632      	mov	r2, r6
 800abda:	463b      	mov	r3, r7
 800abdc:	f7f5 fd34 	bl	8000648 <__aeabi_dmul>
 800abe0:	4b88      	ldr	r3, [pc, #544]	; (800ae04 <_dtoa_r+0x654>)
 800abe2:	2200      	movs	r2, #0
 800abe4:	f7f5 fb7a 	bl	80002dc <__adddf3>
 800abe8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800abec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abf0:	9303      	str	r3, [sp, #12]
 800abf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d15c      	bne.n	800acb2 <_dtoa_r+0x502>
 800abf8:	4b83      	ldr	r3, [pc, #524]	; (800ae08 <_dtoa_r+0x658>)
 800abfa:	2200      	movs	r2, #0
 800abfc:	4630      	mov	r0, r6
 800abfe:	4639      	mov	r1, r7
 800ac00:	f7f5 fb6a 	bl	80002d8 <__aeabi_dsub>
 800ac04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac08:	4606      	mov	r6, r0
 800ac0a:	460f      	mov	r7, r1
 800ac0c:	f7f5 ffac 	bl	8000b68 <__aeabi_dcmpgt>
 800ac10:	2800      	cmp	r0, #0
 800ac12:	f040 8296 	bne.w	800b142 <_dtoa_r+0x992>
 800ac16:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ac1a:	4630      	mov	r0, r6
 800ac1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac20:	4639      	mov	r1, r7
 800ac22:	f7f5 ff83 	bl	8000b2c <__aeabi_dcmplt>
 800ac26:	2800      	cmp	r0, #0
 800ac28:	f040 8288 	bne.w	800b13c <_dtoa_r+0x98c>
 800ac2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ac30:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	f2c0 8158 	blt.w	800aeec <_dtoa_r+0x73c>
 800ac3c:	f1ba 0f0e 	cmp.w	sl, #14
 800ac40:	f300 8154 	bgt.w	800aeec <_dtoa_r+0x73c>
 800ac44:	4b6b      	ldr	r3, [pc, #428]	; (800adf4 <_dtoa_r+0x644>)
 800ac46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ac4a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	f280 80e3 	bge.w	800ae1c <_dtoa_r+0x66c>
 800ac56:	9b01      	ldr	r3, [sp, #4]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	f300 80df 	bgt.w	800ae1c <_dtoa_r+0x66c>
 800ac5e:	f040 826d 	bne.w	800b13c <_dtoa_r+0x98c>
 800ac62:	4b69      	ldr	r3, [pc, #420]	; (800ae08 <_dtoa_r+0x658>)
 800ac64:	2200      	movs	r2, #0
 800ac66:	4640      	mov	r0, r8
 800ac68:	4649      	mov	r1, r9
 800ac6a:	f7f5 fced 	bl	8000648 <__aeabi_dmul>
 800ac6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac72:	f7f5 ff6f 	bl	8000b54 <__aeabi_dcmpge>
 800ac76:	9e01      	ldr	r6, [sp, #4]
 800ac78:	4637      	mov	r7, r6
 800ac7a:	2800      	cmp	r0, #0
 800ac7c:	f040 8243 	bne.w	800b106 <_dtoa_r+0x956>
 800ac80:	9d00      	ldr	r5, [sp, #0]
 800ac82:	2331      	movs	r3, #49	; 0x31
 800ac84:	f805 3b01 	strb.w	r3, [r5], #1
 800ac88:	f10a 0a01 	add.w	sl, sl, #1
 800ac8c:	e23f      	b.n	800b10e <_dtoa_r+0x95e>
 800ac8e:	07f2      	lsls	r2, r6, #31
 800ac90:	d505      	bpl.n	800ac9e <_dtoa_r+0x4ee>
 800ac92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac96:	f7f5 fcd7 	bl	8000648 <__aeabi_dmul>
 800ac9a:	3501      	adds	r5, #1
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	1076      	asrs	r6, r6, #1
 800aca0:	3708      	adds	r7, #8
 800aca2:	e76c      	b.n	800ab7e <_dtoa_r+0x3ce>
 800aca4:	2502      	movs	r5, #2
 800aca6:	e76f      	b.n	800ab88 <_dtoa_r+0x3d8>
 800aca8:	9b01      	ldr	r3, [sp, #4]
 800acaa:	f8cd a01c 	str.w	sl, [sp, #28]
 800acae:	930c      	str	r3, [sp, #48]	; 0x30
 800acb0:	e78d      	b.n	800abce <_dtoa_r+0x41e>
 800acb2:	9900      	ldr	r1, [sp, #0]
 800acb4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800acb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800acb8:	4b4e      	ldr	r3, [pc, #312]	; (800adf4 <_dtoa_r+0x644>)
 800acba:	ed9d 7b02 	vldr	d7, [sp, #8]
 800acbe:	4401      	add	r1, r0
 800acc0:	9102      	str	r1, [sp, #8]
 800acc2:	9908      	ldr	r1, [sp, #32]
 800acc4:	eeb0 8a47 	vmov.f32	s16, s14
 800acc8:	eef0 8a67 	vmov.f32	s17, s15
 800accc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800acd0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800acd4:	2900      	cmp	r1, #0
 800acd6:	d045      	beq.n	800ad64 <_dtoa_r+0x5b4>
 800acd8:	494c      	ldr	r1, [pc, #304]	; (800ae0c <_dtoa_r+0x65c>)
 800acda:	2000      	movs	r0, #0
 800acdc:	f7f5 fdde 	bl	800089c <__aeabi_ddiv>
 800ace0:	ec53 2b18 	vmov	r2, r3, d8
 800ace4:	f7f5 faf8 	bl	80002d8 <__aeabi_dsub>
 800ace8:	9d00      	ldr	r5, [sp, #0]
 800acea:	ec41 0b18 	vmov	d8, r0, r1
 800acee:	4639      	mov	r1, r7
 800acf0:	4630      	mov	r0, r6
 800acf2:	f7f5 ff59 	bl	8000ba8 <__aeabi_d2iz>
 800acf6:	900c      	str	r0, [sp, #48]	; 0x30
 800acf8:	f7f5 fc3c 	bl	8000574 <__aeabi_i2d>
 800acfc:	4602      	mov	r2, r0
 800acfe:	460b      	mov	r3, r1
 800ad00:	4630      	mov	r0, r6
 800ad02:	4639      	mov	r1, r7
 800ad04:	f7f5 fae8 	bl	80002d8 <__aeabi_dsub>
 800ad08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad0a:	3330      	adds	r3, #48	; 0x30
 800ad0c:	f805 3b01 	strb.w	r3, [r5], #1
 800ad10:	ec53 2b18 	vmov	r2, r3, d8
 800ad14:	4606      	mov	r6, r0
 800ad16:	460f      	mov	r7, r1
 800ad18:	f7f5 ff08 	bl	8000b2c <__aeabi_dcmplt>
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	d165      	bne.n	800adec <_dtoa_r+0x63c>
 800ad20:	4632      	mov	r2, r6
 800ad22:	463b      	mov	r3, r7
 800ad24:	4935      	ldr	r1, [pc, #212]	; (800adfc <_dtoa_r+0x64c>)
 800ad26:	2000      	movs	r0, #0
 800ad28:	f7f5 fad6 	bl	80002d8 <__aeabi_dsub>
 800ad2c:	ec53 2b18 	vmov	r2, r3, d8
 800ad30:	f7f5 fefc 	bl	8000b2c <__aeabi_dcmplt>
 800ad34:	2800      	cmp	r0, #0
 800ad36:	f040 80b9 	bne.w	800aeac <_dtoa_r+0x6fc>
 800ad3a:	9b02      	ldr	r3, [sp, #8]
 800ad3c:	429d      	cmp	r5, r3
 800ad3e:	f43f af75 	beq.w	800ac2c <_dtoa_r+0x47c>
 800ad42:	4b2f      	ldr	r3, [pc, #188]	; (800ae00 <_dtoa_r+0x650>)
 800ad44:	ec51 0b18 	vmov	r0, r1, d8
 800ad48:	2200      	movs	r2, #0
 800ad4a:	f7f5 fc7d 	bl	8000648 <__aeabi_dmul>
 800ad4e:	4b2c      	ldr	r3, [pc, #176]	; (800ae00 <_dtoa_r+0x650>)
 800ad50:	ec41 0b18 	vmov	d8, r0, r1
 800ad54:	2200      	movs	r2, #0
 800ad56:	4630      	mov	r0, r6
 800ad58:	4639      	mov	r1, r7
 800ad5a:	f7f5 fc75 	bl	8000648 <__aeabi_dmul>
 800ad5e:	4606      	mov	r6, r0
 800ad60:	460f      	mov	r7, r1
 800ad62:	e7c4      	b.n	800acee <_dtoa_r+0x53e>
 800ad64:	ec51 0b17 	vmov	r0, r1, d7
 800ad68:	f7f5 fc6e 	bl	8000648 <__aeabi_dmul>
 800ad6c:	9b02      	ldr	r3, [sp, #8]
 800ad6e:	9d00      	ldr	r5, [sp, #0]
 800ad70:	930c      	str	r3, [sp, #48]	; 0x30
 800ad72:	ec41 0b18 	vmov	d8, r0, r1
 800ad76:	4639      	mov	r1, r7
 800ad78:	4630      	mov	r0, r6
 800ad7a:	f7f5 ff15 	bl	8000ba8 <__aeabi_d2iz>
 800ad7e:	9011      	str	r0, [sp, #68]	; 0x44
 800ad80:	f7f5 fbf8 	bl	8000574 <__aeabi_i2d>
 800ad84:	4602      	mov	r2, r0
 800ad86:	460b      	mov	r3, r1
 800ad88:	4630      	mov	r0, r6
 800ad8a:	4639      	mov	r1, r7
 800ad8c:	f7f5 faa4 	bl	80002d8 <__aeabi_dsub>
 800ad90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad92:	3330      	adds	r3, #48	; 0x30
 800ad94:	f805 3b01 	strb.w	r3, [r5], #1
 800ad98:	9b02      	ldr	r3, [sp, #8]
 800ad9a:	429d      	cmp	r5, r3
 800ad9c:	4606      	mov	r6, r0
 800ad9e:	460f      	mov	r7, r1
 800ada0:	f04f 0200 	mov.w	r2, #0
 800ada4:	d134      	bne.n	800ae10 <_dtoa_r+0x660>
 800ada6:	4b19      	ldr	r3, [pc, #100]	; (800ae0c <_dtoa_r+0x65c>)
 800ada8:	ec51 0b18 	vmov	r0, r1, d8
 800adac:	f7f5 fa96 	bl	80002dc <__adddf3>
 800adb0:	4602      	mov	r2, r0
 800adb2:	460b      	mov	r3, r1
 800adb4:	4630      	mov	r0, r6
 800adb6:	4639      	mov	r1, r7
 800adb8:	f7f5 fed6 	bl	8000b68 <__aeabi_dcmpgt>
 800adbc:	2800      	cmp	r0, #0
 800adbe:	d175      	bne.n	800aeac <_dtoa_r+0x6fc>
 800adc0:	ec53 2b18 	vmov	r2, r3, d8
 800adc4:	4911      	ldr	r1, [pc, #68]	; (800ae0c <_dtoa_r+0x65c>)
 800adc6:	2000      	movs	r0, #0
 800adc8:	f7f5 fa86 	bl	80002d8 <__aeabi_dsub>
 800adcc:	4602      	mov	r2, r0
 800adce:	460b      	mov	r3, r1
 800add0:	4630      	mov	r0, r6
 800add2:	4639      	mov	r1, r7
 800add4:	f7f5 feaa 	bl	8000b2c <__aeabi_dcmplt>
 800add8:	2800      	cmp	r0, #0
 800adda:	f43f af27 	beq.w	800ac2c <_dtoa_r+0x47c>
 800adde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ade0:	1e6b      	subs	r3, r5, #1
 800ade2:	930c      	str	r3, [sp, #48]	; 0x30
 800ade4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ade8:	2b30      	cmp	r3, #48	; 0x30
 800adea:	d0f8      	beq.n	800adde <_dtoa_r+0x62e>
 800adec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800adf0:	e04a      	b.n	800ae88 <_dtoa_r+0x6d8>
 800adf2:	bf00      	nop
 800adf4:	08010060 	.word	0x08010060
 800adf8:	08010038 	.word	0x08010038
 800adfc:	3ff00000 	.word	0x3ff00000
 800ae00:	40240000 	.word	0x40240000
 800ae04:	401c0000 	.word	0x401c0000
 800ae08:	40140000 	.word	0x40140000
 800ae0c:	3fe00000 	.word	0x3fe00000
 800ae10:	4baf      	ldr	r3, [pc, #700]	; (800b0d0 <_dtoa_r+0x920>)
 800ae12:	f7f5 fc19 	bl	8000648 <__aeabi_dmul>
 800ae16:	4606      	mov	r6, r0
 800ae18:	460f      	mov	r7, r1
 800ae1a:	e7ac      	b.n	800ad76 <_dtoa_r+0x5c6>
 800ae1c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ae20:	9d00      	ldr	r5, [sp, #0]
 800ae22:	4642      	mov	r2, r8
 800ae24:	464b      	mov	r3, r9
 800ae26:	4630      	mov	r0, r6
 800ae28:	4639      	mov	r1, r7
 800ae2a:	f7f5 fd37 	bl	800089c <__aeabi_ddiv>
 800ae2e:	f7f5 febb 	bl	8000ba8 <__aeabi_d2iz>
 800ae32:	9002      	str	r0, [sp, #8]
 800ae34:	f7f5 fb9e 	bl	8000574 <__aeabi_i2d>
 800ae38:	4642      	mov	r2, r8
 800ae3a:	464b      	mov	r3, r9
 800ae3c:	f7f5 fc04 	bl	8000648 <__aeabi_dmul>
 800ae40:	4602      	mov	r2, r0
 800ae42:	460b      	mov	r3, r1
 800ae44:	4630      	mov	r0, r6
 800ae46:	4639      	mov	r1, r7
 800ae48:	f7f5 fa46 	bl	80002d8 <__aeabi_dsub>
 800ae4c:	9e02      	ldr	r6, [sp, #8]
 800ae4e:	9f01      	ldr	r7, [sp, #4]
 800ae50:	3630      	adds	r6, #48	; 0x30
 800ae52:	f805 6b01 	strb.w	r6, [r5], #1
 800ae56:	9e00      	ldr	r6, [sp, #0]
 800ae58:	1bae      	subs	r6, r5, r6
 800ae5a:	42b7      	cmp	r7, r6
 800ae5c:	4602      	mov	r2, r0
 800ae5e:	460b      	mov	r3, r1
 800ae60:	d137      	bne.n	800aed2 <_dtoa_r+0x722>
 800ae62:	f7f5 fa3b 	bl	80002dc <__adddf3>
 800ae66:	4642      	mov	r2, r8
 800ae68:	464b      	mov	r3, r9
 800ae6a:	4606      	mov	r6, r0
 800ae6c:	460f      	mov	r7, r1
 800ae6e:	f7f5 fe7b 	bl	8000b68 <__aeabi_dcmpgt>
 800ae72:	b9c8      	cbnz	r0, 800aea8 <_dtoa_r+0x6f8>
 800ae74:	4642      	mov	r2, r8
 800ae76:	464b      	mov	r3, r9
 800ae78:	4630      	mov	r0, r6
 800ae7a:	4639      	mov	r1, r7
 800ae7c:	f7f5 fe4c 	bl	8000b18 <__aeabi_dcmpeq>
 800ae80:	b110      	cbz	r0, 800ae88 <_dtoa_r+0x6d8>
 800ae82:	9b02      	ldr	r3, [sp, #8]
 800ae84:	07d9      	lsls	r1, r3, #31
 800ae86:	d40f      	bmi.n	800aea8 <_dtoa_r+0x6f8>
 800ae88:	4620      	mov	r0, r4
 800ae8a:	4659      	mov	r1, fp
 800ae8c:	f000 fe58 	bl	800bb40 <_Bfree>
 800ae90:	2300      	movs	r3, #0
 800ae92:	702b      	strb	r3, [r5, #0]
 800ae94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae96:	f10a 0001 	add.w	r0, sl, #1
 800ae9a:	6018      	str	r0, [r3, #0]
 800ae9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	f43f acd8 	beq.w	800a854 <_dtoa_r+0xa4>
 800aea4:	601d      	str	r5, [r3, #0]
 800aea6:	e4d5      	b.n	800a854 <_dtoa_r+0xa4>
 800aea8:	f8cd a01c 	str.w	sl, [sp, #28]
 800aeac:	462b      	mov	r3, r5
 800aeae:	461d      	mov	r5, r3
 800aeb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aeb4:	2a39      	cmp	r2, #57	; 0x39
 800aeb6:	d108      	bne.n	800aeca <_dtoa_r+0x71a>
 800aeb8:	9a00      	ldr	r2, [sp, #0]
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d1f7      	bne.n	800aeae <_dtoa_r+0x6fe>
 800aebe:	9a07      	ldr	r2, [sp, #28]
 800aec0:	9900      	ldr	r1, [sp, #0]
 800aec2:	3201      	adds	r2, #1
 800aec4:	9207      	str	r2, [sp, #28]
 800aec6:	2230      	movs	r2, #48	; 0x30
 800aec8:	700a      	strb	r2, [r1, #0]
 800aeca:	781a      	ldrb	r2, [r3, #0]
 800aecc:	3201      	adds	r2, #1
 800aece:	701a      	strb	r2, [r3, #0]
 800aed0:	e78c      	b.n	800adec <_dtoa_r+0x63c>
 800aed2:	4b7f      	ldr	r3, [pc, #508]	; (800b0d0 <_dtoa_r+0x920>)
 800aed4:	2200      	movs	r2, #0
 800aed6:	f7f5 fbb7 	bl	8000648 <__aeabi_dmul>
 800aeda:	2200      	movs	r2, #0
 800aedc:	2300      	movs	r3, #0
 800aede:	4606      	mov	r6, r0
 800aee0:	460f      	mov	r7, r1
 800aee2:	f7f5 fe19 	bl	8000b18 <__aeabi_dcmpeq>
 800aee6:	2800      	cmp	r0, #0
 800aee8:	d09b      	beq.n	800ae22 <_dtoa_r+0x672>
 800aeea:	e7cd      	b.n	800ae88 <_dtoa_r+0x6d8>
 800aeec:	9a08      	ldr	r2, [sp, #32]
 800aeee:	2a00      	cmp	r2, #0
 800aef0:	f000 80c4 	beq.w	800b07c <_dtoa_r+0x8cc>
 800aef4:	9a05      	ldr	r2, [sp, #20]
 800aef6:	2a01      	cmp	r2, #1
 800aef8:	f300 80a8 	bgt.w	800b04c <_dtoa_r+0x89c>
 800aefc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aefe:	2a00      	cmp	r2, #0
 800af00:	f000 80a0 	beq.w	800b044 <_dtoa_r+0x894>
 800af04:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800af08:	9e06      	ldr	r6, [sp, #24]
 800af0a:	4645      	mov	r5, r8
 800af0c:	9a04      	ldr	r2, [sp, #16]
 800af0e:	2101      	movs	r1, #1
 800af10:	441a      	add	r2, r3
 800af12:	4620      	mov	r0, r4
 800af14:	4498      	add	r8, r3
 800af16:	9204      	str	r2, [sp, #16]
 800af18:	f000 ff18 	bl	800bd4c <__i2b>
 800af1c:	4607      	mov	r7, r0
 800af1e:	2d00      	cmp	r5, #0
 800af20:	dd0b      	ble.n	800af3a <_dtoa_r+0x78a>
 800af22:	9b04      	ldr	r3, [sp, #16]
 800af24:	2b00      	cmp	r3, #0
 800af26:	dd08      	ble.n	800af3a <_dtoa_r+0x78a>
 800af28:	42ab      	cmp	r3, r5
 800af2a:	9a04      	ldr	r2, [sp, #16]
 800af2c:	bfa8      	it	ge
 800af2e:	462b      	movge	r3, r5
 800af30:	eba8 0803 	sub.w	r8, r8, r3
 800af34:	1aed      	subs	r5, r5, r3
 800af36:	1ad3      	subs	r3, r2, r3
 800af38:	9304      	str	r3, [sp, #16]
 800af3a:	9b06      	ldr	r3, [sp, #24]
 800af3c:	b1fb      	cbz	r3, 800af7e <_dtoa_r+0x7ce>
 800af3e:	9b08      	ldr	r3, [sp, #32]
 800af40:	2b00      	cmp	r3, #0
 800af42:	f000 809f 	beq.w	800b084 <_dtoa_r+0x8d4>
 800af46:	2e00      	cmp	r6, #0
 800af48:	dd11      	ble.n	800af6e <_dtoa_r+0x7be>
 800af4a:	4639      	mov	r1, r7
 800af4c:	4632      	mov	r2, r6
 800af4e:	4620      	mov	r0, r4
 800af50:	f000 ffb8 	bl	800bec4 <__pow5mult>
 800af54:	465a      	mov	r2, fp
 800af56:	4601      	mov	r1, r0
 800af58:	4607      	mov	r7, r0
 800af5a:	4620      	mov	r0, r4
 800af5c:	f000 ff0c 	bl	800bd78 <__multiply>
 800af60:	4659      	mov	r1, fp
 800af62:	9007      	str	r0, [sp, #28]
 800af64:	4620      	mov	r0, r4
 800af66:	f000 fdeb 	bl	800bb40 <_Bfree>
 800af6a:	9b07      	ldr	r3, [sp, #28]
 800af6c:	469b      	mov	fp, r3
 800af6e:	9b06      	ldr	r3, [sp, #24]
 800af70:	1b9a      	subs	r2, r3, r6
 800af72:	d004      	beq.n	800af7e <_dtoa_r+0x7ce>
 800af74:	4659      	mov	r1, fp
 800af76:	4620      	mov	r0, r4
 800af78:	f000 ffa4 	bl	800bec4 <__pow5mult>
 800af7c:	4683      	mov	fp, r0
 800af7e:	2101      	movs	r1, #1
 800af80:	4620      	mov	r0, r4
 800af82:	f000 fee3 	bl	800bd4c <__i2b>
 800af86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af88:	2b00      	cmp	r3, #0
 800af8a:	4606      	mov	r6, r0
 800af8c:	dd7c      	ble.n	800b088 <_dtoa_r+0x8d8>
 800af8e:	461a      	mov	r2, r3
 800af90:	4601      	mov	r1, r0
 800af92:	4620      	mov	r0, r4
 800af94:	f000 ff96 	bl	800bec4 <__pow5mult>
 800af98:	9b05      	ldr	r3, [sp, #20]
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	4606      	mov	r6, r0
 800af9e:	dd76      	ble.n	800b08e <_dtoa_r+0x8de>
 800afa0:	2300      	movs	r3, #0
 800afa2:	9306      	str	r3, [sp, #24]
 800afa4:	6933      	ldr	r3, [r6, #16]
 800afa6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800afaa:	6918      	ldr	r0, [r3, #16]
 800afac:	f000 fe7e 	bl	800bcac <__hi0bits>
 800afb0:	f1c0 0020 	rsb	r0, r0, #32
 800afb4:	9b04      	ldr	r3, [sp, #16]
 800afb6:	4418      	add	r0, r3
 800afb8:	f010 001f 	ands.w	r0, r0, #31
 800afbc:	f000 8086 	beq.w	800b0cc <_dtoa_r+0x91c>
 800afc0:	f1c0 0320 	rsb	r3, r0, #32
 800afc4:	2b04      	cmp	r3, #4
 800afc6:	dd7f      	ble.n	800b0c8 <_dtoa_r+0x918>
 800afc8:	f1c0 001c 	rsb	r0, r0, #28
 800afcc:	9b04      	ldr	r3, [sp, #16]
 800afce:	4403      	add	r3, r0
 800afd0:	4480      	add	r8, r0
 800afd2:	4405      	add	r5, r0
 800afd4:	9304      	str	r3, [sp, #16]
 800afd6:	f1b8 0f00 	cmp.w	r8, #0
 800afda:	dd05      	ble.n	800afe8 <_dtoa_r+0x838>
 800afdc:	4659      	mov	r1, fp
 800afde:	4642      	mov	r2, r8
 800afe0:	4620      	mov	r0, r4
 800afe2:	f000 ffc9 	bl	800bf78 <__lshift>
 800afe6:	4683      	mov	fp, r0
 800afe8:	9b04      	ldr	r3, [sp, #16]
 800afea:	2b00      	cmp	r3, #0
 800afec:	dd05      	ble.n	800affa <_dtoa_r+0x84a>
 800afee:	4631      	mov	r1, r6
 800aff0:	461a      	mov	r2, r3
 800aff2:	4620      	mov	r0, r4
 800aff4:	f000 ffc0 	bl	800bf78 <__lshift>
 800aff8:	4606      	mov	r6, r0
 800affa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800affc:	2b00      	cmp	r3, #0
 800affe:	d069      	beq.n	800b0d4 <_dtoa_r+0x924>
 800b000:	4631      	mov	r1, r6
 800b002:	4658      	mov	r0, fp
 800b004:	f001 f824 	bl	800c050 <__mcmp>
 800b008:	2800      	cmp	r0, #0
 800b00a:	da63      	bge.n	800b0d4 <_dtoa_r+0x924>
 800b00c:	2300      	movs	r3, #0
 800b00e:	4659      	mov	r1, fp
 800b010:	220a      	movs	r2, #10
 800b012:	4620      	mov	r0, r4
 800b014:	f000 fdb6 	bl	800bb84 <__multadd>
 800b018:	9b08      	ldr	r3, [sp, #32]
 800b01a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b01e:	4683      	mov	fp, r0
 800b020:	2b00      	cmp	r3, #0
 800b022:	f000 818f 	beq.w	800b344 <_dtoa_r+0xb94>
 800b026:	4639      	mov	r1, r7
 800b028:	2300      	movs	r3, #0
 800b02a:	220a      	movs	r2, #10
 800b02c:	4620      	mov	r0, r4
 800b02e:	f000 fda9 	bl	800bb84 <__multadd>
 800b032:	f1b9 0f00 	cmp.w	r9, #0
 800b036:	4607      	mov	r7, r0
 800b038:	f300 808e 	bgt.w	800b158 <_dtoa_r+0x9a8>
 800b03c:	9b05      	ldr	r3, [sp, #20]
 800b03e:	2b02      	cmp	r3, #2
 800b040:	dc50      	bgt.n	800b0e4 <_dtoa_r+0x934>
 800b042:	e089      	b.n	800b158 <_dtoa_r+0x9a8>
 800b044:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b046:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b04a:	e75d      	b.n	800af08 <_dtoa_r+0x758>
 800b04c:	9b01      	ldr	r3, [sp, #4]
 800b04e:	1e5e      	subs	r6, r3, #1
 800b050:	9b06      	ldr	r3, [sp, #24]
 800b052:	42b3      	cmp	r3, r6
 800b054:	bfbf      	itttt	lt
 800b056:	9b06      	ldrlt	r3, [sp, #24]
 800b058:	9606      	strlt	r6, [sp, #24]
 800b05a:	1af2      	sublt	r2, r6, r3
 800b05c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b05e:	bfb6      	itet	lt
 800b060:	189b      	addlt	r3, r3, r2
 800b062:	1b9e      	subge	r6, r3, r6
 800b064:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b066:	9b01      	ldr	r3, [sp, #4]
 800b068:	bfb8      	it	lt
 800b06a:	2600      	movlt	r6, #0
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	bfb5      	itete	lt
 800b070:	eba8 0503 	sublt.w	r5, r8, r3
 800b074:	9b01      	ldrge	r3, [sp, #4]
 800b076:	2300      	movlt	r3, #0
 800b078:	4645      	movge	r5, r8
 800b07a:	e747      	b.n	800af0c <_dtoa_r+0x75c>
 800b07c:	9e06      	ldr	r6, [sp, #24]
 800b07e:	9f08      	ldr	r7, [sp, #32]
 800b080:	4645      	mov	r5, r8
 800b082:	e74c      	b.n	800af1e <_dtoa_r+0x76e>
 800b084:	9a06      	ldr	r2, [sp, #24]
 800b086:	e775      	b.n	800af74 <_dtoa_r+0x7c4>
 800b088:	9b05      	ldr	r3, [sp, #20]
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	dc18      	bgt.n	800b0c0 <_dtoa_r+0x910>
 800b08e:	9b02      	ldr	r3, [sp, #8]
 800b090:	b9b3      	cbnz	r3, 800b0c0 <_dtoa_r+0x910>
 800b092:	9b03      	ldr	r3, [sp, #12]
 800b094:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b098:	b9a3      	cbnz	r3, 800b0c4 <_dtoa_r+0x914>
 800b09a:	9b03      	ldr	r3, [sp, #12]
 800b09c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b0a0:	0d1b      	lsrs	r3, r3, #20
 800b0a2:	051b      	lsls	r3, r3, #20
 800b0a4:	b12b      	cbz	r3, 800b0b2 <_dtoa_r+0x902>
 800b0a6:	9b04      	ldr	r3, [sp, #16]
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	9304      	str	r3, [sp, #16]
 800b0ac:	f108 0801 	add.w	r8, r8, #1
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	9306      	str	r3, [sp, #24]
 800b0b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	f47f af74 	bne.w	800afa4 <_dtoa_r+0x7f4>
 800b0bc:	2001      	movs	r0, #1
 800b0be:	e779      	b.n	800afb4 <_dtoa_r+0x804>
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	e7f6      	b.n	800b0b2 <_dtoa_r+0x902>
 800b0c4:	9b02      	ldr	r3, [sp, #8]
 800b0c6:	e7f4      	b.n	800b0b2 <_dtoa_r+0x902>
 800b0c8:	d085      	beq.n	800afd6 <_dtoa_r+0x826>
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	301c      	adds	r0, #28
 800b0ce:	e77d      	b.n	800afcc <_dtoa_r+0x81c>
 800b0d0:	40240000 	.word	0x40240000
 800b0d4:	9b01      	ldr	r3, [sp, #4]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	dc38      	bgt.n	800b14c <_dtoa_r+0x99c>
 800b0da:	9b05      	ldr	r3, [sp, #20]
 800b0dc:	2b02      	cmp	r3, #2
 800b0de:	dd35      	ble.n	800b14c <_dtoa_r+0x99c>
 800b0e0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b0e4:	f1b9 0f00 	cmp.w	r9, #0
 800b0e8:	d10d      	bne.n	800b106 <_dtoa_r+0x956>
 800b0ea:	4631      	mov	r1, r6
 800b0ec:	464b      	mov	r3, r9
 800b0ee:	2205      	movs	r2, #5
 800b0f0:	4620      	mov	r0, r4
 800b0f2:	f000 fd47 	bl	800bb84 <__multadd>
 800b0f6:	4601      	mov	r1, r0
 800b0f8:	4606      	mov	r6, r0
 800b0fa:	4658      	mov	r0, fp
 800b0fc:	f000 ffa8 	bl	800c050 <__mcmp>
 800b100:	2800      	cmp	r0, #0
 800b102:	f73f adbd 	bgt.w	800ac80 <_dtoa_r+0x4d0>
 800b106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b108:	9d00      	ldr	r5, [sp, #0]
 800b10a:	ea6f 0a03 	mvn.w	sl, r3
 800b10e:	f04f 0800 	mov.w	r8, #0
 800b112:	4631      	mov	r1, r6
 800b114:	4620      	mov	r0, r4
 800b116:	f000 fd13 	bl	800bb40 <_Bfree>
 800b11a:	2f00      	cmp	r7, #0
 800b11c:	f43f aeb4 	beq.w	800ae88 <_dtoa_r+0x6d8>
 800b120:	f1b8 0f00 	cmp.w	r8, #0
 800b124:	d005      	beq.n	800b132 <_dtoa_r+0x982>
 800b126:	45b8      	cmp	r8, r7
 800b128:	d003      	beq.n	800b132 <_dtoa_r+0x982>
 800b12a:	4641      	mov	r1, r8
 800b12c:	4620      	mov	r0, r4
 800b12e:	f000 fd07 	bl	800bb40 <_Bfree>
 800b132:	4639      	mov	r1, r7
 800b134:	4620      	mov	r0, r4
 800b136:	f000 fd03 	bl	800bb40 <_Bfree>
 800b13a:	e6a5      	b.n	800ae88 <_dtoa_r+0x6d8>
 800b13c:	2600      	movs	r6, #0
 800b13e:	4637      	mov	r7, r6
 800b140:	e7e1      	b.n	800b106 <_dtoa_r+0x956>
 800b142:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b144:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b148:	4637      	mov	r7, r6
 800b14a:	e599      	b.n	800ac80 <_dtoa_r+0x4d0>
 800b14c:	9b08      	ldr	r3, [sp, #32]
 800b14e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b152:	2b00      	cmp	r3, #0
 800b154:	f000 80fd 	beq.w	800b352 <_dtoa_r+0xba2>
 800b158:	2d00      	cmp	r5, #0
 800b15a:	dd05      	ble.n	800b168 <_dtoa_r+0x9b8>
 800b15c:	4639      	mov	r1, r7
 800b15e:	462a      	mov	r2, r5
 800b160:	4620      	mov	r0, r4
 800b162:	f000 ff09 	bl	800bf78 <__lshift>
 800b166:	4607      	mov	r7, r0
 800b168:	9b06      	ldr	r3, [sp, #24]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d05c      	beq.n	800b228 <_dtoa_r+0xa78>
 800b16e:	6879      	ldr	r1, [r7, #4]
 800b170:	4620      	mov	r0, r4
 800b172:	f000 fca5 	bl	800bac0 <_Balloc>
 800b176:	4605      	mov	r5, r0
 800b178:	b928      	cbnz	r0, 800b186 <_dtoa_r+0x9d6>
 800b17a:	4b80      	ldr	r3, [pc, #512]	; (800b37c <_dtoa_r+0xbcc>)
 800b17c:	4602      	mov	r2, r0
 800b17e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b182:	f7ff bb2e 	b.w	800a7e2 <_dtoa_r+0x32>
 800b186:	693a      	ldr	r2, [r7, #16]
 800b188:	3202      	adds	r2, #2
 800b18a:	0092      	lsls	r2, r2, #2
 800b18c:	f107 010c 	add.w	r1, r7, #12
 800b190:	300c      	adds	r0, #12
 800b192:	f000 fc87 	bl	800baa4 <memcpy>
 800b196:	2201      	movs	r2, #1
 800b198:	4629      	mov	r1, r5
 800b19a:	4620      	mov	r0, r4
 800b19c:	f000 feec 	bl	800bf78 <__lshift>
 800b1a0:	9b00      	ldr	r3, [sp, #0]
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	9301      	str	r3, [sp, #4]
 800b1a6:	9b00      	ldr	r3, [sp, #0]
 800b1a8:	444b      	add	r3, r9
 800b1aa:	9307      	str	r3, [sp, #28]
 800b1ac:	9b02      	ldr	r3, [sp, #8]
 800b1ae:	f003 0301 	and.w	r3, r3, #1
 800b1b2:	46b8      	mov	r8, r7
 800b1b4:	9306      	str	r3, [sp, #24]
 800b1b6:	4607      	mov	r7, r0
 800b1b8:	9b01      	ldr	r3, [sp, #4]
 800b1ba:	4631      	mov	r1, r6
 800b1bc:	3b01      	subs	r3, #1
 800b1be:	4658      	mov	r0, fp
 800b1c0:	9302      	str	r3, [sp, #8]
 800b1c2:	f7ff fa69 	bl	800a698 <quorem>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	3330      	adds	r3, #48	; 0x30
 800b1ca:	9004      	str	r0, [sp, #16]
 800b1cc:	4641      	mov	r1, r8
 800b1ce:	4658      	mov	r0, fp
 800b1d0:	9308      	str	r3, [sp, #32]
 800b1d2:	f000 ff3d 	bl	800c050 <__mcmp>
 800b1d6:	463a      	mov	r2, r7
 800b1d8:	4681      	mov	r9, r0
 800b1da:	4631      	mov	r1, r6
 800b1dc:	4620      	mov	r0, r4
 800b1de:	f000 ff53 	bl	800c088 <__mdiff>
 800b1e2:	68c2      	ldr	r2, [r0, #12]
 800b1e4:	9b08      	ldr	r3, [sp, #32]
 800b1e6:	4605      	mov	r5, r0
 800b1e8:	bb02      	cbnz	r2, 800b22c <_dtoa_r+0xa7c>
 800b1ea:	4601      	mov	r1, r0
 800b1ec:	4658      	mov	r0, fp
 800b1ee:	f000 ff2f 	bl	800c050 <__mcmp>
 800b1f2:	9b08      	ldr	r3, [sp, #32]
 800b1f4:	4602      	mov	r2, r0
 800b1f6:	4629      	mov	r1, r5
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b1fe:	f000 fc9f 	bl	800bb40 <_Bfree>
 800b202:	9b05      	ldr	r3, [sp, #20]
 800b204:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b206:	9d01      	ldr	r5, [sp, #4]
 800b208:	ea43 0102 	orr.w	r1, r3, r2
 800b20c:	9b06      	ldr	r3, [sp, #24]
 800b20e:	430b      	orrs	r3, r1
 800b210:	9b08      	ldr	r3, [sp, #32]
 800b212:	d10d      	bne.n	800b230 <_dtoa_r+0xa80>
 800b214:	2b39      	cmp	r3, #57	; 0x39
 800b216:	d029      	beq.n	800b26c <_dtoa_r+0xabc>
 800b218:	f1b9 0f00 	cmp.w	r9, #0
 800b21c:	dd01      	ble.n	800b222 <_dtoa_r+0xa72>
 800b21e:	9b04      	ldr	r3, [sp, #16]
 800b220:	3331      	adds	r3, #49	; 0x31
 800b222:	9a02      	ldr	r2, [sp, #8]
 800b224:	7013      	strb	r3, [r2, #0]
 800b226:	e774      	b.n	800b112 <_dtoa_r+0x962>
 800b228:	4638      	mov	r0, r7
 800b22a:	e7b9      	b.n	800b1a0 <_dtoa_r+0x9f0>
 800b22c:	2201      	movs	r2, #1
 800b22e:	e7e2      	b.n	800b1f6 <_dtoa_r+0xa46>
 800b230:	f1b9 0f00 	cmp.w	r9, #0
 800b234:	db06      	blt.n	800b244 <_dtoa_r+0xa94>
 800b236:	9905      	ldr	r1, [sp, #20]
 800b238:	ea41 0909 	orr.w	r9, r1, r9
 800b23c:	9906      	ldr	r1, [sp, #24]
 800b23e:	ea59 0101 	orrs.w	r1, r9, r1
 800b242:	d120      	bne.n	800b286 <_dtoa_r+0xad6>
 800b244:	2a00      	cmp	r2, #0
 800b246:	ddec      	ble.n	800b222 <_dtoa_r+0xa72>
 800b248:	4659      	mov	r1, fp
 800b24a:	2201      	movs	r2, #1
 800b24c:	4620      	mov	r0, r4
 800b24e:	9301      	str	r3, [sp, #4]
 800b250:	f000 fe92 	bl	800bf78 <__lshift>
 800b254:	4631      	mov	r1, r6
 800b256:	4683      	mov	fp, r0
 800b258:	f000 fefa 	bl	800c050 <__mcmp>
 800b25c:	2800      	cmp	r0, #0
 800b25e:	9b01      	ldr	r3, [sp, #4]
 800b260:	dc02      	bgt.n	800b268 <_dtoa_r+0xab8>
 800b262:	d1de      	bne.n	800b222 <_dtoa_r+0xa72>
 800b264:	07da      	lsls	r2, r3, #31
 800b266:	d5dc      	bpl.n	800b222 <_dtoa_r+0xa72>
 800b268:	2b39      	cmp	r3, #57	; 0x39
 800b26a:	d1d8      	bne.n	800b21e <_dtoa_r+0xa6e>
 800b26c:	9a02      	ldr	r2, [sp, #8]
 800b26e:	2339      	movs	r3, #57	; 0x39
 800b270:	7013      	strb	r3, [r2, #0]
 800b272:	462b      	mov	r3, r5
 800b274:	461d      	mov	r5, r3
 800b276:	3b01      	subs	r3, #1
 800b278:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b27c:	2a39      	cmp	r2, #57	; 0x39
 800b27e:	d050      	beq.n	800b322 <_dtoa_r+0xb72>
 800b280:	3201      	adds	r2, #1
 800b282:	701a      	strb	r2, [r3, #0]
 800b284:	e745      	b.n	800b112 <_dtoa_r+0x962>
 800b286:	2a00      	cmp	r2, #0
 800b288:	dd03      	ble.n	800b292 <_dtoa_r+0xae2>
 800b28a:	2b39      	cmp	r3, #57	; 0x39
 800b28c:	d0ee      	beq.n	800b26c <_dtoa_r+0xabc>
 800b28e:	3301      	adds	r3, #1
 800b290:	e7c7      	b.n	800b222 <_dtoa_r+0xa72>
 800b292:	9a01      	ldr	r2, [sp, #4]
 800b294:	9907      	ldr	r1, [sp, #28]
 800b296:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b29a:	428a      	cmp	r2, r1
 800b29c:	d02a      	beq.n	800b2f4 <_dtoa_r+0xb44>
 800b29e:	4659      	mov	r1, fp
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	220a      	movs	r2, #10
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	f000 fc6d 	bl	800bb84 <__multadd>
 800b2aa:	45b8      	cmp	r8, r7
 800b2ac:	4683      	mov	fp, r0
 800b2ae:	f04f 0300 	mov.w	r3, #0
 800b2b2:	f04f 020a 	mov.w	r2, #10
 800b2b6:	4641      	mov	r1, r8
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	d107      	bne.n	800b2cc <_dtoa_r+0xb1c>
 800b2bc:	f000 fc62 	bl	800bb84 <__multadd>
 800b2c0:	4680      	mov	r8, r0
 800b2c2:	4607      	mov	r7, r0
 800b2c4:	9b01      	ldr	r3, [sp, #4]
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	9301      	str	r3, [sp, #4]
 800b2ca:	e775      	b.n	800b1b8 <_dtoa_r+0xa08>
 800b2cc:	f000 fc5a 	bl	800bb84 <__multadd>
 800b2d0:	4639      	mov	r1, r7
 800b2d2:	4680      	mov	r8, r0
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	220a      	movs	r2, #10
 800b2d8:	4620      	mov	r0, r4
 800b2da:	f000 fc53 	bl	800bb84 <__multadd>
 800b2de:	4607      	mov	r7, r0
 800b2e0:	e7f0      	b.n	800b2c4 <_dtoa_r+0xb14>
 800b2e2:	f1b9 0f00 	cmp.w	r9, #0
 800b2e6:	9a00      	ldr	r2, [sp, #0]
 800b2e8:	bfcc      	ite	gt
 800b2ea:	464d      	movgt	r5, r9
 800b2ec:	2501      	movle	r5, #1
 800b2ee:	4415      	add	r5, r2
 800b2f0:	f04f 0800 	mov.w	r8, #0
 800b2f4:	4659      	mov	r1, fp
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	9301      	str	r3, [sp, #4]
 800b2fc:	f000 fe3c 	bl	800bf78 <__lshift>
 800b300:	4631      	mov	r1, r6
 800b302:	4683      	mov	fp, r0
 800b304:	f000 fea4 	bl	800c050 <__mcmp>
 800b308:	2800      	cmp	r0, #0
 800b30a:	dcb2      	bgt.n	800b272 <_dtoa_r+0xac2>
 800b30c:	d102      	bne.n	800b314 <_dtoa_r+0xb64>
 800b30e:	9b01      	ldr	r3, [sp, #4]
 800b310:	07db      	lsls	r3, r3, #31
 800b312:	d4ae      	bmi.n	800b272 <_dtoa_r+0xac2>
 800b314:	462b      	mov	r3, r5
 800b316:	461d      	mov	r5, r3
 800b318:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b31c:	2a30      	cmp	r2, #48	; 0x30
 800b31e:	d0fa      	beq.n	800b316 <_dtoa_r+0xb66>
 800b320:	e6f7      	b.n	800b112 <_dtoa_r+0x962>
 800b322:	9a00      	ldr	r2, [sp, #0]
 800b324:	429a      	cmp	r2, r3
 800b326:	d1a5      	bne.n	800b274 <_dtoa_r+0xac4>
 800b328:	f10a 0a01 	add.w	sl, sl, #1
 800b32c:	2331      	movs	r3, #49	; 0x31
 800b32e:	e779      	b.n	800b224 <_dtoa_r+0xa74>
 800b330:	4b13      	ldr	r3, [pc, #76]	; (800b380 <_dtoa_r+0xbd0>)
 800b332:	f7ff baaf 	b.w	800a894 <_dtoa_r+0xe4>
 800b336:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b338:	2b00      	cmp	r3, #0
 800b33a:	f47f aa86 	bne.w	800a84a <_dtoa_r+0x9a>
 800b33e:	4b11      	ldr	r3, [pc, #68]	; (800b384 <_dtoa_r+0xbd4>)
 800b340:	f7ff baa8 	b.w	800a894 <_dtoa_r+0xe4>
 800b344:	f1b9 0f00 	cmp.w	r9, #0
 800b348:	dc03      	bgt.n	800b352 <_dtoa_r+0xba2>
 800b34a:	9b05      	ldr	r3, [sp, #20]
 800b34c:	2b02      	cmp	r3, #2
 800b34e:	f73f aec9 	bgt.w	800b0e4 <_dtoa_r+0x934>
 800b352:	9d00      	ldr	r5, [sp, #0]
 800b354:	4631      	mov	r1, r6
 800b356:	4658      	mov	r0, fp
 800b358:	f7ff f99e 	bl	800a698 <quorem>
 800b35c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b360:	f805 3b01 	strb.w	r3, [r5], #1
 800b364:	9a00      	ldr	r2, [sp, #0]
 800b366:	1aaa      	subs	r2, r5, r2
 800b368:	4591      	cmp	r9, r2
 800b36a:	ddba      	ble.n	800b2e2 <_dtoa_r+0xb32>
 800b36c:	4659      	mov	r1, fp
 800b36e:	2300      	movs	r3, #0
 800b370:	220a      	movs	r2, #10
 800b372:	4620      	mov	r0, r4
 800b374:	f000 fc06 	bl	800bb84 <__multadd>
 800b378:	4683      	mov	fp, r0
 800b37a:	e7eb      	b.n	800b354 <_dtoa_r+0xba4>
 800b37c:	0800ff44 	.word	0x0800ff44
 800b380:	0800fd40 	.word	0x0800fd40
 800b384:	0800fec1 	.word	0x0800fec1

0800b388 <rshift>:
 800b388:	6903      	ldr	r3, [r0, #16]
 800b38a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b38e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b392:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b396:	f100 0414 	add.w	r4, r0, #20
 800b39a:	dd45      	ble.n	800b428 <rshift+0xa0>
 800b39c:	f011 011f 	ands.w	r1, r1, #31
 800b3a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b3a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b3a8:	d10c      	bne.n	800b3c4 <rshift+0x3c>
 800b3aa:	f100 0710 	add.w	r7, r0, #16
 800b3ae:	4629      	mov	r1, r5
 800b3b0:	42b1      	cmp	r1, r6
 800b3b2:	d334      	bcc.n	800b41e <rshift+0x96>
 800b3b4:	1a9b      	subs	r3, r3, r2
 800b3b6:	009b      	lsls	r3, r3, #2
 800b3b8:	1eea      	subs	r2, r5, #3
 800b3ba:	4296      	cmp	r6, r2
 800b3bc:	bf38      	it	cc
 800b3be:	2300      	movcc	r3, #0
 800b3c0:	4423      	add	r3, r4
 800b3c2:	e015      	b.n	800b3f0 <rshift+0x68>
 800b3c4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b3c8:	f1c1 0820 	rsb	r8, r1, #32
 800b3cc:	40cf      	lsrs	r7, r1
 800b3ce:	f105 0e04 	add.w	lr, r5, #4
 800b3d2:	46a1      	mov	r9, r4
 800b3d4:	4576      	cmp	r6, lr
 800b3d6:	46f4      	mov	ip, lr
 800b3d8:	d815      	bhi.n	800b406 <rshift+0x7e>
 800b3da:	1a9b      	subs	r3, r3, r2
 800b3dc:	009a      	lsls	r2, r3, #2
 800b3de:	3a04      	subs	r2, #4
 800b3e0:	3501      	adds	r5, #1
 800b3e2:	42ae      	cmp	r6, r5
 800b3e4:	bf38      	it	cc
 800b3e6:	2200      	movcc	r2, #0
 800b3e8:	18a3      	adds	r3, r4, r2
 800b3ea:	50a7      	str	r7, [r4, r2]
 800b3ec:	b107      	cbz	r7, 800b3f0 <rshift+0x68>
 800b3ee:	3304      	adds	r3, #4
 800b3f0:	1b1a      	subs	r2, r3, r4
 800b3f2:	42a3      	cmp	r3, r4
 800b3f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b3f8:	bf08      	it	eq
 800b3fa:	2300      	moveq	r3, #0
 800b3fc:	6102      	str	r2, [r0, #16]
 800b3fe:	bf08      	it	eq
 800b400:	6143      	streq	r3, [r0, #20]
 800b402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b406:	f8dc c000 	ldr.w	ip, [ip]
 800b40a:	fa0c fc08 	lsl.w	ip, ip, r8
 800b40e:	ea4c 0707 	orr.w	r7, ip, r7
 800b412:	f849 7b04 	str.w	r7, [r9], #4
 800b416:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b41a:	40cf      	lsrs	r7, r1
 800b41c:	e7da      	b.n	800b3d4 <rshift+0x4c>
 800b41e:	f851 cb04 	ldr.w	ip, [r1], #4
 800b422:	f847 cf04 	str.w	ip, [r7, #4]!
 800b426:	e7c3      	b.n	800b3b0 <rshift+0x28>
 800b428:	4623      	mov	r3, r4
 800b42a:	e7e1      	b.n	800b3f0 <rshift+0x68>

0800b42c <__hexdig_fun>:
 800b42c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b430:	2b09      	cmp	r3, #9
 800b432:	d802      	bhi.n	800b43a <__hexdig_fun+0xe>
 800b434:	3820      	subs	r0, #32
 800b436:	b2c0      	uxtb	r0, r0
 800b438:	4770      	bx	lr
 800b43a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b43e:	2b05      	cmp	r3, #5
 800b440:	d801      	bhi.n	800b446 <__hexdig_fun+0x1a>
 800b442:	3847      	subs	r0, #71	; 0x47
 800b444:	e7f7      	b.n	800b436 <__hexdig_fun+0xa>
 800b446:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b44a:	2b05      	cmp	r3, #5
 800b44c:	d801      	bhi.n	800b452 <__hexdig_fun+0x26>
 800b44e:	3827      	subs	r0, #39	; 0x27
 800b450:	e7f1      	b.n	800b436 <__hexdig_fun+0xa>
 800b452:	2000      	movs	r0, #0
 800b454:	4770      	bx	lr
	...

0800b458 <__gethex>:
 800b458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b45c:	ed2d 8b02 	vpush	{d8}
 800b460:	b089      	sub	sp, #36	; 0x24
 800b462:	ee08 0a10 	vmov	s16, r0
 800b466:	9304      	str	r3, [sp, #16]
 800b468:	4bbc      	ldr	r3, [pc, #752]	; (800b75c <__gethex+0x304>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	9301      	str	r3, [sp, #4]
 800b46e:	4618      	mov	r0, r3
 800b470:	468b      	mov	fp, r1
 800b472:	4690      	mov	r8, r2
 800b474:	f7f4 fed4 	bl	8000220 <strlen>
 800b478:	9b01      	ldr	r3, [sp, #4]
 800b47a:	f8db 2000 	ldr.w	r2, [fp]
 800b47e:	4403      	add	r3, r0
 800b480:	4682      	mov	sl, r0
 800b482:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b486:	9305      	str	r3, [sp, #20]
 800b488:	1c93      	adds	r3, r2, #2
 800b48a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b48e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b492:	32fe      	adds	r2, #254	; 0xfe
 800b494:	18d1      	adds	r1, r2, r3
 800b496:	461f      	mov	r7, r3
 800b498:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b49c:	9100      	str	r1, [sp, #0]
 800b49e:	2830      	cmp	r0, #48	; 0x30
 800b4a0:	d0f8      	beq.n	800b494 <__gethex+0x3c>
 800b4a2:	f7ff ffc3 	bl	800b42c <__hexdig_fun>
 800b4a6:	4604      	mov	r4, r0
 800b4a8:	2800      	cmp	r0, #0
 800b4aa:	d13a      	bne.n	800b522 <__gethex+0xca>
 800b4ac:	9901      	ldr	r1, [sp, #4]
 800b4ae:	4652      	mov	r2, sl
 800b4b0:	4638      	mov	r0, r7
 800b4b2:	f001 f9ed 	bl	800c890 <strncmp>
 800b4b6:	4605      	mov	r5, r0
 800b4b8:	2800      	cmp	r0, #0
 800b4ba:	d168      	bne.n	800b58e <__gethex+0x136>
 800b4bc:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b4c0:	eb07 060a 	add.w	r6, r7, sl
 800b4c4:	f7ff ffb2 	bl	800b42c <__hexdig_fun>
 800b4c8:	2800      	cmp	r0, #0
 800b4ca:	d062      	beq.n	800b592 <__gethex+0x13a>
 800b4cc:	4633      	mov	r3, r6
 800b4ce:	7818      	ldrb	r0, [r3, #0]
 800b4d0:	2830      	cmp	r0, #48	; 0x30
 800b4d2:	461f      	mov	r7, r3
 800b4d4:	f103 0301 	add.w	r3, r3, #1
 800b4d8:	d0f9      	beq.n	800b4ce <__gethex+0x76>
 800b4da:	f7ff ffa7 	bl	800b42c <__hexdig_fun>
 800b4de:	2301      	movs	r3, #1
 800b4e0:	fab0 f480 	clz	r4, r0
 800b4e4:	0964      	lsrs	r4, r4, #5
 800b4e6:	4635      	mov	r5, r6
 800b4e8:	9300      	str	r3, [sp, #0]
 800b4ea:	463a      	mov	r2, r7
 800b4ec:	4616      	mov	r6, r2
 800b4ee:	3201      	adds	r2, #1
 800b4f0:	7830      	ldrb	r0, [r6, #0]
 800b4f2:	f7ff ff9b 	bl	800b42c <__hexdig_fun>
 800b4f6:	2800      	cmp	r0, #0
 800b4f8:	d1f8      	bne.n	800b4ec <__gethex+0x94>
 800b4fa:	9901      	ldr	r1, [sp, #4]
 800b4fc:	4652      	mov	r2, sl
 800b4fe:	4630      	mov	r0, r6
 800b500:	f001 f9c6 	bl	800c890 <strncmp>
 800b504:	b980      	cbnz	r0, 800b528 <__gethex+0xd0>
 800b506:	b94d      	cbnz	r5, 800b51c <__gethex+0xc4>
 800b508:	eb06 050a 	add.w	r5, r6, sl
 800b50c:	462a      	mov	r2, r5
 800b50e:	4616      	mov	r6, r2
 800b510:	3201      	adds	r2, #1
 800b512:	7830      	ldrb	r0, [r6, #0]
 800b514:	f7ff ff8a 	bl	800b42c <__hexdig_fun>
 800b518:	2800      	cmp	r0, #0
 800b51a:	d1f8      	bne.n	800b50e <__gethex+0xb6>
 800b51c:	1bad      	subs	r5, r5, r6
 800b51e:	00ad      	lsls	r5, r5, #2
 800b520:	e004      	b.n	800b52c <__gethex+0xd4>
 800b522:	2400      	movs	r4, #0
 800b524:	4625      	mov	r5, r4
 800b526:	e7e0      	b.n	800b4ea <__gethex+0x92>
 800b528:	2d00      	cmp	r5, #0
 800b52a:	d1f7      	bne.n	800b51c <__gethex+0xc4>
 800b52c:	7833      	ldrb	r3, [r6, #0]
 800b52e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b532:	2b50      	cmp	r3, #80	; 0x50
 800b534:	d13b      	bne.n	800b5ae <__gethex+0x156>
 800b536:	7873      	ldrb	r3, [r6, #1]
 800b538:	2b2b      	cmp	r3, #43	; 0x2b
 800b53a:	d02c      	beq.n	800b596 <__gethex+0x13e>
 800b53c:	2b2d      	cmp	r3, #45	; 0x2d
 800b53e:	d02e      	beq.n	800b59e <__gethex+0x146>
 800b540:	1c71      	adds	r1, r6, #1
 800b542:	f04f 0900 	mov.w	r9, #0
 800b546:	7808      	ldrb	r0, [r1, #0]
 800b548:	f7ff ff70 	bl	800b42c <__hexdig_fun>
 800b54c:	1e43      	subs	r3, r0, #1
 800b54e:	b2db      	uxtb	r3, r3
 800b550:	2b18      	cmp	r3, #24
 800b552:	d82c      	bhi.n	800b5ae <__gethex+0x156>
 800b554:	f1a0 0210 	sub.w	r2, r0, #16
 800b558:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b55c:	f7ff ff66 	bl	800b42c <__hexdig_fun>
 800b560:	1e43      	subs	r3, r0, #1
 800b562:	b2db      	uxtb	r3, r3
 800b564:	2b18      	cmp	r3, #24
 800b566:	d91d      	bls.n	800b5a4 <__gethex+0x14c>
 800b568:	f1b9 0f00 	cmp.w	r9, #0
 800b56c:	d000      	beq.n	800b570 <__gethex+0x118>
 800b56e:	4252      	negs	r2, r2
 800b570:	4415      	add	r5, r2
 800b572:	f8cb 1000 	str.w	r1, [fp]
 800b576:	b1e4      	cbz	r4, 800b5b2 <__gethex+0x15a>
 800b578:	9b00      	ldr	r3, [sp, #0]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	bf14      	ite	ne
 800b57e:	2700      	movne	r7, #0
 800b580:	2706      	moveq	r7, #6
 800b582:	4638      	mov	r0, r7
 800b584:	b009      	add	sp, #36	; 0x24
 800b586:	ecbd 8b02 	vpop	{d8}
 800b58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b58e:	463e      	mov	r6, r7
 800b590:	4625      	mov	r5, r4
 800b592:	2401      	movs	r4, #1
 800b594:	e7ca      	b.n	800b52c <__gethex+0xd4>
 800b596:	f04f 0900 	mov.w	r9, #0
 800b59a:	1cb1      	adds	r1, r6, #2
 800b59c:	e7d3      	b.n	800b546 <__gethex+0xee>
 800b59e:	f04f 0901 	mov.w	r9, #1
 800b5a2:	e7fa      	b.n	800b59a <__gethex+0x142>
 800b5a4:	230a      	movs	r3, #10
 800b5a6:	fb03 0202 	mla	r2, r3, r2, r0
 800b5aa:	3a10      	subs	r2, #16
 800b5ac:	e7d4      	b.n	800b558 <__gethex+0x100>
 800b5ae:	4631      	mov	r1, r6
 800b5b0:	e7df      	b.n	800b572 <__gethex+0x11a>
 800b5b2:	1bf3      	subs	r3, r6, r7
 800b5b4:	3b01      	subs	r3, #1
 800b5b6:	4621      	mov	r1, r4
 800b5b8:	2b07      	cmp	r3, #7
 800b5ba:	dc0b      	bgt.n	800b5d4 <__gethex+0x17c>
 800b5bc:	ee18 0a10 	vmov	r0, s16
 800b5c0:	f000 fa7e 	bl	800bac0 <_Balloc>
 800b5c4:	4604      	mov	r4, r0
 800b5c6:	b940      	cbnz	r0, 800b5da <__gethex+0x182>
 800b5c8:	4b65      	ldr	r3, [pc, #404]	; (800b760 <__gethex+0x308>)
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	21de      	movs	r1, #222	; 0xde
 800b5ce:	4865      	ldr	r0, [pc, #404]	; (800b764 <__gethex+0x30c>)
 800b5d0:	f001 f97e 	bl	800c8d0 <__assert_func>
 800b5d4:	3101      	adds	r1, #1
 800b5d6:	105b      	asrs	r3, r3, #1
 800b5d8:	e7ee      	b.n	800b5b8 <__gethex+0x160>
 800b5da:	f100 0914 	add.w	r9, r0, #20
 800b5de:	f04f 0b00 	mov.w	fp, #0
 800b5e2:	f1ca 0301 	rsb	r3, sl, #1
 800b5e6:	f8cd 9008 	str.w	r9, [sp, #8]
 800b5ea:	f8cd b000 	str.w	fp, [sp]
 800b5ee:	9306      	str	r3, [sp, #24]
 800b5f0:	42b7      	cmp	r7, r6
 800b5f2:	d340      	bcc.n	800b676 <__gethex+0x21e>
 800b5f4:	9802      	ldr	r0, [sp, #8]
 800b5f6:	9b00      	ldr	r3, [sp, #0]
 800b5f8:	f840 3b04 	str.w	r3, [r0], #4
 800b5fc:	eba0 0009 	sub.w	r0, r0, r9
 800b600:	1080      	asrs	r0, r0, #2
 800b602:	0146      	lsls	r6, r0, #5
 800b604:	6120      	str	r0, [r4, #16]
 800b606:	4618      	mov	r0, r3
 800b608:	f000 fb50 	bl	800bcac <__hi0bits>
 800b60c:	1a30      	subs	r0, r6, r0
 800b60e:	f8d8 6000 	ldr.w	r6, [r8]
 800b612:	42b0      	cmp	r0, r6
 800b614:	dd63      	ble.n	800b6de <__gethex+0x286>
 800b616:	1b87      	subs	r7, r0, r6
 800b618:	4639      	mov	r1, r7
 800b61a:	4620      	mov	r0, r4
 800b61c:	f000 feea 	bl	800c3f4 <__any_on>
 800b620:	4682      	mov	sl, r0
 800b622:	b1a8      	cbz	r0, 800b650 <__gethex+0x1f8>
 800b624:	1e7b      	subs	r3, r7, #1
 800b626:	1159      	asrs	r1, r3, #5
 800b628:	f003 021f 	and.w	r2, r3, #31
 800b62c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b630:	f04f 0a01 	mov.w	sl, #1
 800b634:	fa0a f202 	lsl.w	r2, sl, r2
 800b638:	420a      	tst	r2, r1
 800b63a:	d009      	beq.n	800b650 <__gethex+0x1f8>
 800b63c:	4553      	cmp	r3, sl
 800b63e:	dd05      	ble.n	800b64c <__gethex+0x1f4>
 800b640:	1eb9      	subs	r1, r7, #2
 800b642:	4620      	mov	r0, r4
 800b644:	f000 fed6 	bl	800c3f4 <__any_on>
 800b648:	2800      	cmp	r0, #0
 800b64a:	d145      	bne.n	800b6d8 <__gethex+0x280>
 800b64c:	f04f 0a02 	mov.w	sl, #2
 800b650:	4639      	mov	r1, r7
 800b652:	4620      	mov	r0, r4
 800b654:	f7ff fe98 	bl	800b388 <rshift>
 800b658:	443d      	add	r5, r7
 800b65a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b65e:	42ab      	cmp	r3, r5
 800b660:	da4c      	bge.n	800b6fc <__gethex+0x2a4>
 800b662:	ee18 0a10 	vmov	r0, s16
 800b666:	4621      	mov	r1, r4
 800b668:	f000 fa6a 	bl	800bb40 <_Bfree>
 800b66c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b66e:	2300      	movs	r3, #0
 800b670:	6013      	str	r3, [r2, #0]
 800b672:	27a3      	movs	r7, #163	; 0xa3
 800b674:	e785      	b.n	800b582 <__gethex+0x12a>
 800b676:	1e73      	subs	r3, r6, #1
 800b678:	9a05      	ldr	r2, [sp, #20]
 800b67a:	9303      	str	r3, [sp, #12]
 800b67c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b680:	4293      	cmp	r3, r2
 800b682:	d019      	beq.n	800b6b8 <__gethex+0x260>
 800b684:	f1bb 0f20 	cmp.w	fp, #32
 800b688:	d107      	bne.n	800b69a <__gethex+0x242>
 800b68a:	9b02      	ldr	r3, [sp, #8]
 800b68c:	9a00      	ldr	r2, [sp, #0]
 800b68e:	f843 2b04 	str.w	r2, [r3], #4
 800b692:	9302      	str	r3, [sp, #8]
 800b694:	2300      	movs	r3, #0
 800b696:	9300      	str	r3, [sp, #0]
 800b698:	469b      	mov	fp, r3
 800b69a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b69e:	f7ff fec5 	bl	800b42c <__hexdig_fun>
 800b6a2:	9b00      	ldr	r3, [sp, #0]
 800b6a4:	f000 000f 	and.w	r0, r0, #15
 800b6a8:	fa00 f00b 	lsl.w	r0, r0, fp
 800b6ac:	4303      	orrs	r3, r0
 800b6ae:	9300      	str	r3, [sp, #0]
 800b6b0:	f10b 0b04 	add.w	fp, fp, #4
 800b6b4:	9b03      	ldr	r3, [sp, #12]
 800b6b6:	e00d      	b.n	800b6d4 <__gethex+0x27c>
 800b6b8:	9b03      	ldr	r3, [sp, #12]
 800b6ba:	9a06      	ldr	r2, [sp, #24]
 800b6bc:	4413      	add	r3, r2
 800b6be:	42bb      	cmp	r3, r7
 800b6c0:	d3e0      	bcc.n	800b684 <__gethex+0x22c>
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	9901      	ldr	r1, [sp, #4]
 800b6c6:	9307      	str	r3, [sp, #28]
 800b6c8:	4652      	mov	r2, sl
 800b6ca:	f001 f8e1 	bl	800c890 <strncmp>
 800b6ce:	9b07      	ldr	r3, [sp, #28]
 800b6d0:	2800      	cmp	r0, #0
 800b6d2:	d1d7      	bne.n	800b684 <__gethex+0x22c>
 800b6d4:	461e      	mov	r6, r3
 800b6d6:	e78b      	b.n	800b5f0 <__gethex+0x198>
 800b6d8:	f04f 0a03 	mov.w	sl, #3
 800b6dc:	e7b8      	b.n	800b650 <__gethex+0x1f8>
 800b6de:	da0a      	bge.n	800b6f6 <__gethex+0x29e>
 800b6e0:	1a37      	subs	r7, r6, r0
 800b6e2:	4621      	mov	r1, r4
 800b6e4:	ee18 0a10 	vmov	r0, s16
 800b6e8:	463a      	mov	r2, r7
 800b6ea:	f000 fc45 	bl	800bf78 <__lshift>
 800b6ee:	1bed      	subs	r5, r5, r7
 800b6f0:	4604      	mov	r4, r0
 800b6f2:	f100 0914 	add.w	r9, r0, #20
 800b6f6:	f04f 0a00 	mov.w	sl, #0
 800b6fa:	e7ae      	b.n	800b65a <__gethex+0x202>
 800b6fc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b700:	42a8      	cmp	r0, r5
 800b702:	dd72      	ble.n	800b7ea <__gethex+0x392>
 800b704:	1b45      	subs	r5, r0, r5
 800b706:	42ae      	cmp	r6, r5
 800b708:	dc36      	bgt.n	800b778 <__gethex+0x320>
 800b70a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b70e:	2b02      	cmp	r3, #2
 800b710:	d02a      	beq.n	800b768 <__gethex+0x310>
 800b712:	2b03      	cmp	r3, #3
 800b714:	d02c      	beq.n	800b770 <__gethex+0x318>
 800b716:	2b01      	cmp	r3, #1
 800b718:	d115      	bne.n	800b746 <__gethex+0x2ee>
 800b71a:	42ae      	cmp	r6, r5
 800b71c:	d113      	bne.n	800b746 <__gethex+0x2ee>
 800b71e:	2e01      	cmp	r6, #1
 800b720:	d10b      	bne.n	800b73a <__gethex+0x2e2>
 800b722:	9a04      	ldr	r2, [sp, #16]
 800b724:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b728:	6013      	str	r3, [r2, #0]
 800b72a:	2301      	movs	r3, #1
 800b72c:	6123      	str	r3, [r4, #16]
 800b72e:	f8c9 3000 	str.w	r3, [r9]
 800b732:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b734:	2762      	movs	r7, #98	; 0x62
 800b736:	601c      	str	r4, [r3, #0]
 800b738:	e723      	b.n	800b582 <__gethex+0x12a>
 800b73a:	1e71      	subs	r1, r6, #1
 800b73c:	4620      	mov	r0, r4
 800b73e:	f000 fe59 	bl	800c3f4 <__any_on>
 800b742:	2800      	cmp	r0, #0
 800b744:	d1ed      	bne.n	800b722 <__gethex+0x2ca>
 800b746:	ee18 0a10 	vmov	r0, s16
 800b74a:	4621      	mov	r1, r4
 800b74c:	f000 f9f8 	bl	800bb40 <_Bfree>
 800b750:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b752:	2300      	movs	r3, #0
 800b754:	6013      	str	r3, [r2, #0]
 800b756:	2750      	movs	r7, #80	; 0x50
 800b758:	e713      	b.n	800b582 <__gethex+0x12a>
 800b75a:	bf00      	nop
 800b75c:	0800ffc0 	.word	0x0800ffc0
 800b760:	0800ff44 	.word	0x0800ff44
 800b764:	0800ff55 	.word	0x0800ff55
 800b768:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d1eb      	bne.n	800b746 <__gethex+0x2ee>
 800b76e:	e7d8      	b.n	800b722 <__gethex+0x2ca>
 800b770:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b772:	2b00      	cmp	r3, #0
 800b774:	d1d5      	bne.n	800b722 <__gethex+0x2ca>
 800b776:	e7e6      	b.n	800b746 <__gethex+0x2ee>
 800b778:	1e6f      	subs	r7, r5, #1
 800b77a:	f1ba 0f00 	cmp.w	sl, #0
 800b77e:	d131      	bne.n	800b7e4 <__gethex+0x38c>
 800b780:	b127      	cbz	r7, 800b78c <__gethex+0x334>
 800b782:	4639      	mov	r1, r7
 800b784:	4620      	mov	r0, r4
 800b786:	f000 fe35 	bl	800c3f4 <__any_on>
 800b78a:	4682      	mov	sl, r0
 800b78c:	117b      	asrs	r3, r7, #5
 800b78e:	2101      	movs	r1, #1
 800b790:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b794:	f007 071f 	and.w	r7, r7, #31
 800b798:	fa01 f707 	lsl.w	r7, r1, r7
 800b79c:	421f      	tst	r7, r3
 800b79e:	4629      	mov	r1, r5
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	bf18      	it	ne
 800b7a4:	f04a 0a02 	orrne.w	sl, sl, #2
 800b7a8:	1b76      	subs	r6, r6, r5
 800b7aa:	f7ff fded 	bl	800b388 <rshift>
 800b7ae:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b7b2:	2702      	movs	r7, #2
 800b7b4:	f1ba 0f00 	cmp.w	sl, #0
 800b7b8:	d048      	beq.n	800b84c <__gethex+0x3f4>
 800b7ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b7be:	2b02      	cmp	r3, #2
 800b7c0:	d015      	beq.n	800b7ee <__gethex+0x396>
 800b7c2:	2b03      	cmp	r3, #3
 800b7c4:	d017      	beq.n	800b7f6 <__gethex+0x39e>
 800b7c6:	2b01      	cmp	r3, #1
 800b7c8:	d109      	bne.n	800b7de <__gethex+0x386>
 800b7ca:	f01a 0f02 	tst.w	sl, #2
 800b7ce:	d006      	beq.n	800b7de <__gethex+0x386>
 800b7d0:	f8d9 0000 	ldr.w	r0, [r9]
 800b7d4:	ea4a 0a00 	orr.w	sl, sl, r0
 800b7d8:	f01a 0f01 	tst.w	sl, #1
 800b7dc:	d10e      	bne.n	800b7fc <__gethex+0x3a4>
 800b7de:	f047 0710 	orr.w	r7, r7, #16
 800b7e2:	e033      	b.n	800b84c <__gethex+0x3f4>
 800b7e4:	f04f 0a01 	mov.w	sl, #1
 800b7e8:	e7d0      	b.n	800b78c <__gethex+0x334>
 800b7ea:	2701      	movs	r7, #1
 800b7ec:	e7e2      	b.n	800b7b4 <__gethex+0x35c>
 800b7ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b7f0:	f1c3 0301 	rsb	r3, r3, #1
 800b7f4:	9315      	str	r3, [sp, #84]	; 0x54
 800b7f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d0f0      	beq.n	800b7de <__gethex+0x386>
 800b7fc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b800:	f104 0314 	add.w	r3, r4, #20
 800b804:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b808:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b80c:	f04f 0c00 	mov.w	ip, #0
 800b810:	4618      	mov	r0, r3
 800b812:	f853 2b04 	ldr.w	r2, [r3], #4
 800b816:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b81a:	d01c      	beq.n	800b856 <__gethex+0x3fe>
 800b81c:	3201      	adds	r2, #1
 800b81e:	6002      	str	r2, [r0, #0]
 800b820:	2f02      	cmp	r7, #2
 800b822:	f104 0314 	add.w	r3, r4, #20
 800b826:	d13f      	bne.n	800b8a8 <__gethex+0x450>
 800b828:	f8d8 2000 	ldr.w	r2, [r8]
 800b82c:	3a01      	subs	r2, #1
 800b82e:	42b2      	cmp	r2, r6
 800b830:	d10a      	bne.n	800b848 <__gethex+0x3f0>
 800b832:	1171      	asrs	r1, r6, #5
 800b834:	2201      	movs	r2, #1
 800b836:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b83a:	f006 061f 	and.w	r6, r6, #31
 800b83e:	fa02 f606 	lsl.w	r6, r2, r6
 800b842:	421e      	tst	r6, r3
 800b844:	bf18      	it	ne
 800b846:	4617      	movne	r7, r2
 800b848:	f047 0720 	orr.w	r7, r7, #32
 800b84c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b84e:	601c      	str	r4, [r3, #0]
 800b850:	9b04      	ldr	r3, [sp, #16]
 800b852:	601d      	str	r5, [r3, #0]
 800b854:	e695      	b.n	800b582 <__gethex+0x12a>
 800b856:	4299      	cmp	r1, r3
 800b858:	f843 cc04 	str.w	ip, [r3, #-4]
 800b85c:	d8d8      	bhi.n	800b810 <__gethex+0x3b8>
 800b85e:	68a3      	ldr	r3, [r4, #8]
 800b860:	459b      	cmp	fp, r3
 800b862:	db19      	blt.n	800b898 <__gethex+0x440>
 800b864:	6861      	ldr	r1, [r4, #4]
 800b866:	ee18 0a10 	vmov	r0, s16
 800b86a:	3101      	adds	r1, #1
 800b86c:	f000 f928 	bl	800bac0 <_Balloc>
 800b870:	4681      	mov	r9, r0
 800b872:	b918      	cbnz	r0, 800b87c <__gethex+0x424>
 800b874:	4b1a      	ldr	r3, [pc, #104]	; (800b8e0 <__gethex+0x488>)
 800b876:	4602      	mov	r2, r0
 800b878:	2184      	movs	r1, #132	; 0x84
 800b87a:	e6a8      	b.n	800b5ce <__gethex+0x176>
 800b87c:	6922      	ldr	r2, [r4, #16]
 800b87e:	3202      	adds	r2, #2
 800b880:	f104 010c 	add.w	r1, r4, #12
 800b884:	0092      	lsls	r2, r2, #2
 800b886:	300c      	adds	r0, #12
 800b888:	f000 f90c 	bl	800baa4 <memcpy>
 800b88c:	4621      	mov	r1, r4
 800b88e:	ee18 0a10 	vmov	r0, s16
 800b892:	f000 f955 	bl	800bb40 <_Bfree>
 800b896:	464c      	mov	r4, r9
 800b898:	6923      	ldr	r3, [r4, #16]
 800b89a:	1c5a      	adds	r2, r3, #1
 800b89c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b8a0:	6122      	str	r2, [r4, #16]
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	615a      	str	r2, [r3, #20]
 800b8a6:	e7bb      	b.n	800b820 <__gethex+0x3c8>
 800b8a8:	6922      	ldr	r2, [r4, #16]
 800b8aa:	455a      	cmp	r2, fp
 800b8ac:	dd0b      	ble.n	800b8c6 <__gethex+0x46e>
 800b8ae:	2101      	movs	r1, #1
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	f7ff fd69 	bl	800b388 <rshift>
 800b8b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b8ba:	3501      	adds	r5, #1
 800b8bc:	42ab      	cmp	r3, r5
 800b8be:	f6ff aed0 	blt.w	800b662 <__gethex+0x20a>
 800b8c2:	2701      	movs	r7, #1
 800b8c4:	e7c0      	b.n	800b848 <__gethex+0x3f0>
 800b8c6:	f016 061f 	ands.w	r6, r6, #31
 800b8ca:	d0fa      	beq.n	800b8c2 <__gethex+0x46a>
 800b8cc:	449a      	add	sl, r3
 800b8ce:	f1c6 0620 	rsb	r6, r6, #32
 800b8d2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b8d6:	f000 f9e9 	bl	800bcac <__hi0bits>
 800b8da:	42b0      	cmp	r0, r6
 800b8dc:	dbe7      	blt.n	800b8ae <__gethex+0x456>
 800b8de:	e7f0      	b.n	800b8c2 <__gethex+0x46a>
 800b8e0:	0800ff44 	.word	0x0800ff44

0800b8e4 <L_shift>:
 800b8e4:	f1c2 0208 	rsb	r2, r2, #8
 800b8e8:	0092      	lsls	r2, r2, #2
 800b8ea:	b570      	push	{r4, r5, r6, lr}
 800b8ec:	f1c2 0620 	rsb	r6, r2, #32
 800b8f0:	6843      	ldr	r3, [r0, #4]
 800b8f2:	6804      	ldr	r4, [r0, #0]
 800b8f4:	fa03 f506 	lsl.w	r5, r3, r6
 800b8f8:	432c      	orrs	r4, r5
 800b8fa:	40d3      	lsrs	r3, r2
 800b8fc:	6004      	str	r4, [r0, #0]
 800b8fe:	f840 3f04 	str.w	r3, [r0, #4]!
 800b902:	4288      	cmp	r0, r1
 800b904:	d3f4      	bcc.n	800b8f0 <L_shift+0xc>
 800b906:	bd70      	pop	{r4, r5, r6, pc}

0800b908 <__match>:
 800b908:	b530      	push	{r4, r5, lr}
 800b90a:	6803      	ldr	r3, [r0, #0]
 800b90c:	3301      	adds	r3, #1
 800b90e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b912:	b914      	cbnz	r4, 800b91a <__match+0x12>
 800b914:	6003      	str	r3, [r0, #0]
 800b916:	2001      	movs	r0, #1
 800b918:	bd30      	pop	{r4, r5, pc}
 800b91a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b91e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b922:	2d19      	cmp	r5, #25
 800b924:	bf98      	it	ls
 800b926:	3220      	addls	r2, #32
 800b928:	42a2      	cmp	r2, r4
 800b92a:	d0f0      	beq.n	800b90e <__match+0x6>
 800b92c:	2000      	movs	r0, #0
 800b92e:	e7f3      	b.n	800b918 <__match+0x10>

0800b930 <__hexnan>:
 800b930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b934:	680b      	ldr	r3, [r1, #0]
 800b936:	6801      	ldr	r1, [r0, #0]
 800b938:	115e      	asrs	r6, r3, #5
 800b93a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b93e:	f013 031f 	ands.w	r3, r3, #31
 800b942:	b087      	sub	sp, #28
 800b944:	bf18      	it	ne
 800b946:	3604      	addne	r6, #4
 800b948:	2500      	movs	r5, #0
 800b94a:	1f37      	subs	r7, r6, #4
 800b94c:	4682      	mov	sl, r0
 800b94e:	4690      	mov	r8, r2
 800b950:	9301      	str	r3, [sp, #4]
 800b952:	f846 5c04 	str.w	r5, [r6, #-4]
 800b956:	46b9      	mov	r9, r7
 800b958:	463c      	mov	r4, r7
 800b95a:	9502      	str	r5, [sp, #8]
 800b95c:	46ab      	mov	fp, r5
 800b95e:	784a      	ldrb	r2, [r1, #1]
 800b960:	1c4b      	adds	r3, r1, #1
 800b962:	9303      	str	r3, [sp, #12]
 800b964:	b342      	cbz	r2, 800b9b8 <__hexnan+0x88>
 800b966:	4610      	mov	r0, r2
 800b968:	9105      	str	r1, [sp, #20]
 800b96a:	9204      	str	r2, [sp, #16]
 800b96c:	f7ff fd5e 	bl	800b42c <__hexdig_fun>
 800b970:	2800      	cmp	r0, #0
 800b972:	d14f      	bne.n	800ba14 <__hexnan+0xe4>
 800b974:	9a04      	ldr	r2, [sp, #16]
 800b976:	9905      	ldr	r1, [sp, #20]
 800b978:	2a20      	cmp	r2, #32
 800b97a:	d818      	bhi.n	800b9ae <__hexnan+0x7e>
 800b97c:	9b02      	ldr	r3, [sp, #8]
 800b97e:	459b      	cmp	fp, r3
 800b980:	dd13      	ble.n	800b9aa <__hexnan+0x7a>
 800b982:	454c      	cmp	r4, r9
 800b984:	d206      	bcs.n	800b994 <__hexnan+0x64>
 800b986:	2d07      	cmp	r5, #7
 800b988:	dc04      	bgt.n	800b994 <__hexnan+0x64>
 800b98a:	462a      	mov	r2, r5
 800b98c:	4649      	mov	r1, r9
 800b98e:	4620      	mov	r0, r4
 800b990:	f7ff ffa8 	bl	800b8e4 <L_shift>
 800b994:	4544      	cmp	r4, r8
 800b996:	d950      	bls.n	800ba3a <__hexnan+0x10a>
 800b998:	2300      	movs	r3, #0
 800b99a:	f1a4 0904 	sub.w	r9, r4, #4
 800b99e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b9a2:	f8cd b008 	str.w	fp, [sp, #8]
 800b9a6:	464c      	mov	r4, r9
 800b9a8:	461d      	mov	r5, r3
 800b9aa:	9903      	ldr	r1, [sp, #12]
 800b9ac:	e7d7      	b.n	800b95e <__hexnan+0x2e>
 800b9ae:	2a29      	cmp	r2, #41	; 0x29
 800b9b0:	d156      	bne.n	800ba60 <__hexnan+0x130>
 800b9b2:	3102      	adds	r1, #2
 800b9b4:	f8ca 1000 	str.w	r1, [sl]
 800b9b8:	f1bb 0f00 	cmp.w	fp, #0
 800b9bc:	d050      	beq.n	800ba60 <__hexnan+0x130>
 800b9be:	454c      	cmp	r4, r9
 800b9c0:	d206      	bcs.n	800b9d0 <__hexnan+0xa0>
 800b9c2:	2d07      	cmp	r5, #7
 800b9c4:	dc04      	bgt.n	800b9d0 <__hexnan+0xa0>
 800b9c6:	462a      	mov	r2, r5
 800b9c8:	4649      	mov	r1, r9
 800b9ca:	4620      	mov	r0, r4
 800b9cc:	f7ff ff8a 	bl	800b8e4 <L_shift>
 800b9d0:	4544      	cmp	r4, r8
 800b9d2:	d934      	bls.n	800ba3e <__hexnan+0x10e>
 800b9d4:	f1a8 0204 	sub.w	r2, r8, #4
 800b9d8:	4623      	mov	r3, r4
 800b9da:	f853 1b04 	ldr.w	r1, [r3], #4
 800b9de:	f842 1f04 	str.w	r1, [r2, #4]!
 800b9e2:	429f      	cmp	r7, r3
 800b9e4:	d2f9      	bcs.n	800b9da <__hexnan+0xaa>
 800b9e6:	1b3b      	subs	r3, r7, r4
 800b9e8:	f023 0303 	bic.w	r3, r3, #3
 800b9ec:	3304      	adds	r3, #4
 800b9ee:	3401      	adds	r4, #1
 800b9f0:	3e03      	subs	r6, #3
 800b9f2:	42b4      	cmp	r4, r6
 800b9f4:	bf88      	it	hi
 800b9f6:	2304      	movhi	r3, #4
 800b9f8:	4443      	add	r3, r8
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f843 2b04 	str.w	r2, [r3], #4
 800ba00:	429f      	cmp	r7, r3
 800ba02:	d2fb      	bcs.n	800b9fc <__hexnan+0xcc>
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	b91b      	cbnz	r3, 800ba10 <__hexnan+0xe0>
 800ba08:	4547      	cmp	r7, r8
 800ba0a:	d127      	bne.n	800ba5c <__hexnan+0x12c>
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	603b      	str	r3, [r7, #0]
 800ba10:	2005      	movs	r0, #5
 800ba12:	e026      	b.n	800ba62 <__hexnan+0x132>
 800ba14:	3501      	adds	r5, #1
 800ba16:	2d08      	cmp	r5, #8
 800ba18:	f10b 0b01 	add.w	fp, fp, #1
 800ba1c:	dd06      	ble.n	800ba2c <__hexnan+0xfc>
 800ba1e:	4544      	cmp	r4, r8
 800ba20:	d9c3      	bls.n	800b9aa <__hexnan+0x7a>
 800ba22:	2300      	movs	r3, #0
 800ba24:	f844 3c04 	str.w	r3, [r4, #-4]
 800ba28:	2501      	movs	r5, #1
 800ba2a:	3c04      	subs	r4, #4
 800ba2c:	6822      	ldr	r2, [r4, #0]
 800ba2e:	f000 000f 	and.w	r0, r0, #15
 800ba32:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ba36:	6022      	str	r2, [r4, #0]
 800ba38:	e7b7      	b.n	800b9aa <__hexnan+0x7a>
 800ba3a:	2508      	movs	r5, #8
 800ba3c:	e7b5      	b.n	800b9aa <__hexnan+0x7a>
 800ba3e:	9b01      	ldr	r3, [sp, #4]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d0df      	beq.n	800ba04 <__hexnan+0xd4>
 800ba44:	f04f 32ff 	mov.w	r2, #4294967295
 800ba48:	f1c3 0320 	rsb	r3, r3, #32
 800ba4c:	fa22 f303 	lsr.w	r3, r2, r3
 800ba50:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ba54:	401a      	ands	r2, r3
 800ba56:	f846 2c04 	str.w	r2, [r6, #-4]
 800ba5a:	e7d3      	b.n	800ba04 <__hexnan+0xd4>
 800ba5c:	3f04      	subs	r7, #4
 800ba5e:	e7d1      	b.n	800ba04 <__hexnan+0xd4>
 800ba60:	2004      	movs	r0, #4
 800ba62:	b007      	add	sp, #28
 800ba64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ba68 <_localeconv_r>:
 800ba68:	4800      	ldr	r0, [pc, #0]	; (800ba6c <_localeconv_r+0x4>)
 800ba6a:	4770      	bx	lr
 800ba6c:	20000194 	.word	0x20000194

0800ba70 <malloc>:
 800ba70:	4b02      	ldr	r3, [pc, #8]	; (800ba7c <malloc+0xc>)
 800ba72:	4601      	mov	r1, r0
 800ba74:	6818      	ldr	r0, [r3, #0]
 800ba76:	f000 bd3d 	b.w	800c4f4 <_malloc_r>
 800ba7a:	bf00      	nop
 800ba7c:	2000003c 	.word	0x2000003c

0800ba80 <__ascii_mbtowc>:
 800ba80:	b082      	sub	sp, #8
 800ba82:	b901      	cbnz	r1, 800ba86 <__ascii_mbtowc+0x6>
 800ba84:	a901      	add	r1, sp, #4
 800ba86:	b142      	cbz	r2, 800ba9a <__ascii_mbtowc+0x1a>
 800ba88:	b14b      	cbz	r3, 800ba9e <__ascii_mbtowc+0x1e>
 800ba8a:	7813      	ldrb	r3, [r2, #0]
 800ba8c:	600b      	str	r3, [r1, #0]
 800ba8e:	7812      	ldrb	r2, [r2, #0]
 800ba90:	1e10      	subs	r0, r2, #0
 800ba92:	bf18      	it	ne
 800ba94:	2001      	movne	r0, #1
 800ba96:	b002      	add	sp, #8
 800ba98:	4770      	bx	lr
 800ba9a:	4610      	mov	r0, r2
 800ba9c:	e7fb      	b.n	800ba96 <__ascii_mbtowc+0x16>
 800ba9e:	f06f 0001 	mvn.w	r0, #1
 800baa2:	e7f8      	b.n	800ba96 <__ascii_mbtowc+0x16>

0800baa4 <memcpy>:
 800baa4:	440a      	add	r2, r1
 800baa6:	4291      	cmp	r1, r2
 800baa8:	f100 33ff 	add.w	r3, r0, #4294967295
 800baac:	d100      	bne.n	800bab0 <memcpy+0xc>
 800baae:	4770      	bx	lr
 800bab0:	b510      	push	{r4, lr}
 800bab2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bab6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800baba:	4291      	cmp	r1, r2
 800babc:	d1f9      	bne.n	800bab2 <memcpy+0xe>
 800babe:	bd10      	pop	{r4, pc}

0800bac0 <_Balloc>:
 800bac0:	b570      	push	{r4, r5, r6, lr}
 800bac2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bac4:	4604      	mov	r4, r0
 800bac6:	460d      	mov	r5, r1
 800bac8:	b976      	cbnz	r6, 800bae8 <_Balloc+0x28>
 800baca:	2010      	movs	r0, #16
 800bacc:	f7ff ffd0 	bl	800ba70 <malloc>
 800bad0:	4602      	mov	r2, r0
 800bad2:	6260      	str	r0, [r4, #36]	; 0x24
 800bad4:	b920      	cbnz	r0, 800bae0 <_Balloc+0x20>
 800bad6:	4b18      	ldr	r3, [pc, #96]	; (800bb38 <_Balloc+0x78>)
 800bad8:	4818      	ldr	r0, [pc, #96]	; (800bb3c <_Balloc+0x7c>)
 800bada:	2166      	movs	r1, #102	; 0x66
 800badc:	f000 fef8 	bl	800c8d0 <__assert_func>
 800bae0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bae4:	6006      	str	r6, [r0, #0]
 800bae6:	60c6      	str	r6, [r0, #12]
 800bae8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800baea:	68f3      	ldr	r3, [r6, #12]
 800baec:	b183      	cbz	r3, 800bb10 <_Balloc+0x50>
 800baee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800baf0:	68db      	ldr	r3, [r3, #12]
 800baf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800baf6:	b9b8      	cbnz	r0, 800bb28 <_Balloc+0x68>
 800baf8:	2101      	movs	r1, #1
 800bafa:	fa01 f605 	lsl.w	r6, r1, r5
 800bafe:	1d72      	adds	r2, r6, #5
 800bb00:	0092      	lsls	r2, r2, #2
 800bb02:	4620      	mov	r0, r4
 800bb04:	f000 fc97 	bl	800c436 <_calloc_r>
 800bb08:	b160      	cbz	r0, 800bb24 <_Balloc+0x64>
 800bb0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bb0e:	e00e      	b.n	800bb2e <_Balloc+0x6e>
 800bb10:	2221      	movs	r2, #33	; 0x21
 800bb12:	2104      	movs	r1, #4
 800bb14:	4620      	mov	r0, r4
 800bb16:	f000 fc8e 	bl	800c436 <_calloc_r>
 800bb1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb1c:	60f0      	str	r0, [r6, #12]
 800bb1e:	68db      	ldr	r3, [r3, #12]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d1e4      	bne.n	800baee <_Balloc+0x2e>
 800bb24:	2000      	movs	r0, #0
 800bb26:	bd70      	pop	{r4, r5, r6, pc}
 800bb28:	6802      	ldr	r2, [r0, #0]
 800bb2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bb2e:	2300      	movs	r3, #0
 800bb30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bb34:	e7f7      	b.n	800bb26 <_Balloc+0x66>
 800bb36:	bf00      	nop
 800bb38:	0800fece 	.word	0x0800fece
 800bb3c:	0800ffd4 	.word	0x0800ffd4

0800bb40 <_Bfree>:
 800bb40:	b570      	push	{r4, r5, r6, lr}
 800bb42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb44:	4605      	mov	r5, r0
 800bb46:	460c      	mov	r4, r1
 800bb48:	b976      	cbnz	r6, 800bb68 <_Bfree+0x28>
 800bb4a:	2010      	movs	r0, #16
 800bb4c:	f7ff ff90 	bl	800ba70 <malloc>
 800bb50:	4602      	mov	r2, r0
 800bb52:	6268      	str	r0, [r5, #36]	; 0x24
 800bb54:	b920      	cbnz	r0, 800bb60 <_Bfree+0x20>
 800bb56:	4b09      	ldr	r3, [pc, #36]	; (800bb7c <_Bfree+0x3c>)
 800bb58:	4809      	ldr	r0, [pc, #36]	; (800bb80 <_Bfree+0x40>)
 800bb5a:	218a      	movs	r1, #138	; 0x8a
 800bb5c:	f000 feb8 	bl	800c8d0 <__assert_func>
 800bb60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb64:	6006      	str	r6, [r0, #0]
 800bb66:	60c6      	str	r6, [r0, #12]
 800bb68:	b13c      	cbz	r4, 800bb7a <_Bfree+0x3a>
 800bb6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bb6c:	6862      	ldr	r2, [r4, #4]
 800bb6e:	68db      	ldr	r3, [r3, #12]
 800bb70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb74:	6021      	str	r1, [r4, #0]
 800bb76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb7a:	bd70      	pop	{r4, r5, r6, pc}
 800bb7c:	0800fece 	.word	0x0800fece
 800bb80:	0800ffd4 	.word	0x0800ffd4

0800bb84 <__multadd>:
 800bb84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb88:	690e      	ldr	r6, [r1, #16]
 800bb8a:	4607      	mov	r7, r0
 800bb8c:	4698      	mov	r8, r3
 800bb8e:	460c      	mov	r4, r1
 800bb90:	f101 0014 	add.w	r0, r1, #20
 800bb94:	2300      	movs	r3, #0
 800bb96:	6805      	ldr	r5, [r0, #0]
 800bb98:	b2a9      	uxth	r1, r5
 800bb9a:	fb02 8101 	mla	r1, r2, r1, r8
 800bb9e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800bba2:	0c2d      	lsrs	r5, r5, #16
 800bba4:	fb02 c505 	mla	r5, r2, r5, ip
 800bba8:	b289      	uxth	r1, r1
 800bbaa:	3301      	adds	r3, #1
 800bbac:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800bbb0:	429e      	cmp	r6, r3
 800bbb2:	f840 1b04 	str.w	r1, [r0], #4
 800bbb6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800bbba:	dcec      	bgt.n	800bb96 <__multadd+0x12>
 800bbbc:	f1b8 0f00 	cmp.w	r8, #0
 800bbc0:	d022      	beq.n	800bc08 <__multadd+0x84>
 800bbc2:	68a3      	ldr	r3, [r4, #8]
 800bbc4:	42b3      	cmp	r3, r6
 800bbc6:	dc19      	bgt.n	800bbfc <__multadd+0x78>
 800bbc8:	6861      	ldr	r1, [r4, #4]
 800bbca:	4638      	mov	r0, r7
 800bbcc:	3101      	adds	r1, #1
 800bbce:	f7ff ff77 	bl	800bac0 <_Balloc>
 800bbd2:	4605      	mov	r5, r0
 800bbd4:	b928      	cbnz	r0, 800bbe2 <__multadd+0x5e>
 800bbd6:	4602      	mov	r2, r0
 800bbd8:	4b0d      	ldr	r3, [pc, #52]	; (800bc10 <__multadd+0x8c>)
 800bbda:	480e      	ldr	r0, [pc, #56]	; (800bc14 <__multadd+0x90>)
 800bbdc:	21b5      	movs	r1, #181	; 0xb5
 800bbde:	f000 fe77 	bl	800c8d0 <__assert_func>
 800bbe2:	6922      	ldr	r2, [r4, #16]
 800bbe4:	3202      	adds	r2, #2
 800bbe6:	f104 010c 	add.w	r1, r4, #12
 800bbea:	0092      	lsls	r2, r2, #2
 800bbec:	300c      	adds	r0, #12
 800bbee:	f7ff ff59 	bl	800baa4 <memcpy>
 800bbf2:	4621      	mov	r1, r4
 800bbf4:	4638      	mov	r0, r7
 800bbf6:	f7ff ffa3 	bl	800bb40 <_Bfree>
 800bbfa:	462c      	mov	r4, r5
 800bbfc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bc00:	3601      	adds	r6, #1
 800bc02:	f8c3 8014 	str.w	r8, [r3, #20]
 800bc06:	6126      	str	r6, [r4, #16]
 800bc08:	4620      	mov	r0, r4
 800bc0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc0e:	bf00      	nop
 800bc10:	0800ff44 	.word	0x0800ff44
 800bc14:	0800ffd4 	.word	0x0800ffd4

0800bc18 <__s2b>:
 800bc18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc1c:	460c      	mov	r4, r1
 800bc1e:	4615      	mov	r5, r2
 800bc20:	461f      	mov	r7, r3
 800bc22:	2209      	movs	r2, #9
 800bc24:	3308      	adds	r3, #8
 800bc26:	4606      	mov	r6, r0
 800bc28:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc2c:	2100      	movs	r1, #0
 800bc2e:	2201      	movs	r2, #1
 800bc30:	429a      	cmp	r2, r3
 800bc32:	db09      	blt.n	800bc48 <__s2b+0x30>
 800bc34:	4630      	mov	r0, r6
 800bc36:	f7ff ff43 	bl	800bac0 <_Balloc>
 800bc3a:	b940      	cbnz	r0, 800bc4e <__s2b+0x36>
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	4b19      	ldr	r3, [pc, #100]	; (800bca4 <__s2b+0x8c>)
 800bc40:	4819      	ldr	r0, [pc, #100]	; (800bca8 <__s2b+0x90>)
 800bc42:	21ce      	movs	r1, #206	; 0xce
 800bc44:	f000 fe44 	bl	800c8d0 <__assert_func>
 800bc48:	0052      	lsls	r2, r2, #1
 800bc4a:	3101      	adds	r1, #1
 800bc4c:	e7f0      	b.n	800bc30 <__s2b+0x18>
 800bc4e:	9b08      	ldr	r3, [sp, #32]
 800bc50:	6143      	str	r3, [r0, #20]
 800bc52:	2d09      	cmp	r5, #9
 800bc54:	f04f 0301 	mov.w	r3, #1
 800bc58:	6103      	str	r3, [r0, #16]
 800bc5a:	dd16      	ble.n	800bc8a <__s2b+0x72>
 800bc5c:	f104 0909 	add.w	r9, r4, #9
 800bc60:	46c8      	mov	r8, r9
 800bc62:	442c      	add	r4, r5
 800bc64:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bc68:	4601      	mov	r1, r0
 800bc6a:	3b30      	subs	r3, #48	; 0x30
 800bc6c:	220a      	movs	r2, #10
 800bc6e:	4630      	mov	r0, r6
 800bc70:	f7ff ff88 	bl	800bb84 <__multadd>
 800bc74:	45a0      	cmp	r8, r4
 800bc76:	d1f5      	bne.n	800bc64 <__s2b+0x4c>
 800bc78:	f1a5 0408 	sub.w	r4, r5, #8
 800bc7c:	444c      	add	r4, r9
 800bc7e:	1b2d      	subs	r5, r5, r4
 800bc80:	1963      	adds	r3, r4, r5
 800bc82:	42bb      	cmp	r3, r7
 800bc84:	db04      	blt.n	800bc90 <__s2b+0x78>
 800bc86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc8a:	340a      	adds	r4, #10
 800bc8c:	2509      	movs	r5, #9
 800bc8e:	e7f6      	b.n	800bc7e <__s2b+0x66>
 800bc90:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bc94:	4601      	mov	r1, r0
 800bc96:	3b30      	subs	r3, #48	; 0x30
 800bc98:	220a      	movs	r2, #10
 800bc9a:	4630      	mov	r0, r6
 800bc9c:	f7ff ff72 	bl	800bb84 <__multadd>
 800bca0:	e7ee      	b.n	800bc80 <__s2b+0x68>
 800bca2:	bf00      	nop
 800bca4:	0800ff44 	.word	0x0800ff44
 800bca8:	0800ffd4 	.word	0x0800ffd4

0800bcac <__hi0bits>:
 800bcac:	0c03      	lsrs	r3, r0, #16
 800bcae:	041b      	lsls	r3, r3, #16
 800bcb0:	b9d3      	cbnz	r3, 800bce8 <__hi0bits+0x3c>
 800bcb2:	0400      	lsls	r0, r0, #16
 800bcb4:	2310      	movs	r3, #16
 800bcb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bcba:	bf04      	itt	eq
 800bcbc:	0200      	lsleq	r0, r0, #8
 800bcbe:	3308      	addeq	r3, #8
 800bcc0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bcc4:	bf04      	itt	eq
 800bcc6:	0100      	lsleq	r0, r0, #4
 800bcc8:	3304      	addeq	r3, #4
 800bcca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bcce:	bf04      	itt	eq
 800bcd0:	0080      	lsleq	r0, r0, #2
 800bcd2:	3302      	addeq	r3, #2
 800bcd4:	2800      	cmp	r0, #0
 800bcd6:	db05      	blt.n	800bce4 <__hi0bits+0x38>
 800bcd8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bcdc:	f103 0301 	add.w	r3, r3, #1
 800bce0:	bf08      	it	eq
 800bce2:	2320      	moveq	r3, #32
 800bce4:	4618      	mov	r0, r3
 800bce6:	4770      	bx	lr
 800bce8:	2300      	movs	r3, #0
 800bcea:	e7e4      	b.n	800bcb6 <__hi0bits+0xa>

0800bcec <__lo0bits>:
 800bcec:	6803      	ldr	r3, [r0, #0]
 800bcee:	f013 0207 	ands.w	r2, r3, #7
 800bcf2:	4601      	mov	r1, r0
 800bcf4:	d00b      	beq.n	800bd0e <__lo0bits+0x22>
 800bcf6:	07da      	lsls	r2, r3, #31
 800bcf8:	d424      	bmi.n	800bd44 <__lo0bits+0x58>
 800bcfa:	0798      	lsls	r0, r3, #30
 800bcfc:	bf49      	itett	mi
 800bcfe:	085b      	lsrmi	r3, r3, #1
 800bd00:	089b      	lsrpl	r3, r3, #2
 800bd02:	2001      	movmi	r0, #1
 800bd04:	600b      	strmi	r3, [r1, #0]
 800bd06:	bf5c      	itt	pl
 800bd08:	600b      	strpl	r3, [r1, #0]
 800bd0a:	2002      	movpl	r0, #2
 800bd0c:	4770      	bx	lr
 800bd0e:	b298      	uxth	r0, r3
 800bd10:	b9b0      	cbnz	r0, 800bd40 <__lo0bits+0x54>
 800bd12:	0c1b      	lsrs	r3, r3, #16
 800bd14:	2010      	movs	r0, #16
 800bd16:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bd1a:	bf04      	itt	eq
 800bd1c:	0a1b      	lsreq	r3, r3, #8
 800bd1e:	3008      	addeq	r0, #8
 800bd20:	071a      	lsls	r2, r3, #28
 800bd22:	bf04      	itt	eq
 800bd24:	091b      	lsreq	r3, r3, #4
 800bd26:	3004      	addeq	r0, #4
 800bd28:	079a      	lsls	r2, r3, #30
 800bd2a:	bf04      	itt	eq
 800bd2c:	089b      	lsreq	r3, r3, #2
 800bd2e:	3002      	addeq	r0, #2
 800bd30:	07da      	lsls	r2, r3, #31
 800bd32:	d403      	bmi.n	800bd3c <__lo0bits+0x50>
 800bd34:	085b      	lsrs	r3, r3, #1
 800bd36:	f100 0001 	add.w	r0, r0, #1
 800bd3a:	d005      	beq.n	800bd48 <__lo0bits+0x5c>
 800bd3c:	600b      	str	r3, [r1, #0]
 800bd3e:	4770      	bx	lr
 800bd40:	4610      	mov	r0, r2
 800bd42:	e7e8      	b.n	800bd16 <__lo0bits+0x2a>
 800bd44:	2000      	movs	r0, #0
 800bd46:	4770      	bx	lr
 800bd48:	2020      	movs	r0, #32
 800bd4a:	4770      	bx	lr

0800bd4c <__i2b>:
 800bd4c:	b510      	push	{r4, lr}
 800bd4e:	460c      	mov	r4, r1
 800bd50:	2101      	movs	r1, #1
 800bd52:	f7ff feb5 	bl	800bac0 <_Balloc>
 800bd56:	4602      	mov	r2, r0
 800bd58:	b928      	cbnz	r0, 800bd66 <__i2b+0x1a>
 800bd5a:	4b05      	ldr	r3, [pc, #20]	; (800bd70 <__i2b+0x24>)
 800bd5c:	4805      	ldr	r0, [pc, #20]	; (800bd74 <__i2b+0x28>)
 800bd5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bd62:	f000 fdb5 	bl	800c8d0 <__assert_func>
 800bd66:	2301      	movs	r3, #1
 800bd68:	6144      	str	r4, [r0, #20]
 800bd6a:	6103      	str	r3, [r0, #16]
 800bd6c:	bd10      	pop	{r4, pc}
 800bd6e:	bf00      	nop
 800bd70:	0800ff44 	.word	0x0800ff44
 800bd74:	0800ffd4 	.word	0x0800ffd4

0800bd78 <__multiply>:
 800bd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd7c:	4614      	mov	r4, r2
 800bd7e:	690a      	ldr	r2, [r1, #16]
 800bd80:	6923      	ldr	r3, [r4, #16]
 800bd82:	429a      	cmp	r2, r3
 800bd84:	bfb8      	it	lt
 800bd86:	460b      	movlt	r3, r1
 800bd88:	460d      	mov	r5, r1
 800bd8a:	bfbc      	itt	lt
 800bd8c:	4625      	movlt	r5, r4
 800bd8e:	461c      	movlt	r4, r3
 800bd90:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bd94:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bd98:	68ab      	ldr	r3, [r5, #8]
 800bd9a:	6869      	ldr	r1, [r5, #4]
 800bd9c:	eb0a 0709 	add.w	r7, sl, r9
 800bda0:	42bb      	cmp	r3, r7
 800bda2:	b085      	sub	sp, #20
 800bda4:	bfb8      	it	lt
 800bda6:	3101      	addlt	r1, #1
 800bda8:	f7ff fe8a 	bl	800bac0 <_Balloc>
 800bdac:	b930      	cbnz	r0, 800bdbc <__multiply+0x44>
 800bdae:	4602      	mov	r2, r0
 800bdb0:	4b42      	ldr	r3, [pc, #264]	; (800bebc <__multiply+0x144>)
 800bdb2:	4843      	ldr	r0, [pc, #268]	; (800bec0 <__multiply+0x148>)
 800bdb4:	f240 115d 	movw	r1, #349	; 0x15d
 800bdb8:	f000 fd8a 	bl	800c8d0 <__assert_func>
 800bdbc:	f100 0614 	add.w	r6, r0, #20
 800bdc0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bdc4:	4633      	mov	r3, r6
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	4543      	cmp	r3, r8
 800bdca:	d31e      	bcc.n	800be0a <__multiply+0x92>
 800bdcc:	f105 0c14 	add.w	ip, r5, #20
 800bdd0:	f104 0314 	add.w	r3, r4, #20
 800bdd4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bdd8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bddc:	9202      	str	r2, [sp, #8]
 800bdde:	ebac 0205 	sub.w	r2, ip, r5
 800bde2:	3a15      	subs	r2, #21
 800bde4:	f022 0203 	bic.w	r2, r2, #3
 800bde8:	3204      	adds	r2, #4
 800bdea:	f105 0115 	add.w	r1, r5, #21
 800bdee:	458c      	cmp	ip, r1
 800bdf0:	bf38      	it	cc
 800bdf2:	2204      	movcc	r2, #4
 800bdf4:	9201      	str	r2, [sp, #4]
 800bdf6:	9a02      	ldr	r2, [sp, #8]
 800bdf8:	9303      	str	r3, [sp, #12]
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d808      	bhi.n	800be10 <__multiply+0x98>
 800bdfe:	2f00      	cmp	r7, #0
 800be00:	dc55      	bgt.n	800beae <__multiply+0x136>
 800be02:	6107      	str	r7, [r0, #16]
 800be04:	b005      	add	sp, #20
 800be06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be0a:	f843 2b04 	str.w	r2, [r3], #4
 800be0e:	e7db      	b.n	800bdc8 <__multiply+0x50>
 800be10:	f8b3 a000 	ldrh.w	sl, [r3]
 800be14:	f1ba 0f00 	cmp.w	sl, #0
 800be18:	d020      	beq.n	800be5c <__multiply+0xe4>
 800be1a:	f105 0e14 	add.w	lr, r5, #20
 800be1e:	46b1      	mov	r9, r6
 800be20:	2200      	movs	r2, #0
 800be22:	f85e 4b04 	ldr.w	r4, [lr], #4
 800be26:	f8d9 b000 	ldr.w	fp, [r9]
 800be2a:	b2a1      	uxth	r1, r4
 800be2c:	fa1f fb8b 	uxth.w	fp, fp
 800be30:	fb0a b101 	mla	r1, sl, r1, fp
 800be34:	4411      	add	r1, r2
 800be36:	f8d9 2000 	ldr.w	r2, [r9]
 800be3a:	0c24      	lsrs	r4, r4, #16
 800be3c:	0c12      	lsrs	r2, r2, #16
 800be3e:	fb0a 2404 	mla	r4, sl, r4, r2
 800be42:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800be46:	b289      	uxth	r1, r1
 800be48:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800be4c:	45f4      	cmp	ip, lr
 800be4e:	f849 1b04 	str.w	r1, [r9], #4
 800be52:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800be56:	d8e4      	bhi.n	800be22 <__multiply+0xaa>
 800be58:	9901      	ldr	r1, [sp, #4]
 800be5a:	5072      	str	r2, [r6, r1]
 800be5c:	9a03      	ldr	r2, [sp, #12]
 800be5e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800be62:	3304      	adds	r3, #4
 800be64:	f1b9 0f00 	cmp.w	r9, #0
 800be68:	d01f      	beq.n	800beaa <__multiply+0x132>
 800be6a:	6834      	ldr	r4, [r6, #0]
 800be6c:	f105 0114 	add.w	r1, r5, #20
 800be70:	46b6      	mov	lr, r6
 800be72:	f04f 0a00 	mov.w	sl, #0
 800be76:	880a      	ldrh	r2, [r1, #0]
 800be78:	f8be b002 	ldrh.w	fp, [lr, #2]
 800be7c:	fb09 b202 	mla	r2, r9, r2, fp
 800be80:	4492      	add	sl, r2
 800be82:	b2a4      	uxth	r4, r4
 800be84:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800be88:	f84e 4b04 	str.w	r4, [lr], #4
 800be8c:	f851 4b04 	ldr.w	r4, [r1], #4
 800be90:	f8be 2000 	ldrh.w	r2, [lr]
 800be94:	0c24      	lsrs	r4, r4, #16
 800be96:	fb09 2404 	mla	r4, r9, r4, r2
 800be9a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800be9e:	458c      	cmp	ip, r1
 800bea0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bea4:	d8e7      	bhi.n	800be76 <__multiply+0xfe>
 800bea6:	9a01      	ldr	r2, [sp, #4]
 800bea8:	50b4      	str	r4, [r6, r2]
 800beaa:	3604      	adds	r6, #4
 800beac:	e7a3      	b.n	800bdf6 <__multiply+0x7e>
 800beae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d1a5      	bne.n	800be02 <__multiply+0x8a>
 800beb6:	3f01      	subs	r7, #1
 800beb8:	e7a1      	b.n	800bdfe <__multiply+0x86>
 800beba:	bf00      	nop
 800bebc:	0800ff44 	.word	0x0800ff44
 800bec0:	0800ffd4 	.word	0x0800ffd4

0800bec4 <__pow5mult>:
 800bec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bec8:	4615      	mov	r5, r2
 800beca:	f012 0203 	ands.w	r2, r2, #3
 800bece:	4606      	mov	r6, r0
 800bed0:	460f      	mov	r7, r1
 800bed2:	d007      	beq.n	800bee4 <__pow5mult+0x20>
 800bed4:	4c25      	ldr	r4, [pc, #148]	; (800bf6c <__pow5mult+0xa8>)
 800bed6:	3a01      	subs	r2, #1
 800bed8:	2300      	movs	r3, #0
 800beda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bede:	f7ff fe51 	bl	800bb84 <__multadd>
 800bee2:	4607      	mov	r7, r0
 800bee4:	10ad      	asrs	r5, r5, #2
 800bee6:	d03d      	beq.n	800bf64 <__pow5mult+0xa0>
 800bee8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800beea:	b97c      	cbnz	r4, 800bf0c <__pow5mult+0x48>
 800beec:	2010      	movs	r0, #16
 800beee:	f7ff fdbf 	bl	800ba70 <malloc>
 800bef2:	4602      	mov	r2, r0
 800bef4:	6270      	str	r0, [r6, #36]	; 0x24
 800bef6:	b928      	cbnz	r0, 800bf04 <__pow5mult+0x40>
 800bef8:	4b1d      	ldr	r3, [pc, #116]	; (800bf70 <__pow5mult+0xac>)
 800befa:	481e      	ldr	r0, [pc, #120]	; (800bf74 <__pow5mult+0xb0>)
 800befc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bf00:	f000 fce6 	bl	800c8d0 <__assert_func>
 800bf04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bf08:	6004      	str	r4, [r0, #0]
 800bf0a:	60c4      	str	r4, [r0, #12]
 800bf0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bf10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bf14:	b94c      	cbnz	r4, 800bf2a <__pow5mult+0x66>
 800bf16:	f240 2171 	movw	r1, #625	; 0x271
 800bf1a:	4630      	mov	r0, r6
 800bf1c:	f7ff ff16 	bl	800bd4c <__i2b>
 800bf20:	2300      	movs	r3, #0
 800bf22:	f8c8 0008 	str.w	r0, [r8, #8]
 800bf26:	4604      	mov	r4, r0
 800bf28:	6003      	str	r3, [r0, #0]
 800bf2a:	f04f 0900 	mov.w	r9, #0
 800bf2e:	07eb      	lsls	r3, r5, #31
 800bf30:	d50a      	bpl.n	800bf48 <__pow5mult+0x84>
 800bf32:	4639      	mov	r1, r7
 800bf34:	4622      	mov	r2, r4
 800bf36:	4630      	mov	r0, r6
 800bf38:	f7ff ff1e 	bl	800bd78 <__multiply>
 800bf3c:	4639      	mov	r1, r7
 800bf3e:	4680      	mov	r8, r0
 800bf40:	4630      	mov	r0, r6
 800bf42:	f7ff fdfd 	bl	800bb40 <_Bfree>
 800bf46:	4647      	mov	r7, r8
 800bf48:	106d      	asrs	r5, r5, #1
 800bf4a:	d00b      	beq.n	800bf64 <__pow5mult+0xa0>
 800bf4c:	6820      	ldr	r0, [r4, #0]
 800bf4e:	b938      	cbnz	r0, 800bf60 <__pow5mult+0x9c>
 800bf50:	4622      	mov	r2, r4
 800bf52:	4621      	mov	r1, r4
 800bf54:	4630      	mov	r0, r6
 800bf56:	f7ff ff0f 	bl	800bd78 <__multiply>
 800bf5a:	6020      	str	r0, [r4, #0]
 800bf5c:	f8c0 9000 	str.w	r9, [r0]
 800bf60:	4604      	mov	r4, r0
 800bf62:	e7e4      	b.n	800bf2e <__pow5mult+0x6a>
 800bf64:	4638      	mov	r0, r7
 800bf66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf6a:	bf00      	nop
 800bf6c:	08010128 	.word	0x08010128
 800bf70:	0800fece 	.word	0x0800fece
 800bf74:	0800ffd4 	.word	0x0800ffd4

0800bf78 <__lshift>:
 800bf78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf7c:	460c      	mov	r4, r1
 800bf7e:	6849      	ldr	r1, [r1, #4]
 800bf80:	6923      	ldr	r3, [r4, #16]
 800bf82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf86:	68a3      	ldr	r3, [r4, #8]
 800bf88:	4607      	mov	r7, r0
 800bf8a:	4691      	mov	r9, r2
 800bf8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf90:	f108 0601 	add.w	r6, r8, #1
 800bf94:	42b3      	cmp	r3, r6
 800bf96:	db0b      	blt.n	800bfb0 <__lshift+0x38>
 800bf98:	4638      	mov	r0, r7
 800bf9a:	f7ff fd91 	bl	800bac0 <_Balloc>
 800bf9e:	4605      	mov	r5, r0
 800bfa0:	b948      	cbnz	r0, 800bfb6 <__lshift+0x3e>
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	4b28      	ldr	r3, [pc, #160]	; (800c048 <__lshift+0xd0>)
 800bfa6:	4829      	ldr	r0, [pc, #164]	; (800c04c <__lshift+0xd4>)
 800bfa8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bfac:	f000 fc90 	bl	800c8d0 <__assert_func>
 800bfb0:	3101      	adds	r1, #1
 800bfb2:	005b      	lsls	r3, r3, #1
 800bfb4:	e7ee      	b.n	800bf94 <__lshift+0x1c>
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	f100 0114 	add.w	r1, r0, #20
 800bfbc:	f100 0210 	add.w	r2, r0, #16
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	4553      	cmp	r3, sl
 800bfc4:	db33      	blt.n	800c02e <__lshift+0xb6>
 800bfc6:	6920      	ldr	r0, [r4, #16]
 800bfc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bfcc:	f104 0314 	add.w	r3, r4, #20
 800bfd0:	f019 091f 	ands.w	r9, r9, #31
 800bfd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bfd8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bfdc:	d02b      	beq.n	800c036 <__lshift+0xbe>
 800bfde:	f1c9 0e20 	rsb	lr, r9, #32
 800bfe2:	468a      	mov	sl, r1
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	6818      	ldr	r0, [r3, #0]
 800bfe8:	fa00 f009 	lsl.w	r0, r0, r9
 800bfec:	4302      	orrs	r2, r0
 800bfee:	f84a 2b04 	str.w	r2, [sl], #4
 800bff2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bff6:	459c      	cmp	ip, r3
 800bff8:	fa22 f20e 	lsr.w	r2, r2, lr
 800bffc:	d8f3      	bhi.n	800bfe6 <__lshift+0x6e>
 800bffe:	ebac 0304 	sub.w	r3, ip, r4
 800c002:	3b15      	subs	r3, #21
 800c004:	f023 0303 	bic.w	r3, r3, #3
 800c008:	3304      	adds	r3, #4
 800c00a:	f104 0015 	add.w	r0, r4, #21
 800c00e:	4584      	cmp	ip, r0
 800c010:	bf38      	it	cc
 800c012:	2304      	movcc	r3, #4
 800c014:	50ca      	str	r2, [r1, r3]
 800c016:	b10a      	cbz	r2, 800c01c <__lshift+0xa4>
 800c018:	f108 0602 	add.w	r6, r8, #2
 800c01c:	3e01      	subs	r6, #1
 800c01e:	4638      	mov	r0, r7
 800c020:	612e      	str	r6, [r5, #16]
 800c022:	4621      	mov	r1, r4
 800c024:	f7ff fd8c 	bl	800bb40 <_Bfree>
 800c028:	4628      	mov	r0, r5
 800c02a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c02e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c032:	3301      	adds	r3, #1
 800c034:	e7c5      	b.n	800bfc2 <__lshift+0x4a>
 800c036:	3904      	subs	r1, #4
 800c038:	f853 2b04 	ldr.w	r2, [r3], #4
 800c03c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c040:	459c      	cmp	ip, r3
 800c042:	d8f9      	bhi.n	800c038 <__lshift+0xc0>
 800c044:	e7ea      	b.n	800c01c <__lshift+0xa4>
 800c046:	bf00      	nop
 800c048:	0800ff44 	.word	0x0800ff44
 800c04c:	0800ffd4 	.word	0x0800ffd4

0800c050 <__mcmp>:
 800c050:	b530      	push	{r4, r5, lr}
 800c052:	6902      	ldr	r2, [r0, #16]
 800c054:	690c      	ldr	r4, [r1, #16]
 800c056:	1b12      	subs	r2, r2, r4
 800c058:	d10e      	bne.n	800c078 <__mcmp+0x28>
 800c05a:	f100 0314 	add.w	r3, r0, #20
 800c05e:	3114      	adds	r1, #20
 800c060:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c064:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c068:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c06c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c070:	42a5      	cmp	r5, r4
 800c072:	d003      	beq.n	800c07c <__mcmp+0x2c>
 800c074:	d305      	bcc.n	800c082 <__mcmp+0x32>
 800c076:	2201      	movs	r2, #1
 800c078:	4610      	mov	r0, r2
 800c07a:	bd30      	pop	{r4, r5, pc}
 800c07c:	4283      	cmp	r3, r0
 800c07e:	d3f3      	bcc.n	800c068 <__mcmp+0x18>
 800c080:	e7fa      	b.n	800c078 <__mcmp+0x28>
 800c082:	f04f 32ff 	mov.w	r2, #4294967295
 800c086:	e7f7      	b.n	800c078 <__mcmp+0x28>

0800c088 <__mdiff>:
 800c088:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c08c:	460c      	mov	r4, r1
 800c08e:	4606      	mov	r6, r0
 800c090:	4611      	mov	r1, r2
 800c092:	4620      	mov	r0, r4
 800c094:	4617      	mov	r7, r2
 800c096:	f7ff ffdb 	bl	800c050 <__mcmp>
 800c09a:	1e05      	subs	r5, r0, #0
 800c09c:	d110      	bne.n	800c0c0 <__mdiff+0x38>
 800c09e:	4629      	mov	r1, r5
 800c0a0:	4630      	mov	r0, r6
 800c0a2:	f7ff fd0d 	bl	800bac0 <_Balloc>
 800c0a6:	b930      	cbnz	r0, 800c0b6 <__mdiff+0x2e>
 800c0a8:	4b39      	ldr	r3, [pc, #228]	; (800c190 <__mdiff+0x108>)
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	f240 2132 	movw	r1, #562	; 0x232
 800c0b0:	4838      	ldr	r0, [pc, #224]	; (800c194 <__mdiff+0x10c>)
 800c0b2:	f000 fc0d 	bl	800c8d0 <__assert_func>
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c0bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0c0:	bfa4      	itt	ge
 800c0c2:	463b      	movge	r3, r7
 800c0c4:	4627      	movge	r7, r4
 800c0c6:	4630      	mov	r0, r6
 800c0c8:	6879      	ldr	r1, [r7, #4]
 800c0ca:	bfa6      	itte	ge
 800c0cc:	461c      	movge	r4, r3
 800c0ce:	2500      	movge	r5, #0
 800c0d0:	2501      	movlt	r5, #1
 800c0d2:	f7ff fcf5 	bl	800bac0 <_Balloc>
 800c0d6:	b920      	cbnz	r0, 800c0e2 <__mdiff+0x5a>
 800c0d8:	4b2d      	ldr	r3, [pc, #180]	; (800c190 <__mdiff+0x108>)
 800c0da:	4602      	mov	r2, r0
 800c0dc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c0e0:	e7e6      	b.n	800c0b0 <__mdiff+0x28>
 800c0e2:	693e      	ldr	r6, [r7, #16]
 800c0e4:	60c5      	str	r5, [r0, #12]
 800c0e6:	6925      	ldr	r5, [r4, #16]
 800c0e8:	f107 0114 	add.w	r1, r7, #20
 800c0ec:	f104 0914 	add.w	r9, r4, #20
 800c0f0:	f100 0e14 	add.w	lr, r0, #20
 800c0f4:	f107 0210 	add.w	r2, r7, #16
 800c0f8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c0fc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c100:	46f2      	mov	sl, lr
 800c102:	2700      	movs	r7, #0
 800c104:	f859 3b04 	ldr.w	r3, [r9], #4
 800c108:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c10c:	fa1f f883 	uxth.w	r8, r3
 800c110:	fa17 f78b 	uxtah	r7, r7, fp
 800c114:	0c1b      	lsrs	r3, r3, #16
 800c116:	eba7 0808 	sub.w	r8, r7, r8
 800c11a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c11e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c122:	fa1f f888 	uxth.w	r8, r8
 800c126:	141f      	asrs	r7, r3, #16
 800c128:	454d      	cmp	r5, r9
 800c12a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c12e:	f84a 3b04 	str.w	r3, [sl], #4
 800c132:	d8e7      	bhi.n	800c104 <__mdiff+0x7c>
 800c134:	1b2b      	subs	r3, r5, r4
 800c136:	3b15      	subs	r3, #21
 800c138:	f023 0303 	bic.w	r3, r3, #3
 800c13c:	3304      	adds	r3, #4
 800c13e:	3415      	adds	r4, #21
 800c140:	42a5      	cmp	r5, r4
 800c142:	bf38      	it	cc
 800c144:	2304      	movcc	r3, #4
 800c146:	4419      	add	r1, r3
 800c148:	4473      	add	r3, lr
 800c14a:	469e      	mov	lr, r3
 800c14c:	460d      	mov	r5, r1
 800c14e:	4565      	cmp	r5, ip
 800c150:	d30e      	bcc.n	800c170 <__mdiff+0xe8>
 800c152:	f10c 0203 	add.w	r2, ip, #3
 800c156:	1a52      	subs	r2, r2, r1
 800c158:	f022 0203 	bic.w	r2, r2, #3
 800c15c:	3903      	subs	r1, #3
 800c15e:	458c      	cmp	ip, r1
 800c160:	bf38      	it	cc
 800c162:	2200      	movcc	r2, #0
 800c164:	441a      	add	r2, r3
 800c166:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c16a:	b17b      	cbz	r3, 800c18c <__mdiff+0x104>
 800c16c:	6106      	str	r6, [r0, #16]
 800c16e:	e7a5      	b.n	800c0bc <__mdiff+0x34>
 800c170:	f855 8b04 	ldr.w	r8, [r5], #4
 800c174:	fa17 f488 	uxtah	r4, r7, r8
 800c178:	1422      	asrs	r2, r4, #16
 800c17a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c17e:	b2a4      	uxth	r4, r4
 800c180:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c184:	f84e 4b04 	str.w	r4, [lr], #4
 800c188:	1417      	asrs	r7, r2, #16
 800c18a:	e7e0      	b.n	800c14e <__mdiff+0xc6>
 800c18c:	3e01      	subs	r6, #1
 800c18e:	e7ea      	b.n	800c166 <__mdiff+0xde>
 800c190:	0800ff44 	.word	0x0800ff44
 800c194:	0800ffd4 	.word	0x0800ffd4

0800c198 <__ulp>:
 800c198:	b082      	sub	sp, #8
 800c19a:	ed8d 0b00 	vstr	d0, [sp]
 800c19e:	9b01      	ldr	r3, [sp, #4]
 800c1a0:	4912      	ldr	r1, [pc, #72]	; (800c1ec <__ulp+0x54>)
 800c1a2:	4019      	ands	r1, r3
 800c1a4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c1a8:	2900      	cmp	r1, #0
 800c1aa:	dd05      	ble.n	800c1b8 <__ulp+0x20>
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	ec43 2b10 	vmov	d0, r2, r3
 800c1b4:	b002      	add	sp, #8
 800c1b6:	4770      	bx	lr
 800c1b8:	4249      	negs	r1, r1
 800c1ba:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c1be:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c1c2:	f04f 0200 	mov.w	r2, #0
 800c1c6:	f04f 0300 	mov.w	r3, #0
 800c1ca:	da04      	bge.n	800c1d6 <__ulp+0x3e>
 800c1cc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c1d0:	fa41 f300 	asr.w	r3, r1, r0
 800c1d4:	e7ec      	b.n	800c1b0 <__ulp+0x18>
 800c1d6:	f1a0 0114 	sub.w	r1, r0, #20
 800c1da:	291e      	cmp	r1, #30
 800c1dc:	bfda      	itte	le
 800c1de:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c1e2:	fa20 f101 	lsrle.w	r1, r0, r1
 800c1e6:	2101      	movgt	r1, #1
 800c1e8:	460a      	mov	r2, r1
 800c1ea:	e7e1      	b.n	800c1b0 <__ulp+0x18>
 800c1ec:	7ff00000 	.word	0x7ff00000

0800c1f0 <__b2d>:
 800c1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1f2:	6905      	ldr	r5, [r0, #16]
 800c1f4:	f100 0714 	add.w	r7, r0, #20
 800c1f8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c1fc:	1f2e      	subs	r6, r5, #4
 800c1fe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c202:	4620      	mov	r0, r4
 800c204:	f7ff fd52 	bl	800bcac <__hi0bits>
 800c208:	f1c0 0320 	rsb	r3, r0, #32
 800c20c:	280a      	cmp	r0, #10
 800c20e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c28c <__b2d+0x9c>
 800c212:	600b      	str	r3, [r1, #0]
 800c214:	dc14      	bgt.n	800c240 <__b2d+0x50>
 800c216:	f1c0 0e0b 	rsb	lr, r0, #11
 800c21a:	fa24 f10e 	lsr.w	r1, r4, lr
 800c21e:	42b7      	cmp	r7, r6
 800c220:	ea41 030c 	orr.w	r3, r1, ip
 800c224:	bf34      	ite	cc
 800c226:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c22a:	2100      	movcs	r1, #0
 800c22c:	3015      	adds	r0, #21
 800c22e:	fa04 f000 	lsl.w	r0, r4, r0
 800c232:	fa21 f10e 	lsr.w	r1, r1, lr
 800c236:	ea40 0201 	orr.w	r2, r0, r1
 800c23a:	ec43 2b10 	vmov	d0, r2, r3
 800c23e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c240:	42b7      	cmp	r7, r6
 800c242:	bf3a      	itte	cc
 800c244:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c248:	f1a5 0608 	subcc.w	r6, r5, #8
 800c24c:	2100      	movcs	r1, #0
 800c24e:	380b      	subs	r0, #11
 800c250:	d017      	beq.n	800c282 <__b2d+0x92>
 800c252:	f1c0 0c20 	rsb	ip, r0, #32
 800c256:	fa04 f500 	lsl.w	r5, r4, r0
 800c25a:	42be      	cmp	r6, r7
 800c25c:	fa21 f40c 	lsr.w	r4, r1, ip
 800c260:	ea45 0504 	orr.w	r5, r5, r4
 800c264:	bf8c      	ite	hi
 800c266:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c26a:	2400      	movls	r4, #0
 800c26c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c270:	fa01 f000 	lsl.w	r0, r1, r0
 800c274:	fa24 f40c 	lsr.w	r4, r4, ip
 800c278:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c27c:	ea40 0204 	orr.w	r2, r0, r4
 800c280:	e7db      	b.n	800c23a <__b2d+0x4a>
 800c282:	ea44 030c 	orr.w	r3, r4, ip
 800c286:	460a      	mov	r2, r1
 800c288:	e7d7      	b.n	800c23a <__b2d+0x4a>
 800c28a:	bf00      	nop
 800c28c:	3ff00000 	.word	0x3ff00000

0800c290 <__d2b>:
 800c290:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c294:	4689      	mov	r9, r1
 800c296:	2101      	movs	r1, #1
 800c298:	ec57 6b10 	vmov	r6, r7, d0
 800c29c:	4690      	mov	r8, r2
 800c29e:	f7ff fc0f 	bl	800bac0 <_Balloc>
 800c2a2:	4604      	mov	r4, r0
 800c2a4:	b930      	cbnz	r0, 800c2b4 <__d2b+0x24>
 800c2a6:	4602      	mov	r2, r0
 800c2a8:	4b25      	ldr	r3, [pc, #148]	; (800c340 <__d2b+0xb0>)
 800c2aa:	4826      	ldr	r0, [pc, #152]	; (800c344 <__d2b+0xb4>)
 800c2ac:	f240 310a 	movw	r1, #778	; 0x30a
 800c2b0:	f000 fb0e 	bl	800c8d0 <__assert_func>
 800c2b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c2b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c2bc:	bb35      	cbnz	r5, 800c30c <__d2b+0x7c>
 800c2be:	2e00      	cmp	r6, #0
 800c2c0:	9301      	str	r3, [sp, #4]
 800c2c2:	d028      	beq.n	800c316 <__d2b+0x86>
 800c2c4:	4668      	mov	r0, sp
 800c2c6:	9600      	str	r6, [sp, #0]
 800c2c8:	f7ff fd10 	bl	800bcec <__lo0bits>
 800c2cc:	9900      	ldr	r1, [sp, #0]
 800c2ce:	b300      	cbz	r0, 800c312 <__d2b+0x82>
 800c2d0:	9a01      	ldr	r2, [sp, #4]
 800c2d2:	f1c0 0320 	rsb	r3, r0, #32
 800c2d6:	fa02 f303 	lsl.w	r3, r2, r3
 800c2da:	430b      	orrs	r3, r1
 800c2dc:	40c2      	lsrs	r2, r0
 800c2de:	6163      	str	r3, [r4, #20]
 800c2e0:	9201      	str	r2, [sp, #4]
 800c2e2:	9b01      	ldr	r3, [sp, #4]
 800c2e4:	61a3      	str	r3, [r4, #24]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	bf14      	ite	ne
 800c2ea:	2202      	movne	r2, #2
 800c2ec:	2201      	moveq	r2, #1
 800c2ee:	6122      	str	r2, [r4, #16]
 800c2f0:	b1d5      	cbz	r5, 800c328 <__d2b+0x98>
 800c2f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c2f6:	4405      	add	r5, r0
 800c2f8:	f8c9 5000 	str.w	r5, [r9]
 800c2fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c300:	f8c8 0000 	str.w	r0, [r8]
 800c304:	4620      	mov	r0, r4
 800c306:	b003      	add	sp, #12
 800c308:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c30c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c310:	e7d5      	b.n	800c2be <__d2b+0x2e>
 800c312:	6161      	str	r1, [r4, #20]
 800c314:	e7e5      	b.n	800c2e2 <__d2b+0x52>
 800c316:	a801      	add	r0, sp, #4
 800c318:	f7ff fce8 	bl	800bcec <__lo0bits>
 800c31c:	9b01      	ldr	r3, [sp, #4]
 800c31e:	6163      	str	r3, [r4, #20]
 800c320:	2201      	movs	r2, #1
 800c322:	6122      	str	r2, [r4, #16]
 800c324:	3020      	adds	r0, #32
 800c326:	e7e3      	b.n	800c2f0 <__d2b+0x60>
 800c328:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c32c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c330:	f8c9 0000 	str.w	r0, [r9]
 800c334:	6918      	ldr	r0, [r3, #16]
 800c336:	f7ff fcb9 	bl	800bcac <__hi0bits>
 800c33a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c33e:	e7df      	b.n	800c300 <__d2b+0x70>
 800c340:	0800ff44 	.word	0x0800ff44
 800c344:	0800ffd4 	.word	0x0800ffd4

0800c348 <__ratio>:
 800c348:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c34c:	4688      	mov	r8, r1
 800c34e:	4669      	mov	r1, sp
 800c350:	4681      	mov	r9, r0
 800c352:	f7ff ff4d 	bl	800c1f0 <__b2d>
 800c356:	a901      	add	r1, sp, #4
 800c358:	4640      	mov	r0, r8
 800c35a:	ec55 4b10 	vmov	r4, r5, d0
 800c35e:	f7ff ff47 	bl	800c1f0 <__b2d>
 800c362:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c366:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c36a:	eba3 0c02 	sub.w	ip, r3, r2
 800c36e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c372:	1a9b      	subs	r3, r3, r2
 800c374:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c378:	ec51 0b10 	vmov	r0, r1, d0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	bfd6      	itet	le
 800c380:	460a      	movle	r2, r1
 800c382:	462a      	movgt	r2, r5
 800c384:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c388:	468b      	mov	fp, r1
 800c38a:	462f      	mov	r7, r5
 800c38c:	bfd4      	ite	le
 800c38e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c392:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c396:	4620      	mov	r0, r4
 800c398:	ee10 2a10 	vmov	r2, s0
 800c39c:	465b      	mov	r3, fp
 800c39e:	4639      	mov	r1, r7
 800c3a0:	f7f4 fa7c 	bl	800089c <__aeabi_ddiv>
 800c3a4:	ec41 0b10 	vmov	d0, r0, r1
 800c3a8:	b003      	add	sp, #12
 800c3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c3ae <__copybits>:
 800c3ae:	3901      	subs	r1, #1
 800c3b0:	b570      	push	{r4, r5, r6, lr}
 800c3b2:	1149      	asrs	r1, r1, #5
 800c3b4:	6914      	ldr	r4, [r2, #16]
 800c3b6:	3101      	adds	r1, #1
 800c3b8:	f102 0314 	add.w	r3, r2, #20
 800c3bc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c3c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c3c4:	1f05      	subs	r5, r0, #4
 800c3c6:	42a3      	cmp	r3, r4
 800c3c8:	d30c      	bcc.n	800c3e4 <__copybits+0x36>
 800c3ca:	1aa3      	subs	r3, r4, r2
 800c3cc:	3b11      	subs	r3, #17
 800c3ce:	f023 0303 	bic.w	r3, r3, #3
 800c3d2:	3211      	adds	r2, #17
 800c3d4:	42a2      	cmp	r2, r4
 800c3d6:	bf88      	it	hi
 800c3d8:	2300      	movhi	r3, #0
 800c3da:	4418      	add	r0, r3
 800c3dc:	2300      	movs	r3, #0
 800c3de:	4288      	cmp	r0, r1
 800c3e0:	d305      	bcc.n	800c3ee <__copybits+0x40>
 800c3e2:	bd70      	pop	{r4, r5, r6, pc}
 800c3e4:	f853 6b04 	ldr.w	r6, [r3], #4
 800c3e8:	f845 6f04 	str.w	r6, [r5, #4]!
 800c3ec:	e7eb      	b.n	800c3c6 <__copybits+0x18>
 800c3ee:	f840 3b04 	str.w	r3, [r0], #4
 800c3f2:	e7f4      	b.n	800c3de <__copybits+0x30>

0800c3f4 <__any_on>:
 800c3f4:	f100 0214 	add.w	r2, r0, #20
 800c3f8:	6900      	ldr	r0, [r0, #16]
 800c3fa:	114b      	asrs	r3, r1, #5
 800c3fc:	4298      	cmp	r0, r3
 800c3fe:	b510      	push	{r4, lr}
 800c400:	db11      	blt.n	800c426 <__any_on+0x32>
 800c402:	dd0a      	ble.n	800c41a <__any_on+0x26>
 800c404:	f011 011f 	ands.w	r1, r1, #31
 800c408:	d007      	beq.n	800c41a <__any_on+0x26>
 800c40a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c40e:	fa24 f001 	lsr.w	r0, r4, r1
 800c412:	fa00 f101 	lsl.w	r1, r0, r1
 800c416:	428c      	cmp	r4, r1
 800c418:	d10b      	bne.n	800c432 <__any_on+0x3e>
 800c41a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c41e:	4293      	cmp	r3, r2
 800c420:	d803      	bhi.n	800c42a <__any_on+0x36>
 800c422:	2000      	movs	r0, #0
 800c424:	bd10      	pop	{r4, pc}
 800c426:	4603      	mov	r3, r0
 800c428:	e7f7      	b.n	800c41a <__any_on+0x26>
 800c42a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c42e:	2900      	cmp	r1, #0
 800c430:	d0f5      	beq.n	800c41e <__any_on+0x2a>
 800c432:	2001      	movs	r0, #1
 800c434:	e7f6      	b.n	800c424 <__any_on+0x30>

0800c436 <_calloc_r>:
 800c436:	b513      	push	{r0, r1, r4, lr}
 800c438:	434a      	muls	r2, r1
 800c43a:	4611      	mov	r1, r2
 800c43c:	9201      	str	r2, [sp, #4]
 800c43e:	f000 f859 	bl	800c4f4 <_malloc_r>
 800c442:	4604      	mov	r4, r0
 800c444:	b118      	cbz	r0, 800c44e <_calloc_r+0x18>
 800c446:	9a01      	ldr	r2, [sp, #4]
 800c448:	2100      	movs	r1, #0
 800c44a:	f7fc fbb3 	bl	8008bb4 <memset>
 800c44e:	4620      	mov	r0, r4
 800c450:	b002      	add	sp, #8
 800c452:	bd10      	pop	{r4, pc}

0800c454 <_free_r>:
 800c454:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c456:	2900      	cmp	r1, #0
 800c458:	d048      	beq.n	800c4ec <_free_r+0x98>
 800c45a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c45e:	9001      	str	r0, [sp, #4]
 800c460:	2b00      	cmp	r3, #0
 800c462:	f1a1 0404 	sub.w	r4, r1, #4
 800c466:	bfb8      	it	lt
 800c468:	18e4      	addlt	r4, r4, r3
 800c46a:	f000 fa7b 	bl	800c964 <__malloc_lock>
 800c46e:	4a20      	ldr	r2, [pc, #128]	; (800c4f0 <_free_r+0x9c>)
 800c470:	9801      	ldr	r0, [sp, #4]
 800c472:	6813      	ldr	r3, [r2, #0]
 800c474:	4615      	mov	r5, r2
 800c476:	b933      	cbnz	r3, 800c486 <_free_r+0x32>
 800c478:	6063      	str	r3, [r4, #4]
 800c47a:	6014      	str	r4, [r2, #0]
 800c47c:	b003      	add	sp, #12
 800c47e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c482:	f000 ba75 	b.w	800c970 <__malloc_unlock>
 800c486:	42a3      	cmp	r3, r4
 800c488:	d90b      	bls.n	800c4a2 <_free_r+0x4e>
 800c48a:	6821      	ldr	r1, [r4, #0]
 800c48c:	1862      	adds	r2, r4, r1
 800c48e:	4293      	cmp	r3, r2
 800c490:	bf04      	itt	eq
 800c492:	681a      	ldreq	r2, [r3, #0]
 800c494:	685b      	ldreq	r3, [r3, #4]
 800c496:	6063      	str	r3, [r4, #4]
 800c498:	bf04      	itt	eq
 800c49a:	1852      	addeq	r2, r2, r1
 800c49c:	6022      	streq	r2, [r4, #0]
 800c49e:	602c      	str	r4, [r5, #0]
 800c4a0:	e7ec      	b.n	800c47c <_free_r+0x28>
 800c4a2:	461a      	mov	r2, r3
 800c4a4:	685b      	ldr	r3, [r3, #4]
 800c4a6:	b10b      	cbz	r3, 800c4ac <_free_r+0x58>
 800c4a8:	42a3      	cmp	r3, r4
 800c4aa:	d9fa      	bls.n	800c4a2 <_free_r+0x4e>
 800c4ac:	6811      	ldr	r1, [r2, #0]
 800c4ae:	1855      	adds	r5, r2, r1
 800c4b0:	42a5      	cmp	r5, r4
 800c4b2:	d10b      	bne.n	800c4cc <_free_r+0x78>
 800c4b4:	6824      	ldr	r4, [r4, #0]
 800c4b6:	4421      	add	r1, r4
 800c4b8:	1854      	adds	r4, r2, r1
 800c4ba:	42a3      	cmp	r3, r4
 800c4bc:	6011      	str	r1, [r2, #0]
 800c4be:	d1dd      	bne.n	800c47c <_free_r+0x28>
 800c4c0:	681c      	ldr	r4, [r3, #0]
 800c4c2:	685b      	ldr	r3, [r3, #4]
 800c4c4:	6053      	str	r3, [r2, #4]
 800c4c6:	4421      	add	r1, r4
 800c4c8:	6011      	str	r1, [r2, #0]
 800c4ca:	e7d7      	b.n	800c47c <_free_r+0x28>
 800c4cc:	d902      	bls.n	800c4d4 <_free_r+0x80>
 800c4ce:	230c      	movs	r3, #12
 800c4d0:	6003      	str	r3, [r0, #0]
 800c4d2:	e7d3      	b.n	800c47c <_free_r+0x28>
 800c4d4:	6825      	ldr	r5, [r4, #0]
 800c4d6:	1961      	adds	r1, r4, r5
 800c4d8:	428b      	cmp	r3, r1
 800c4da:	bf04      	itt	eq
 800c4dc:	6819      	ldreq	r1, [r3, #0]
 800c4de:	685b      	ldreq	r3, [r3, #4]
 800c4e0:	6063      	str	r3, [r4, #4]
 800c4e2:	bf04      	itt	eq
 800c4e4:	1949      	addeq	r1, r1, r5
 800c4e6:	6021      	streq	r1, [r4, #0]
 800c4e8:	6054      	str	r4, [r2, #4]
 800c4ea:	e7c7      	b.n	800c47c <_free_r+0x28>
 800c4ec:	b003      	add	sp, #12
 800c4ee:	bd30      	pop	{r4, r5, pc}
 800c4f0:	20000370 	.word	0x20000370

0800c4f4 <_malloc_r>:
 800c4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4f6:	1ccd      	adds	r5, r1, #3
 800c4f8:	f025 0503 	bic.w	r5, r5, #3
 800c4fc:	3508      	adds	r5, #8
 800c4fe:	2d0c      	cmp	r5, #12
 800c500:	bf38      	it	cc
 800c502:	250c      	movcc	r5, #12
 800c504:	2d00      	cmp	r5, #0
 800c506:	4606      	mov	r6, r0
 800c508:	db01      	blt.n	800c50e <_malloc_r+0x1a>
 800c50a:	42a9      	cmp	r1, r5
 800c50c:	d903      	bls.n	800c516 <_malloc_r+0x22>
 800c50e:	230c      	movs	r3, #12
 800c510:	6033      	str	r3, [r6, #0]
 800c512:	2000      	movs	r0, #0
 800c514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c516:	f000 fa25 	bl	800c964 <__malloc_lock>
 800c51a:	4921      	ldr	r1, [pc, #132]	; (800c5a0 <_malloc_r+0xac>)
 800c51c:	680a      	ldr	r2, [r1, #0]
 800c51e:	4614      	mov	r4, r2
 800c520:	b99c      	cbnz	r4, 800c54a <_malloc_r+0x56>
 800c522:	4f20      	ldr	r7, [pc, #128]	; (800c5a4 <_malloc_r+0xb0>)
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	b923      	cbnz	r3, 800c532 <_malloc_r+0x3e>
 800c528:	4621      	mov	r1, r4
 800c52a:	4630      	mov	r0, r6
 800c52c:	f000 f9a0 	bl	800c870 <_sbrk_r>
 800c530:	6038      	str	r0, [r7, #0]
 800c532:	4629      	mov	r1, r5
 800c534:	4630      	mov	r0, r6
 800c536:	f000 f99b 	bl	800c870 <_sbrk_r>
 800c53a:	1c43      	adds	r3, r0, #1
 800c53c:	d123      	bne.n	800c586 <_malloc_r+0x92>
 800c53e:	230c      	movs	r3, #12
 800c540:	6033      	str	r3, [r6, #0]
 800c542:	4630      	mov	r0, r6
 800c544:	f000 fa14 	bl	800c970 <__malloc_unlock>
 800c548:	e7e3      	b.n	800c512 <_malloc_r+0x1e>
 800c54a:	6823      	ldr	r3, [r4, #0]
 800c54c:	1b5b      	subs	r3, r3, r5
 800c54e:	d417      	bmi.n	800c580 <_malloc_r+0x8c>
 800c550:	2b0b      	cmp	r3, #11
 800c552:	d903      	bls.n	800c55c <_malloc_r+0x68>
 800c554:	6023      	str	r3, [r4, #0]
 800c556:	441c      	add	r4, r3
 800c558:	6025      	str	r5, [r4, #0]
 800c55a:	e004      	b.n	800c566 <_malloc_r+0x72>
 800c55c:	6863      	ldr	r3, [r4, #4]
 800c55e:	42a2      	cmp	r2, r4
 800c560:	bf0c      	ite	eq
 800c562:	600b      	streq	r3, [r1, #0]
 800c564:	6053      	strne	r3, [r2, #4]
 800c566:	4630      	mov	r0, r6
 800c568:	f000 fa02 	bl	800c970 <__malloc_unlock>
 800c56c:	f104 000b 	add.w	r0, r4, #11
 800c570:	1d23      	adds	r3, r4, #4
 800c572:	f020 0007 	bic.w	r0, r0, #7
 800c576:	1ac2      	subs	r2, r0, r3
 800c578:	d0cc      	beq.n	800c514 <_malloc_r+0x20>
 800c57a:	1a1b      	subs	r3, r3, r0
 800c57c:	50a3      	str	r3, [r4, r2]
 800c57e:	e7c9      	b.n	800c514 <_malloc_r+0x20>
 800c580:	4622      	mov	r2, r4
 800c582:	6864      	ldr	r4, [r4, #4]
 800c584:	e7cc      	b.n	800c520 <_malloc_r+0x2c>
 800c586:	1cc4      	adds	r4, r0, #3
 800c588:	f024 0403 	bic.w	r4, r4, #3
 800c58c:	42a0      	cmp	r0, r4
 800c58e:	d0e3      	beq.n	800c558 <_malloc_r+0x64>
 800c590:	1a21      	subs	r1, r4, r0
 800c592:	4630      	mov	r0, r6
 800c594:	f000 f96c 	bl	800c870 <_sbrk_r>
 800c598:	3001      	adds	r0, #1
 800c59a:	d1dd      	bne.n	800c558 <_malloc_r+0x64>
 800c59c:	e7cf      	b.n	800c53e <_malloc_r+0x4a>
 800c59e:	bf00      	nop
 800c5a0:	20000370 	.word	0x20000370
 800c5a4:	20000374 	.word	0x20000374

0800c5a8 <__ssputs_r>:
 800c5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5ac:	688e      	ldr	r6, [r1, #8]
 800c5ae:	429e      	cmp	r6, r3
 800c5b0:	4682      	mov	sl, r0
 800c5b2:	460c      	mov	r4, r1
 800c5b4:	4690      	mov	r8, r2
 800c5b6:	461f      	mov	r7, r3
 800c5b8:	d838      	bhi.n	800c62c <__ssputs_r+0x84>
 800c5ba:	898a      	ldrh	r2, [r1, #12]
 800c5bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c5c0:	d032      	beq.n	800c628 <__ssputs_r+0x80>
 800c5c2:	6825      	ldr	r5, [r4, #0]
 800c5c4:	6909      	ldr	r1, [r1, #16]
 800c5c6:	eba5 0901 	sub.w	r9, r5, r1
 800c5ca:	6965      	ldr	r5, [r4, #20]
 800c5cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c5d4:	3301      	adds	r3, #1
 800c5d6:	444b      	add	r3, r9
 800c5d8:	106d      	asrs	r5, r5, #1
 800c5da:	429d      	cmp	r5, r3
 800c5dc:	bf38      	it	cc
 800c5de:	461d      	movcc	r5, r3
 800c5e0:	0553      	lsls	r3, r2, #21
 800c5e2:	d531      	bpl.n	800c648 <__ssputs_r+0xa0>
 800c5e4:	4629      	mov	r1, r5
 800c5e6:	f7ff ff85 	bl	800c4f4 <_malloc_r>
 800c5ea:	4606      	mov	r6, r0
 800c5ec:	b950      	cbnz	r0, 800c604 <__ssputs_r+0x5c>
 800c5ee:	230c      	movs	r3, #12
 800c5f0:	f8ca 3000 	str.w	r3, [sl]
 800c5f4:	89a3      	ldrh	r3, [r4, #12]
 800c5f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5fa:	81a3      	strh	r3, [r4, #12]
 800c5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c604:	6921      	ldr	r1, [r4, #16]
 800c606:	464a      	mov	r2, r9
 800c608:	f7ff fa4c 	bl	800baa4 <memcpy>
 800c60c:	89a3      	ldrh	r3, [r4, #12]
 800c60e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c616:	81a3      	strh	r3, [r4, #12]
 800c618:	6126      	str	r6, [r4, #16]
 800c61a:	6165      	str	r5, [r4, #20]
 800c61c:	444e      	add	r6, r9
 800c61e:	eba5 0509 	sub.w	r5, r5, r9
 800c622:	6026      	str	r6, [r4, #0]
 800c624:	60a5      	str	r5, [r4, #8]
 800c626:	463e      	mov	r6, r7
 800c628:	42be      	cmp	r6, r7
 800c62a:	d900      	bls.n	800c62e <__ssputs_r+0x86>
 800c62c:	463e      	mov	r6, r7
 800c62e:	4632      	mov	r2, r6
 800c630:	6820      	ldr	r0, [r4, #0]
 800c632:	4641      	mov	r1, r8
 800c634:	f000 f97c 	bl	800c930 <memmove>
 800c638:	68a3      	ldr	r3, [r4, #8]
 800c63a:	6822      	ldr	r2, [r4, #0]
 800c63c:	1b9b      	subs	r3, r3, r6
 800c63e:	4432      	add	r2, r6
 800c640:	60a3      	str	r3, [r4, #8]
 800c642:	6022      	str	r2, [r4, #0]
 800c644:	2000      	movs	r0, #0
 800c646:	e7db      	b.n	800c600 <__ssputs_r+0x58>
 800c648:	462a      	mov	r2, r5
 800c64a:	f000 f997 	bl	800c97c <_realloc_r>
 800c64e:	4606      	mov	r6, r0
 800c650:	2800      	cmp	r0, #0
 800c652:	d1e1      	bne.n	800c618 <__ssputs_r+0x70>
 800c654:	6921      	ldr	r1, [r4, #16]
 800c656:	4650      	mov	r0, sl
 800c658:	f7ff fefc 	bl	800c454 <_free_r>
 800c65c:	e7c7      	b.n	800c5ee <__ssputs_r+0x46>
	...

0800c660 <_svfiprintf_r>:
 800c660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c664:	4698      	mov	r8, r3
 800c666:	898b      	ldrh	r3, [r1, #12]
 800c668:	061b      	lsls	r3, r3, #24
 800c66a:	b09d      	sub	sp, #116	; 0x74
 800c66c:	4607      	mov	r7, r0
 800c66e:	460d      	mov	r5, r1
 800c670:	4614      	mov	r4, r2
 800c672:	d50e      	bpl.n	800c692 <_svfiprintf_r+0x32>
 800c674:	690b      	ldr	r3, [r1, #16]
 800c676:	b963      	cbnz	r3, 800c692 <_svfiprintf_r+0x32>
 800c678:	2140      	movs	r1, #64	; 0x40
 800c67a:	f7ff ff3b 	bl	800c4f4 <_malloc_r>
 800c67e:	6028      	str	r0, [r5, #0]
 800c680:	6128      	str	r0, [r5, #16]
 800c682:	b920      	cbnz	r0, 800c68e <_svfiprintf_r+0x2e>
 800c684:	230c      	movs	r3, #12
 800c686:	603b      	str	r3, [r7, #0]
 800c688:	f04f 30ff 	mov.w	r0, #4294967295
 800c68c:	e0d1      	b.n	800c832 <_svfiprintf_r+0x1d2>
 800c68e:	2340      	movs	r3, #64	; 0x40
 800c690:	616b      	str	r3, [r5, #20]
 800c692:	2300      	movs	r3, #0
 800c694:	9309      	str	r3, [sp, #36]	; 0x24
 800c696:	2320      	movs	r3, #32
 800c698:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c69c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6a0:	2330      	movs	r3, #48	; 0x30
 800c6a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c84c <_svfiprintf_r+0x1ec>
 800c6a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6aa:	f04f 0901 	mov.w	r9, #1
 800c6ae:	4623      	mov	r3, r4
 800c6b0:	469a      	mov	sl, r3
 800c6b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6b6:	b10a      	cbz	r2, 800c6bc <_svfiprintf_r+0x5c>
 800c6b8:	2a25      	cmp	r2, #37	; 0x25
 800c6ba:	d1f9      	bne.n	800c6b0 <_svfiprintf_r+0x50>
 800c6bc:	ebba 0b04 	subs.w	fp, sl, r4
 800c6c0:	d00b      	beq.n	800c6da <_svfiprintf_r+0x7a>
 800c6c2:	465b      	mov	r3, fp
 800c6c4:	4622      	mov	r2, r4
 800c6c6:	4629      	mov	r1, r5
 800c6c8:	4638      	mov	r0, r7
 800c6ca:	f7ff ff6d 	bl	800c5a8 <__ssputs_r>
 800c6ce:	3001      	adds	r0, #1
 800c6d0:	f000 80aa 	beq.w	800c828 <_svfiprintf_r+0x1c8>
 800c6d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6d6:	445a      	add	r2, fp
 800c6d8:	9209      	str	r2, [sp, #36]	; 0x24
 800c6da:	f89a 3000 	ldrb.w	r3, [sl]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	f000 80a2 	beq.w	800c828 <_svfiprintf_r+0x1c8>
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	f04f 32ff 	mov.w	r2, #4294967295
 800c6ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6ee:	f10a 0a01 	add.w	sl, sl, #1
 800c6f2:	9304      	str	r3, [sp, #16]
 800c6f4:	9307      	str	r3, [sp, #28]
 800c6f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6fa:	931a      	str	r3, [sp, #104]	; 0x68
 800c6fc:	4654      	mov	r4, sl
 800c6fe:	2205      	movs	r2, #5
 800c700:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c704:	4851      	ldr	r0, [pc, #324]	; (800c84c <_svfiprintf_r+0x1ec>)
 800c706:	f7f3 fd93 	bl	8000230 <memchr>
 800c70a:	9a04      	ldr	r2, [sp, #16]
 800c70c:	b9d8      	cbnz	r0, 800c746 <_svfiprintf_r+0xe6>
 800c70e:	06d0      	lsls	r0, r2, #27
 800c710:	bf44      	itt	mi
 800c712:	2320      	movmi	r3, #32
 800c714:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c718:	0711      	lsls	r1, r2, #28
 800c71a:	bf44      	itt	mi
 800c71c:	232b      	movmi	r3, #43	; 0x2b
 800c71e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c722:	f89a 3000 	ldrb.w	r3, [sl]
 800c726:	2b2a      	cmp	r3, #42	; 0x2a
 800c728:	d015      	beq.n	800c756 <_svfiprintf_r+0xf6>
 800c72a:	9a07      	ldr	r2, [sp, #28]
 800c72c:	4654      	mov	r4, sl
 800c72e:	2000      	movs	r0, #0
 800c730:	f04f 0c0a 	mov.w	ip, #10
 800c734:	4621      	mov	r1, r4
 800c736:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c73a:	3b30      	subs	r3, #48	; 0x30
 800c73c:	2b09      	cmp	r3, #9
 800c73e:	d94e      	bls.n	800c7de <_svfiprintf_r+0x17e>
 800c740:	b1b0      	cbz	r0, 800c770 <_svfiprintf_r+0x110>
 800c742:	9207      	str	r2, [sp, #28]
 800c744:	e014      	b.n	800c770 <_svfiprintf_r+0x110>
 800c746:	eba0 0308 	sub.w	r3, r0, r8
 800c74a:	fa09 f303 	lsl.w	r3, r9, r3
 800c74e:	4313      	orrs	r3, r2
 800c750:	9304      	str	r3, [sp, #16]
 800c752:	46a2      	mov	sl, r4
 800c754:	e7d2      	b.n	800c6fc <_svfiprintf_r+0x9c>
 800c756:	9b03      	ldr	r3, [sp, #12]
 800c758:	1d19      	adds	r1, r3, #4
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	9103      	str	r1, [sp, #12]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	bfbb      	ittet	lt
 800c762:	425b      	neglt	r3, r3
 800c764:	f042 0202 	orrlt.w	r2, r2, #2
 800c768:	9307      	strge	r3, [sp, #28]
 800c76a:	9307      	strlt	r3, [sp, #28]
 800c76c:	bfb8      	it	lt
 800c76e:	9204      	strlt	r2, [sp, #16]
 800c770:	7823      	ldrb	r3, [r4, #0]
 800c772:	2b2e      	cmp	r3, #46	; 0x2e
 800c774:	d10c      	bne.n	800c790 <_svfiprintf_r+0x130>
 800c776:	7863      	ldrb	r3, [r4, #1]
 800c778:	2b2a      	cmp	r3, #42	; 0x2a
 800c77a:	d135      	bne.n	800c7e8 <_svfiprintf_r+0x188>
 800c77c:	9b03      	ldr	r3, [sp, #12]
 800c77e:	1d1a      	adds	r2, r3, #4
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	9203      	str	r2, [sp, #12]
 800c784:	2b00      	cmp	r3, #0
 800c786:	bfb8      	it	lt
 800c788:	f04f 33ff 	movlt.w	r3, #4294967295
 800c78c:	3402      	adds	r4, #2
 800c78e:	9305      	str	r3, [sp, #20]
 800c790:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c85c <_svfiprintf_r+0x1fc>
 800c794:	7821      	ldrb	r1, [r4, #0]
 800c796:	2203      	movs	r2, #3
 800c798:	4650      	mov	r0, sl
 800c79a:	f7f3 fd49 	bl	8000230 <memchr>
 800c79e:	b140      	cbz	r0, 800c7b2 <_svfiprintf_r+0x152>
 800c7a0:	2340      	movs	r3, #64	; 0x40
 800c7a2:	eba0 000a 	sub.w	r0, r0, sl
 800c7a6:	fa03 f000 	lsl.w	r0, r3, r0
 800c7aa:	9b04      	ldr	r3, [sp, #16]
 800c7ac:	4303      	orrs	r3, r0
 800c7ae:	3401      	adds	r4, #1
 800c7b0:	9304      	str	r3, [sp, #16]
 800c7b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7b6:	4826      	ldr	r0, [pc, #152]	; (800c850 <_svfiprintf_r+0x1f0>)
 800c7b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7bc:	2206      	movs	r2, #6
 800c7be:	f7f3 fd37 	bl	8000230 <memchr>
 800c7c2:	2800      	cmp	r0, #0
 800c7c4:	d038      	beq.n	800c838 <_svfiprintf_r+0x1d8>
 800c7c6:	4b23      	ldr	r3, [pc, #140]	; (800c854 <_svfiprintf_r+0x1f4>)
 800c7c8:	bb1b      	cbnz	r3, 800c812 <_svfiprintf_r+0x1b2>
 800c7ca:	9b03      	ldr	r3, [sp, #12]
 800c7cc:	3307      	adds	r3, #7
 800c7ce:	f023 0307 	bic.w	r3, r3, #7
 800c7d2:	3308      	adds	r3, #8
 800c7d4:	9303      	str	r3, [sp, #12]
 800c7d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7d8:	4433      	add	r3, r6
 800c7da:	9309      	str	r3, [sp, #36]	; 0x24
 800c7dc:	e767      	b.n	800c6ae <_svfiprintf_r+0x4e>
 800c7de:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7e2:	460c      	mov	r4, r1
 800c7e4:	2001      	movs	r0, #1
 800c7e6:	e7a5      	b.n	800c734 <_svfiprintf_r+0xd4>
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	3401      	adds	r4, #1
 800c7ec:	9305      	str	r3, [sp, #20]
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	f04f 0c0a 	mov.w	ip, #10
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7fa:	3a30      	subs	r2, #48	; 0x30
 800c7fc:	2a09      	cmp	r2, #9
 800c7fe:	d903      	bls.n	800c808 <_svfiprintf_r+0x1a8>
 800c800:	2b00      	cmp	r3, #0
 800c802:	d0c5      	beq.n	800c790 <_svfiprintf_r+0x130>
 800c804:	9105      	str	r1, [sp, #20]
 800c806:	e7c3      	b.n	800c790 <_svfiprintf_r+0x130>
 800c808:	fb0c 2101 	mla	r1, ip, r1, r2
 800c80c:	4604      	mov	r4, r0
 800c80e:	2301      	movs	r3, #1
 800c810:	e7f0      	b.n	800c7f4 <_svfiprintf_r+0x194>
 800c812:	ab03      	add	r3, sp, #12
 800c814:	9300      	str	r3, [sp, #0]
 800c816:	462a      	mov	r2, r5
 800c818:	4b0f      	ldr	r3, [pc, #60]	; (800c858 <_svfiprintf_r+0x1f8>)
 800c81a:	a904      	add	r1, sp, #16
 800c81c:	4638      	mov	r0, r7
 800c81e:	f7fc fa71 	bl	8008d04 <_printf_float>
 800c822:	1c42      	adds	r2, r0, #1
 800c824:	4606      	mov	r6, r0
 800c826:	d1d6      	bne.n	800c7d6 <_svfiprintf_r+0x176>
 800c828:	89ab      	ldrh	r3, [r5, #12]
 800c82a:	065b      	lsls	r3, r3, #25
 800c82c:	f53f af2c 	bmi.w	800c688 <_svfiprintf_r+0x28>
 800c830:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c832:	b01d      	add	sp, #116	; 0x74
 800c834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c838:	ab03      	add	r3, sp, #12
 800c83a:	9300      	str	r3, [sp, #0]
 800c83c:	462a      	mov	r2, r5
 800c83e:	4b06      	ldr	r3, [pc, #24]	; (800c858 <_svfiprintf_r+0x1f8>)
 800c840:	a904      	add	r1, sp, #16
 800c842:	4638      	mov	r0, r7
 800c844:	f7fc fd02 	bl	800924c <_printf_i>
 800c848:	e7eb      	b.n	800c822 <_svfiprintf_r+0x1c2>
 800c84a:	bf00      	nop
 800c84c:	08010134 	.word	0x08010134
 800c850:	0801013e 	.word	0x0801013e
 800c854:	08008d05 	.word	0x08008d05
 800c858:	0800c5a9 	.word	0x0800c5a9
 800c85c:	0801013a 	.word	0x0801013a

0800c860 <nan>:
 800c860:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c868 <nan+0x8>
 800c864:	4770      	bx	lr
 800c866:	bf00      	nop
 800c868:	00000000 	.word	0x00000000
 800c86c:	7ff80000 	.word	0x7ff80000

0800c870 <_sbrk_r>:
 800c870:	b538      	push	{r3, r4, r5, lr}
 800c872:	4d06      	ldr	r5, [pc, #24]	; (800c88c <_sbrk_r+0x1c>)
 800c874:	2300      	movs	r3, #0
 800c876:	4604      	mov	r4, r0
 800c878:	4608      	mov	r0, r1
 800c87a:	602b      	str	r3, [r5, #0]
 800c87c:	f7f7 f92a 	bl	8003ad4 <_sbrk>
 800c880:	1c43      	adds	r3, r0, #1
 800c882:	d102      	bne.n	800c88a <_sbrk_r+0x1a>
 800c884:	682b      	ldr	r3, [r5, #0]
 800c886:	b103      	cbz	r3, 800c88a <_sbrk_r+0x1a>
 800c888:	6023      	str	r3, [r4, #0]
 800c88a:	bd38      	pop	{r3, r4, r5, pc}
 800c88c:	20000a08 	.word	0x20000a08

0800c890 <strncmp>:
 800c890:	b510      	push	{r4, lr}
 800c892:	b16a      	cbz	r2, 800c8b0 <strncmp+0x20>
 800c894:	3901      	subs	r1, #1
 800c896:	1884      	adds	r4, r0, r2
 800c898:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c89c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	d103      	bne.n	800c8ac <strncmp+0x1c>
 800c8a4:	42a0      	cmp	r0, r4
 800c8a6:	d001      	beq.n	800c8ac <strncmp+0x1c>
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d1f5      	bne.n	800c898 <strncmp+0x8>
 800c8ac:	1a98      	subs	r0, r3, r2
 800c8ae:	bd10      	pop	{r4, pc}
 800c8b0:	4610      	mov	r0, r2
 800c8b2:	e7fc      	b.n	800c8ae <strncmp+0x1e>

0800c8b4 <__ascii_wctomb>:
 800c8b4:	b149      	cbz	r1, 800c8ca <__ascii_wctomb+0x16>
 800c8b6:	2aff      	cmp	r2, #255	; 0xff
 800c8b8:	bf85      	ittet	hi
 800c8ba:	238a      	movhi	r3, #138	; 0x8a
 800c8bc:	6003      	strhi	r3, [r0, #0]
 800c8be:	700a      	strbls	r2, [r1, #0]
 800c8c0:	f04f 30ff 	movhi.w	r0, #4294967295
 800c8c4:	bf98      	it	ls
 800c8c6:	2001      	movls	r0, #1
 800c8c8:	4770      	bx	lr
 800c8ca:	4608      	mov	r0, r1
 800c8cc:	4770      	bx	lr
	...

0800c8d0 <__assert_func>:
 800c8d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c8d2:	4614      	mov	r4, r2
 800c8d4:	461a      	mov	r2, r3
 800c8d6:	4b09      	ldr	r3, [pc, #36]	; (800c8fc <__assert_func+0x2c>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	4605      	mov	r5, r0
 800c8dc:	68d8      	ldr	r0, [r3, #12]
 800c8de:	b14c      	cbz	r4, 800c8f4 <__assert_func+0x24>
 800c8e0:	4b07      	ldr	r3, [pc, #28]	; (800c900 <__assert_func+0x30>)
 800c8e2:	9100      	str	r1, [sp, #0]
 800c8e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c8e8:	4906      	ldr	r1, [pc, #24]	; (800c904 <__assert_func+0x34>)
 800c8ea:	462b      	mov	r3, r5
 800c8ec:	f000 f80e 	bl	800c90c <fiprintf>
 800c8f0:	f000 fa84 	bl	800cdfc <abort>
 800c8f4:	4b04      	ldr	r3, [pc, #16]	; (800c908 <__assert_func+0x38>)
 800c8f6:	461c      	mov	r4, r3
 800c8f8:	e7f3      	b.n	800c8e2 <__assert_func+0x12>
 800c8fa:	bf00      	nop
 800c8fc:	2000003c 	.word	0x2000003c
 800c900:	08010145 	.word	0x08010145
 800c904:	08010152 	.word	0x08010152
 800c908:	08010180 	.word	0x08010180

0800c90c <fiprintf>:
 800c90c:	b40e      	push	{r1, r2, r3}
 800c90e:	b503      	push	{r0, r1, lr}
 800c910:	4601      	mov	r1, r0
 800c912:	ab03      	add	r3, sp, #12
 800c914:	4805      	ldr	r0, [pc, #20]	; (800c92c <fiprintf+0x20>)
 800c916:	f853 2b04 	ldr.w	r2, [r3], #4
 800c91a:	6800      	ldr	r0, [r0, #0]
 800c91c:	9301      	str	r3, [sp, #4]
 800c91e:	f000 f87d 	bl	800ca1c <_vfiprintf_r>
 800c922:	b002      	add	sp, #8
 800c924:	f85d eb04 	ldr.w	lr, [sp], #4
 800c928:	b003      	add	sp, #12
 800c92a:	4770      	bx	lr
 800c92c:	2000003c 	.word	0x2000003c

0800c930 <memmove>:
 800c930:	4288      	cmp	r0, r1
 800c932:	b510      	push	{r4, lr}
 800c934:	eb01 0402 	add.w	r4, r1, r2
 800c938:	d902      	bls.n	800c940 <memmove+0x10>
 800c93a:	4284      	cmp	r4, r0
 800c93c:	4623      	mov	r3, r4
 800c93e:	d807      	bhi.n	800c950 <memmove+0x20>
 800c940:	1e43      	subs	r3, r0, #1
 800c942:	42a1      	cmp	r1, r4
 800c944:	d008      	beq.n	800c958 <memmove+0x28>
 800c946:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c94a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c94e:	e7f8      	b.n	800c942 <memmove+0x12>
 800c950:	4402      	add	r2, r0
 800c952:	4601      	mov	r1, r0
 800c954:	428a      	cmp	r2, r1
 800c956:	d100      	bne.n	800c95a <memmove+0x2a>
 800c958:	bd10      	pop	{r4, pc}
 800c95a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c95e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c962:	e7f7      	b.n	800c954 <memmove+0x24>

0800c964 <__malloc_lock>:
 800c964:	4801      	ldr	r0, [pc, #4]	; (800c96c <__malloc_lock+0x8>)
 800c966:	f000 bc09 	b.w	800d17c <__retarget_lock_acquire_recursive>
 800c96a:	bf00      	nop
 800c96c:	20000a10 	.word	0x20000a10

0800c970 <__malloc_unlock>:
 800c970:	4801      	ldr	r0, [pc, #4]	; (800c978 <__malloc_unlock+0x8>)
 800c972:	f000 bc04 	b.w	800d17e <__retarget_lock_release_recursive>
 800c976:	bf00      	nop
 800c978:	20000a10 	.word	0x20000a10

0800c97c <_realloc_r>:
 800c97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c97e:	4607      	mov	r7, r0
 800c980:	4614      	mov	r4, r2
 800c982:	460e      	mov	r6, r1
 800c984:	b921      	cbnz	r1, 800c990 <_realloc_r+0x14>
 800c986:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c98a:	4611      	mov	r1, r2
 800c98c:	f7ff bdb2 	b.w	800c4f4 <_malloc_r>
 800c990:	b922      	cbnz	r2, 800c99c <_realloc_r+0x20>
 800c992:	f7ff fd5f 	bl	800c454 <_free_r>
 800c996:	4625      	mov	r5, r4
 800c998:	4628      	mov	r0, r5
 800c99a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c99c:	f000 fc54 	bl	800d248 <_malloc_usable_size_r>
 800c9a0:	42a0      	cmp	r0, r4
 800c9a2:	d20f      	bcs.n	800c9c4 <_realloc_r+0x48>
 800c9a4:	4621      	mov	r1, r4
 800c9a6:	4638      	mov	r0, r7
 800c9a8:	f7ff fda4 	bl	800c4f4 <_malloc_r>
 800c9ac:	4605      	mov	r5, r0
 800c9ae:	2800      	cmp	r0, #0
 800c9b0:	d0f2      	beq.n	800c998 <_realloc_r+0x1c>
 800c9b2:	4631      	mov	r1, r6
 800c9b4:	4622      	mov	r2, r4
 800c9b6:	f7ff f875 	bl	800baa4 <memcpy>
 800c9ba:	4631      	mov	r1, r6
 800c9bc:	4638      	mov	r0, r7
 800c9be:	f7ff fd49 	bl	800c454 <_free_r>
 800c9c2:	e7e9      	b.n	800c998 <_realloc_r+0x1c>
 800c9c4:	4635      	mov	r5, r6
 800c9c6:	e7e7      	b.n	800c998 <_realloc_r+0x1c>

0800c9c8 <__sfputc_r>:
 800c9c8:	6893      	ldr	r3, [r2, #8]
 800c9ca:	3b01      	subs	r3, #1
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	b410      	push	{r4}
 800c9d0:	6093      	str	r3, [r2, #8]
 800c9d2:	da08      	bge.n	800c9e6 <__sfputc_r+0x1e>
 800c9d4:	6994      	ldr	r4, [r2, #24]
 800c9d6:	42a3      	cmp	r3, r4
 800c9d8:	db01      	blt.n	800c9de <__sfputc_r+0x16>
 800c9da:	290a      	cmp	r1, #10
 800c9dc:	d103      	bne.n	800c9e6 <__sfputc_r+0x1e>
 800c9de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9e2:	f000 b94b 	b.w	800cc7c <__swbuf_r>
 800c9e6:	6813      	ldr	r3, [r2, #0]
 800c9e8:	1c58      	adds	r0, r3, #1
 800c9ea:	6010      	str	r0, [r2, #0]
 800c9ec:	7019      	strb	r1, [r3, #0]
 800c9ee:	4608      	mov	r0, r1
 800c9f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9f4:	4770      	bx	lr

0800c9f6 <__sfputs_r>:
 800c9f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9f8:	4606      	mov	r6, r0
 800c9fa:	460f      	mov	r7, r1
 800c9fc:	4614      	mov	r4, r2
 800c9fe:	18d5      	adds	r5, r2, r3
 800ca00:	42ac      	cmp	r4, r5
 800ca02:	d101      	bne.n	800ca08 <__sfputs_r+0x12>
 800ca04:	2000      	movs	r0, #0
 800ca06:	e007      	b.n	800ca18 <__sfputs_r+0x22>
 800ca08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca0c:	463a      	mov	r2, r7
 800ca0e:	4630      	mov	r0, r6
 800ca10:	f7ff ffda 	bl	800c9c8 <__sfputc_r>
 800ca14:	1c43      	adds	r3, r0, #1
 800ca16:	d1f3      	bne.n	800ca00 <__sfputs_r+0xa>
 800ca18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ca1c <_vfiprintf_r>:
 800ca1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca20:	460d      	mov	r5, r1
 800ca22:	b09d      	sub	sp, #116	; 0x74
 800ca24:	4614      	mov	r4, r2
 800ca26:	4698      	mov	r8, r3
 800ca28:	4606      	mov	r6, r0
 800ca2a:	b118      	cbz	r0, 800ca34 <_vfiprintf_r+0x18>
 800ca2c:	6983      	ldr	r3, [r0, #24]
 800ca2e:	b90b      	cbnz	r3, 800ca34 <_vfiprintf_r+0x18>
 800ca30:	f000 fb06 	bl	800d040 <__sinit>
 800ca34:	4b89      	ldr	r3, [pc, #548]	; (800cc5c <_vfiprintf_r+0x240>)
 800ca36:	429d      	cmp	r5, r3
 800ca38:	d11b      	bne.n	800ca72 <_vfiprintf_r+0x56>
 800ca3a:	6875      	ldr	r5, [r6, #4]
 800ca3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca3e:	07d9      	lsls	r1, r3, #31
 800ca40:	d405      	bmi.n	800ca4e <_vfiprintf_r+0x32>
 800ca42:	89ab      	ldrh	r3, [r5, #12]
 800ca44:	059a      	lsls	r2, r3, #22
 800ca46:	d402      	bmi.n	800ca4e <_vfiprintf_r+0x32>
 800ca48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca4a:	f000 fb97 	bl	800d17c <__retarget_lock_acquire_recursive>
 800ca4e:	89ab      	ldrh	r3, [r5, #12]
 800ca50:	071b      	lsls	r3, r3, #28
 800ca52:	d501      	bpl.n	800ca58 <_vfiprintf_r+0x3c>
 800ca54:	692b      	ldr	r3, [r5, #16]
 800ca56:	b9eb      	cbnz	r3, 800ca94 <_vfiprintf_r+0x78>
 800ca58:	4629      	mov	r1, r5
 800ca5a:	4630      	mov	r0, r6
 800ca5c:	f000 f960 	bl	800cd20 <__swsetup_r>
 800ca60:	b1c0      	cbz	r0, 800ca94 <_vfiprintf_r+0x78>
 800ca62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca64:	07dc      	lsls	r4, r3, #31
 800ca66:	d50e      	bpl.n	800ca86 <_vfiprintf_r+0x6a>
 800ca68:	f04f 30ff 	mov.w	r0, #4294967295
 800ca6c:	b01d      	add	sp, #116	; 0x74
 800ca6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca72:	4b7b      	ldr	r3, [pc, #492]	; (800cc60 <_vfiprintf_r+0x244>)
 800ca74:	429d      	cmp	r5, r3
 800ca76:	d101      	bne.n	800ca7c <_vfiprintf_r+0x60>
 800ca78:	68b5      	ldr	r5, [r6, #8]
 800ca7a:	e7df      	b.n	800ca3c <_vfiprintf_r+0x20>
 800ca7c:	4b79      	ldr	r3, [pc, #484]	; (800cc64 <_vfiprintf_r+0x248>)
 800ca7e:	429d      	cmp	r5, r3
 800ca80:	bf08      	it	eq
 800ca82:	68f5      	ldreq	r5, [r6, #12]
 800ca84:	e7da      	b.n	800ca3c <_vfiprintf_r+0x20>
 800ca86:	89ab      	ldrh	r3, [r5, #12]
 800ca88:	0598      	lsls	r0, r3, #22
 800ca8a:	d4ed      	bmi.n	800ca68 <_vfiprintf_r+0x4c>
 800ca8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca8e:	f000 fb76 	bl	800d17e <__retarget_lock_release_recursive>
 800ca92:	e7e9      	b.n	800ca68 <_vfiprintf_r+0x4c>
 800ca94:	2300      	movs	r3, #0
 800ca96:	9309      	str	r3, [sp, #36]	; 0x24
 800ca98:	2320      	movs	r3, #32
 800ca9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca9e:	f8cd 800c 	str.w	r8, [sp, #12]
 800caa2:	2330      	movs	r3, #48	; 0x30
 800caa4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cc68 <_vfiprintf_r+0x24c>
 800caa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800caac:	f04f 0901 	mov.w	r9, #1
 800cab0:	4623      	mov	r3, r4
 800cab2:	469a      	mov	sl, r3
 800cab4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cab8:	b10a      	cbz	r2, 800cabe <_vfiprintf_r+0xa2>
 800caba:	2a25      	cmp	r2, #37	; 0x25
 800cabc:	d1f9      	bne.n	800cab2 <_vfiprintf_r+0x96>
 800cabe:	ebba 0b04 	subs.w	fp, sl, r4
 800cac2:	d00b      	beq.n	800cadc <_vfiprintf_r+0xc0>
 800cac4:	465b      	mov	r3, fp
 800cac6:	4622      	mov	r2, r4
 800cac8:	4629      	mov	r1, r5
 800caca:	4630      	mov	r0, r6
 800cacc:	f7ff ff93 	bl	800c9f6 <__sfputs_r>
 800cad0:	3001      	adds	r0, #1
 800cad2:	f000 80aa 	beq.w	800cc2a <_vfiprintf_r+0x20e>
 800cad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cad8:	445a      	add	r2, fp
 800cada:	9209      	str	r2, [sp, #36]	; 0x24
 800cadc:	f89a 3000 	ldrb.w	r3, [sl]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	f000 80a2 	beq.w	800cc2a <_vfiprintf_r+0x20e>
 800cae6:	2300      	movs	r3, #0
 800cae8:	f04f 32ff 	mov.w	r2, #4294967295
 800caec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800caf0:	f10a 0a01 	add.w	sl, sl, #1
 800caf4:	9304      	str	r3, [sp, #16]
 800caf6:	9307      	str	r3, [sp, #28]
 800caf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cafc:	931a      	str	r3, [sp, #104]	; 0x68
 800cafe:	4654      	mov	r4, sl
 800cb00:	2205      	movs	r2, #5
 800cb02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb06:	4858      	ldr	r0, [pc, #352]	; (800cc68 <_vfiprintf_r+0x24c>)
 800cb08:	f7f3 fb92 	bl	8000230 <memchr>
 800cb0c:	9a04      	ldr	r2, [sp, #16]
 800cb0e:	b9d8      	cbnz	r0, 800cb48 <_vfiprintf_r+0x12c>
 800cb10:	06d1      	lsls	r1, r2, #27
 800cb12:	bf44      	itt	mi
 800cb14:	2320      	movmi	r3, #32
 800cb16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb1a:	0713      	lsls	r3, r2, #28
 800cb1c:	bf44      	itt	mi
 800cb1e:	232b      	movmi	r3, #43	; 0x2b
 800cb20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb24:	f89a 3000 	ldrb.w	r3, [sl]
 800cb28:	2b2a      	cmp	r3, #42	; 0x2a
 800cb2a:	d015      	beq.n	800cb58 <_vfiprintf_r+0x13c>
 800cb2c:	9a07      	ldr	r2, [sp, #28]
 800cb2e:	4654      	mov	r4, sl
 800cb30:	2000      	movs	r0, #0
 800cb32:	f04f 0c0a 	mov.w	ip, #10
 800cb36:	4621      	mov	r1, r4
 800cb38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb3c:	3b30      	subs	r3, #48	; 0x30
 800cb3e:	2b09      	cmp	r3, #9
 800cb40:	d94e      	bls.n	800cbe0 <_vfiprintf_r+0x1c4>
 800cb42:	b1b0      	cbz	r0, 800cb72 <_vfiprintf_r+0x156>
 800cb44:	9207      	str	r2, [sp, #28]
 800cb46:	e014      	b.n	800cb72 <_vfiprintf_r+0x156>
 800cb48:	eba0 0308 	sub.w	r3, r0, r8
 800cb4c:	fa09 f303 	lsl.w	r3, r9, r3
 800cb50:	4313      	orrs	r3, r2
 800cb52:	9304      	str	r3, [sp, #16]
 800cb54:	46a2      	mov	sl, r4
 800cb56:	e7d2      	b.n	800cafe <_vfiprintf_r+0xe2>
 800cb58:	9b03      	ldr	r3, [sp, #12]
 800cb5a:	1d19      	adds	r1, r3, #4
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	9103      	str	r1, [sp, #12]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	bfbb      	ittet	lt
 800cb64:	425b      	neglt	r3, r3
 800cb66:	f042 0202 	orrlt.w	r2, r2, #2
 800cb6a:	9307      	strge	r3, [sp, #28]
 800cb6c:	9307      	strlt	r3, [sp, #28]
 800cb6e:	bfb8      	it	lt
 800cb70:	9204      	strlt	r2, [sp, #16]
 800cb72:	7823      	ldrb	r3, [r4, #0]
 800cb74:	2b2e      	cmp	r3, #46	; 0x2e
 800cb76:	d10c      	bne.n	800cb92 <_vfiprintf_r+0x176>
 800cb78:	7863      	ldrb	r3, [r4, #1]
 800cb7a:	2b2a      	cmp	r3, #42	; 0x2a
 800cb7c:	d135      	bne.n	800cbea <_vfiprintf_r+0x1ce>
 800cb7e:	9b03      	ldr	r3, [sp, #12]
 800cb80:	1d1a      	adds	r2, r3, #4
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	9203      	str	r2, [sp, #12]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	bfb8      	it	lt
 800cb8a:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb8e:	3402      	adds	r4, #2
 800cb90:	9305      	str	r3, [sp, #20]
 800cb92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cc78 <_vfiprintf_r+0x25c>
 800cb96:	7821      	ldrb	r1, [r4, #0]
 800cb98:	2203      	movs	r2, #3
 800cb9a:	4650      	mov	r0, sl
 800cb9c:	f7f3 fb48 	bl	8000230 <memchr>
 800cba0:	b140      	cbz	r0, 800cbb4 <_vfiprintf_r+0x198>
 800cba2:	2340      	movs	r3, #64	; 0x40
 800cba4:	eba0 000a 	sub.w	r0, r0, sl
 800cba8:	fa03 f000 	lsl.w	r0, r3, r0
 800cbac:	9b04      	ldr	r3, [sp, #16]
 800cbae:	4303      	orrs	r3, r0
 800cbb0:	3401      	adds	r4, #1
 800cbb2:	9304      	str	r3, [sp, #16]
 800cbb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbb8:	482c      	ldr	r0, [pc, #176]	; (800cc6c <_vfiprintf_r+0x250>)
 800cbba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbbe:	2206      	movs	r2, #6
 800cbc0:	f7f3 fb36 	bl	8000230 <memchr>
 800cbc4:	2800      	cmp	r0, #0
 800cbc6:	d03f      	beq.n	800cc48 <_vfiprintf_r+0x22c>
 800cbc8:	4b29      	ldr	r3, [pc, #164]	; (800cc70 <_vfiprintf_r+0x254>)
 800cbca:	bb1b      	cbnz	r3, 800cc14 <_vfiprintf_r+0x1f8>
 800cbcc:	9b03      	ldr	r3, [sp, #12]
 800cbce:	3307      	adds	r3, #7
 800cbd0:	f023 0307 	bic.w	r3, r3, #7
 800cbd4:	3308      	adds	r3, #8
 800cbd6:	9303      	str	r3, [sp, #12]
 800cbd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbda:	443b      	add	r3, r7
 800cbdc:	9309      	str	r3, [sp, #36]	; 0x24
 800cbde:	e767      	b.n	800cab0 <_vfiprintf_r+0x94>
 800cbe0:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbe4:	460c      	mov	r4, r1
 800cbe6:	2001      	movs	r0, #1
 800cbe8:	e7a5      	b.n	800cb36 <_vfiprintf_r+0x11a>
 800cbea:	2300      	movs	r3, #0
 800cbec:	3401      	adds	r4, #1
 800cbee:	9305      	str	r3, [sp, #20]
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	f04f 0c0a 	mov.w	ip, #10
 800cbf6:	4620      	mov	r0, r4
 800cbf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbfc:	3a30      	subs	r2, #48	; 0x30
 800cbfe:	2a09      	cmp	r2, #9
 800cc00:	d903      	bls.n	800cc0a <_vfiprintf_r+0x1ee>
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d0c5      	beq.n	800cb92 <_vfiprintf_r+0x176>
 800cc06:	9105      	str	r1, [sp, #20]
 800cc08:	e7c3      	b.n	800cb92 <_vfiprintf_r+0x176>
 800cc0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc0e:	4604      	mov	r4, r0
 800cc10:	2301      	movs	r3, #1
 800cc12:	e7f0      	b.n	800cbf6 <_vfiprintf_r+0x1da>
 800cc14:	ab03      	add	r3, sp, #12
 800cc16:	9300      	str	r3, [sp, #0]
 800cc18:	462a      	mov	r2, r5
 800cc1a:	4b16      	ldr	r3, [pc, #88]	; (800cc74 <_vfiprintf_r+0x258>)
 800cc1c:	a904      	add	r1, sp, #16
 800cc1e:	4630      	mov	r0, r6
 800cc20:	f7fc f870 	bl	8008d04 <_printf_float>
 800cc24:	4607      	mov	r7, r0
 800cc26:	1c78      	adds	r0, r7, #1
 800cc28:	d1d6      	bne.n	800cbd8 <_vfiprintf_r+0x1bc>
 800cc2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc2c:	07d9      	lsls	r1, r3, #31
 800cc2e:	d405      	bmi.n	800cc3c <_vfiprintf_r+0x220>
 800cc30:	89ab      	ldrh	r3, [r5, #12]
 800cc32:	059a      	lsls	r2, r3, #22
 800cc34:	d402      	bmi.n	800cc3c <_vfiprintf_r+0x220>
 800cc36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc38:	f000 faa1 	bl	800d17e <__retarget_lock_release_recursive>
 800cc3c:	89ab      	ldrh	r3, [r5, #12]
 800cc3e:	065b      	lsls	r3, r3, #25
 800cc40:	f53f af12 	bmi.w	800ca68 <_vfiprintf_r+0x4c>
 800cc44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc46:	e711      	b.n	800ca6c <_vfiprintf_r+0x50>
 800cc48:	ab03      	add	r3, sp, #12
 800cc4a:	9300      	str	r3, [sp, #0]
 800cc4c:	462a      	mov	r2, r5
 800cc4e:	4b09      	ldr	r3, [pc, #36]	; (800cc74 <_vfiprintf_r+0x258>)
 800cc50:	a904      	add	r1, sp, #16
 800cc52:	4630      	mov	r0, r6
 800cc54:	f7fc fafa 	bl	800924c <_printf_i>
 800cc58:	e7e4      	b.n	800cc24 <_vfiprintf_r+0x208>
 800cc5a:	bf00      	nop
 800cc5c:	080101a4 	.word	0x080101a4
 800cc60:	080101c4 	.word	0x080101c4
 800cc64:	08010184 	.word	0x08010184
 800cc68:	08010134 	.word	0x08010134
 800cc6c:	0801013e 	.word	0x0801013e
 800cc70:	08008d05 	.word	0x08008d05
 800cc74:	0800c9f7 	.word	0x0800c9f7
 800cc78:	0801013a 	.word	0x0801013a

0800cc7c <__swbuf_r>:
 800cc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc7e:	460e      	mov	r6, r1
 800cc80:	4614      	mov	r4, r2
 800cc82:	4605      	mov	r5, r0
 800cc84:	b118      	cbz	r0, 800cc8e <__swbuf_r+0x12>
 800cc86:	6983      	ldr	r3, [r0, #24]
 800cc88:	b90b      	cbnz	r3, 800cc8e <__swbuf_r+0x12>
 800cc8a:	f000 f9d9 	bl	800d040 <__sinit>
 800cc8e:	4b21      	ldr	r3, [pc, #132]	; (800cd14 <__swbuf_r+0x98>)
 800cc90:	429c      	cmp	r4, r3
 800cc92:	d12b      	bne.n	800ccec <__swbuf_r+0x70>
 800cc94:	686c      	ldr	r4, [r5, #4]
 800cc96:	69a3      	ldr	r3, [r4, #24]
 800cc98:	60a3      	str	r3, [r4, #8]
 800cc9a:	89a3      	ldrh	r3, [r4, #12]
 800cc9c:	071a      	lsls	r2, r3, #28
 800cc9e:	d52f      	bpl.n	800cd00 <__swbuf_r+0x84>
 800cca0:	6923      	ldr	r3, [r4, #16]
 800cca2:	b36b      	cbz	r3, 800cd00 <__swbuf_r+0x84>
 800cca4:	6923      	ldr	r3, [r4, #16]
 800cca6:	6820      	ldr	r0, [r4, #0]
 800cca8:	1ac0      	subs	r0, r0, r3
 800ccaa:	6963      	ldr	r3, [r4, #20]
 800ccac:	b2f6      	uxtb	r6, r6
 800ccae:	4283      	cmp	r3, r0
 800ccb0:	4637      	mov	r7, r6
 800ccb2:	dc04      	bgt.n	800ccbe <__swbuf_r+0x42>
 800ccb4:	4621      	mov	r1, r4
 800ccb6:	4628      	mov	r0, r5
 800ccb8:	f000 f92e 	bl	800cf18 <_fflush_r>
 800ccbc:	bb30      	cbnz	r0, 800cd0c <__swbuf_r+0x90>
 800ccbe:	68a3      	ldr	r3, [r4, #8]
 800ccc0:	3b01      	subs	r3, #1
 800ccc2:	60a3      	str	r3, [r4, #8]
 800ccc4:	6823      	ldr	r3, [r4, #0]
 800ccc6:	1c5a      	adds	r2, r3, #1
 800ccc8:	6022      	str	r2, [r4, #0]
 800ccca:	701e      	strb	r6, [r3, #0]
 800cccc:	6963      	ldr	r3, [r4, #20]
 800ccce:	3001      	adds	r0, #1
 800ccd0:	4283      	cmp	r3, r0
 800ccd2:	d004      	beq.n	800ccde <__swbuf_r+0x62>
 800ccd4:	89a3      	ldrh	r3, [r4, #12]
 800ccd6:	07db      	lsls	r3, r3, #31
 800ccd8:	d506      	bpl.n	800cce8 <__swbuf_r+0x6c>
 800ccda:	2e0a      	cmp	r6, #10
 800ccdc:	d104      	bne.n	800cce8 <__swbuf_r+0x6c>
 800ccde:	4621      	mov	r1, r4
 800cce0:	4628      	mov	r0, r5
 800cce2:	f000 f919 	bl	800cf18 <_fflush_r>
 800cce6:	b988      	cbnz	r0, 800cd0c <__swbuf_r+0x90>
 800cce8:	4638      	mov	r0, r7
 800ccea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccec:	4b0a      	ldr	r3, [pc, #40]	; (800cd18 <__swbuf_r+0x9c>)
 800ccee:	429c      	cmp	r4, r3
 800ccf0:	d101      	bne.n	800ccf6 <__swbuf_r+0x7a>
 800ccf2:	68ac      	ldr	r4, [r5, #8]
 800ccf4:	e7cf      	b.n	800cc96 <__swbuf_r+0x1a>
 800ccf6:	4b09      	ldr	r3, [pc, #36]	; (800cd1c <__swbuf_r+0xa0>)
 800ccf8:	429c      	cmp	r4, r3
 800ccfa:	bf08      	it	eq
 800ccfc:	68ec      	ldreq	r4, [r5, #12]
 800ccfe:	e7ca      	b.n	800cc96 <__swbuf_r+0x1a>
 800cd00:	4621      	mov	r1, r4
 800cd02:	4628      	mov	r0, r5
 800cd04:	f000 f80c 	bl	800cd20 <__swsetup_r>
 800cd08:	2800      	cmp	r0, #0
 800cd0a:	d0cb      	beq.n	800cca4 <__swbuf_r+0x28>
 800cd0c:	f04f 37ff 	mov.w	r7, #4294967295
 800cd10:	e7ea      	b.n	800cce8 <__swbuf_r+0x6c>
 800cd12:	bf00      	nop
 800cd14:	080101a4 	.word	0x080101a4
 800cd18:	080101c4 	.word	0x080101c4
 800cd1c:	08010184 	.word	0x08010184

0800cd20 <__swsetup_r>:
 800cd20:	4b32      	ldr	r3, [pc, #200]	; (800cdec <__swsetup_r+0xcc>)
 800cd22:	b570      	push	{r4, r5, r6, lr}
 800cd24:	681d      	ldr	r5, [r3, #0]
 800cd26:	4606      	mov	r6, r0
 800cd28:	460c      	mov	r4, r1
 800cd2a:	b125      	cbz	r5, 800cd36 <__swsetup_r+0x16>
 800cd2c:	69ab      	ldr	r3, [r5, #24]
 800cd2e:	b913      	cbnz	r3, 800cd36 <__swsetup_r+0x16>
 800cd30:	4628      	mov	r0, r5
 800cd32:	f000 f985 	bl	800d040 <__sinit>
 800cd36:	4b2e      	ldr	r3, [pc, #184]	; (800cdf0 <__swsetup_r+0xd0>)
 800cd38:	429c      	cmp	r4, r3
 800cd3a:	d10f      	bne.n	800cd5c <__swsetup_r+0x3c>
 800cd3c:	686c      	ldr	r4, [r5, #4]
 800cd3e:	89a3      	ldrh	r3, [r4, #12]
 800cd40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd44:	0719      	lsls	r1, r3, #28
 800cd46:	d42c      	bmi.n	800cda2 <__swsetup_r+0x82>
 800cd48:	06dd      	lsls	r5, r3, #27
 800cd4a:	d411      	bmi.n	800cd70 <__swsetup_r+0x50>
 800cd4c:	2309      	movs	r3, #9
 800cd4e:	6033      	str	r3, [r6, #0]
 800cd50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cd54:	81a3      	strh	r3, [r4, #12]
 800cd56:	f04f 30ff 	mov.w	r0, #4294967295
 800cd5a:	e03e      	b.n	800cdda <__swsetup_r+0xba>
 800cd5c:	4b25      	ldr	r3, [pc, #148]	; (800cdf4 <__swsetup_r+0xd4>)
 800cd5e:	429c      	cmp	r4, r3
 800cd60:	d101      	bne.n	800cd66 <__swsetup_r+0x46>
 800cd62:	68ac      	ldr	r4, [r5, #8]
 800cd64:	e7eb      	b.n	800cd3e <__swsetup_r+0x1e>
 800cd66:	4b24      	ldr	r3, [pc, #144]	; (800cdf8 <__swsetup_r+0xd8>)
 800cd68:	429c      	cmp	r4, r3
 800cd6a:	bf08      	it	eq
 800cd6c:	68ec      	ldreq	r4, [r5, #12]
 800cd6e:	e7e6      	b.n	800cd3e <__swsetup_r+0x1e>
 800cd70:	0758      	lsls	r0, r3, #29
 800cd72:	d512      	bpl.n	800cd9a <__swsetup_r+0x7a>
 800cd74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd76:	b141      	cbz	r1, 800cd8a <__swsetup_r+0x6a>
 800cd78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd7c:	4299      	cmp	r1, r3
 800cd7e:	d002      	beq.n	800cd86 <__swsetup_r+0x66>
 800cd80:	4630      	mov	r0, r6
 800cd82:	f7ff fb67 	bl	800c454 <_free_r>
 800cd86:	2300      	movs	r3, #0
 800cd88:	6363      	str	r3, [r4, #52]	; 0x34
 800cd8a:	89a3      	ldrh	r3, [r4, #12]
 800cd8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cd90:	81a3      	strh	r3, [r4, #12]
 800cd92:	2300      	movs	r3, #0
 800cd94:	6063      	str	r3, [r4, #4]
 800cd96:	6923      	ldr	r3, [r4, #16]
 800cd98:	6023      	str	r3, [r4, #0]
 800cd9a:	89a3      	ldrh	r3, [r4, #12]
 800cd9c:	f043 0308 	orr.w	r3, r3, #8
 800cda0:	81a3      	strh	r3, [r4, #12]
 800cda2:	6923      	ldr	r3, [r4, #16]
 800cda4:	b94b      	cbnz	r3, 800cdba <__swsetup_r+0x9a>
 800cda6:	89a3      	ldrh	r3, [r4, #12]
 800cda8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cdac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cdb0:	d003      	beq.n	800cdba <__swsetup_r+0x9a>
 800cdb2:	4621      	mov	r1, r4
 800cdb4:	4630      	mov	r0, r6
 800cdb6:	f000 fa07 	bl	800d1c8 <__smakebuf_r>
 800cdba:	89a0      	ldrh	r0, [r4, #12]
 800cdbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cdc0:	f010 0301 	ands.w	r3, r0, #1
 800cdc4:	d00a      	beq.n	800cddc <__swsetup_r+0xbc>
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	60a3      	str	r3, [r4, #8]
 800cdca:	6963      	ldr	r3, [r4, #20]
 800cdcc:	425b      	negs	r3, r3
 800cdce:	61a3      	str	r3, [r4, #24]
 800cdd0:	6923      	ldr	r3, [r4, #16]
 800cdd2:	b943      	cbnz	r3, 800cde6 <__swsetup_r+0xc6>
 800cdd4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cdd8:	d1ba      	bne.n	800cd50 <__swsetup_r+0x30>
 800cdda:	bd70      	pop	{r4, r5, r6, pc}
 800cddc:	0781      	lsls	r1, r0, #30
 800cdde:	bf58      	it	pl
 800cde0:	6963      	ldrpl	r3, [r4, #20]
 800cde2:	60a3      	str	r3, [r4, #8]
 800cde4:	e7f4      	b.n	800cdd0 <__swsetup_r+0xb0>
 800cde6:	2000      	movs	r0, #0
 800cde8:	e7f7      	b.n	800cdda <__swsetup_r+0xba>
 800cdea:	bf00      	nop
 800cdec:	2000003c 	.word	0x2000003c
 800cdf0:	080101a4 	.word	0x080101a4
 800cdf4:	080101c4 	.word	0x080101c4
 800cdf8:	08010184 	.word	0x08010184

0800cdfc <abort>:
 800cdfc:	b508      	push	{r3, lr}
 800cdfe:	2006      	movs	r0, #6
 800ce00:	f000 fa52 	bl	800d2a8 <raise>
 800ce04:	2001      	movs	r0, #1
 800ce06:	f7f6 fded 	bl	80039e4 <_exit>
	...

0800ce0c <__sflush_r>:
 800ce0c:	898a      	ldrh	r2, [r1, #12]
 800ce0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce12:	4605      	mov	r5, r0
 800ce14:	0710      	lsls	r0, r2, #28
 800ce16:	460c      	mov	r4, r1
 800ce18:	d458      	bmi.n	800cecc <__sflush_r+0xc0>
 800ce1a:	684b      	ldr	r3, [r1, #4]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	dc05      	bgt.n	800ce2c <__sflush_r+0x20>
 800ce20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	dc02      	bgt.n	800ce2c <__sflush_r+0x20>
 800ce26:	2000      	movs	r0, #0
 800ce28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce2e:	2e00      	cmp	r6, #0
 800ce30:	d0f9      	beq.n	800ce26 <__sflush_r+0x1a>
 800ce32:	2300      	movs	r3, #0
 800ce34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ce38:	682f      	ldr	r7, [r5, #0]
 800ce3a:	602b      	str	r3, [r5, #0]
 800ce3c:	d032      	beq.n	800cea4 <__sflush_r+0x98>
 800ce3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ce40:	89a3      	ldrh	r3, [r4, #12]
 800ce42:	075a      	lsls	r2, r3, #29
 800ce44:	d505      	bpl.n	800ce52 <__sflush_r+0x46>
 800ce46:	6863      	ldr	r3, [r4, #4]
 800ce48:	1ac0      	subs	r0, r0, r3
 800ce4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce4c:	b10b      	cbz	r3, 800ce52 <__sflush_r+0x46>
 800ce4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce50:	1ac0      	subs	r0, r0, r3
 800ce52:	2300      	movs	r3, #0
 800ce54:	4602      	mov	r2, r0
 800ce56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce58:	6a21      	ldr	r1, [r4, #32]
 800ce5a:	4628      	mov	r0, r5
 800ce5c:	47b0      	blx	r6
 800ce5e:	1c43      	adds	r3, r0, #1
 800ce60:	89a3      	ldrh	r3, [r4, #12]
 800ce62:	d106      	bne.n	800ce72 <__sflush_r+0x66>
 800ce64:	6829      	ldr	r1, [r5, #0]
 800ce66:	291d      	cmp	r1, #29
 800ce68:	d82c      	bhi.n	800cec4 <__sflush_r+0xb8>
 800ce6a:	4a2a      	ldr	r2, [pc, #168]	; (800cf14 <__sflush_r+0x108>)
 800ce6c:	40ca      	lsrs	r2, r1
 800ce6e:	07d6      	lsls	r6, r2, #31
 800ce70:	d528      	bpl.n	800cec4 <__sflush_r+0xb8>
 800ce72:	2200      	movs	r2, #0
 800ce74:	6062      	str	r2, [r4, #4]
 800ce76:	04d9      	lsls	r1, r3, #19
 800ce78:	6922      	ldr	r2, [r4, #16]
 800ce7a:	6022      	str	r2, [r4, #0]
 800ce7c:	d504      	bpl.n	800ce88 <__sflush_r+0x7c>
 800ce7e:	1c42      	adds	r2, r0, #1
 800ce80:	d101      	bne.n	800ce86 <__sflush_r+0x7a>
 800ce82:	682b      	ldr	r3, [r5, #0]
 800ce84:	b903      	cbnz	r3, 800ce88 <__sflush_r+0x7c>
 800ce86:	6560      	str	r0, [r4, #84]	; 0x54
 800ce88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce8a:	602f      	str	r7, [r5, #0]
 800ce8c:	2900      	cmp	r1, #0
 800ce8e:	d0ca      	beq.n	800ce26 <__sflush_r+0x1a>
 800ce90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce94:	4299      	cmp	r1, r3
 800ce96:	d002      	beq.n	800ce9e <__sflush_r+0x92>
 800ce98:	4628      	mov	r0, r5
 800ce9a:	f7ff fadb 	bl	800c454 <_free_r>
 800ce9e:	2000      	movs	r0, #0
 800cea0:	6360      	str	r0, [r4, #52]	; 0x34
 800cea2:	e7c1      	b.n	800ce28 <__sflush_r+0x1c>
 800cea4:	6a21      	ldr	r1, [r4, #32]
 800cea6:	2301      	movs	r3, #1
 800cea8:	4628      	mov	r0, r5
 800ceaa:	47b0      	blx	r6
 800ceac:	1c41      	adds	r1, r0, #1
 800ceae:	d1c7      	bne.n	800ce40 <__sflush_r+0x34>
 800ceb0:	682b      	ldr	r3, [r5, #0]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d0c4      	beq.n	800ce40 <__sflush_r+0x34>
 800ceb6:	2b1d      	cmp	r3, #29
 800ceb8:	d001      	beq.n	800cebe <__sflush_r+0xb2>
 800ceba:	2b16      	cmp	r3, #22
 800cebc:	d101      	bne.n	800cec2 <__sflush_r+0xb6>
 800cebe:	602f      	str	r7, [r5, #0]
 800cec0:	e7b1      	b.n	800ce26 <__sflush_r+0x1a>
 800cec2:	89a3      	ldrh	r3, [r4, #12]
 800cec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cec8:	81a3      	strh	r3, [r4, #12]
 800ceca:	e7ad      	b.n	800ce28 <__sflush_r+0x1c>
 800cecc:	690f      	ldr	r7, [r1, #16]
 800cece:	2f00      	cmp	r7, #0
 800ced0:	d0a9      	beq.n	800ce26 <__sflush_r+0x1a>
 800ced2:	0793      	lsls	r3, r2, #30
 800ced4:	680e      	ldr	r6, [r1, #0]
 800ced6:	bf08      	it	eq
 800ced8:	694b      	ldreq	r3, [r1, #20]
 800ceda:	600f      	str	r7, [r1, #0]
 800cedc:	bf18      	it	ne
 800cede:	2300      	movne	r3, #0
 800cee0:	eba6 0807 	sub.w	r8, r6, r7
 800cee4:	608b      	str	r3, [r1, #8]
 800cee6:	f1b8 0f00 	cmp.w	r8, #0
 800ceea:	dd9c      	ble.n	800ce26 <__sflush_r+0x1a>
 800ceec:	6a21      	ldr	r1, [r4, #32]
 800ceee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cef0:	4643      	mov	r3, r8
 800cef2:	463a      	mov	r2, r7
 800cef4:	4628      	mov	r0, r5
 800cef6:	47b0      	blx	r6
 800cef8:	2800      	cmp	r0, #0
 800cefa:	dc06      	bgt.n	800cf0a <__sflush_r+0xfe>
 800cefc:	89a3      	ldrh	r3, [r4, #12]
 800cefe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf02:	81a3      	strh	r3, [r4, #12]
 800cf04:	f04f 30ff 	mov.w	r0, #4294967295
 800cf08:	e78e      	b.n	800ce28 <__sflush_r+0x1c>
 800cf0a:	4407      	add	r7, r0
 800cf0c:	eba8 0800 	sub.w	r8, r8, r0
 800cf10:	e7e9      	b.n	800cee6 <__sflush_r+0xda>
 800cf12:	bf00      	nop
 800cf14:	20400001 	.word	0x20400001

0800cf18 <_fflush_r>:
 800cf18:	b538      	push	{r3, r4, r5, lr}
 800cf1a:	690b      	ldr	r3, [r1, #16]
 800cf1c:	4605      	mov	r5, r0
 800cf1e:	460c      	mov	r4, r1
 800cf20:	b913      	cbnz	r3, 800cf28 <_fflush_r+0x10>
 800cf22:	2500      	movs	r5, #0
 800cf24:	4628      	mov	r0, r5
 800cf26:	bd38      	pop	{r3, r4, r5, pc}
 800cf28:	b118      	cbz	r0, 800cf32 <_fflush_r+0x1a>
 800cf2a:	6983      	ldr	r3, [r0, #24]
 800cf2c:	b90b      	cbnz	r3, 800cf32 <_fflush_r+0x1a>
 800cf2e:	f000 f887 	bl	800d040 <__sinit>
 800cf32:	4b14      	ldr	r3, [pc, #80]	; (800cf84 <_fflush_r+0x6c>)
 800cf34:	429c      	cmp	r4, r3
 800cf36:	d11b      	bne.n	800cf70 <_fflush_r+0x58>
 800cf38:	686c      	ldr	r4, [r5, #4]
 800cf3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d0ef      	beq.n	800cf22 <_fflush_r+0xa>
 800cf42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cf44:	07d0      	lsls	r0, r2, #31
 800cf46:	d404      	bmi.n	800cf52 <_fflush_r+0x3a>
 800cf48:	0599      	lsls	r1, r3, #22
 800cf4a:	d402      	bmi.n	800cf52 <_fflush_r+0x3a>
 800cf4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf4e:	f000 f915 	bl	800d17c <__retarget_lock_acquire_recursive>
 800cf52:	4628      	mov	r0, r5
 800cf54:	4621      	mov	r1, r4
 800cf56:	f7ff ff59 	bl	800ce0c <__sflush_r>
 800cf5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf5c:	07da      	lsls	r2, r3, #31
 800cf5e:	4605      	mov	r5, r0
 800cf60:	d4e0      	bmi.n	800cf24 <_fflush_r+0xc>
 800cf62:	89a3      	ldrh	r3, [r4, #12]
 800cf64:	059b      	lsls	r3, r3, #22
 800cf66:	d4dd      	bmi.n	800cf24 <_fflush_r+0xc>
 800cf68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf6a:	f000 f908 	bl	800d17e <__retarget_lock_release_recursive>
 800cf6e:	e7d9      	b.n	800cf24 <_fflush_r+0xc>
 800cf70:	4b05      	ldr	r3, [pc, #20]	; (800cf88 <_fflush_r+0x70>)
 800cf72:	429c      	cmp	r4, r3
 800cf74:	d101      	bne.n	800cf7a <_fflush_r+0x62>
 800cf76:	68ac      	ldr	r4, [r5, #8]
 800cf78:	e7df      	b.n	800cf3a <_fflush_r+0x22>
 800cf7a:	4b04      	ldr	r3, [pc, #16]	; (800cf8c <_fflush_r+0x74>)
 800cf7c:	429c      	cmp	r4, r3
 800cf7e:	bf08      	it	eq
 800cf80:	68ec      	ldreq	r4, [r5, #12]
 800cf82:	e7da      	b.n	800cf3a <_fflush_r+0x22>
 800cf84:	080101a4 	.word	0x080101a4
 800cf88:	080101c4 	.word	0x080101c4
 800cf8c:	08010184 	.word	0x08010184

0800cf90 <std>:
 800cf90:	2300      	movs	r3, #0
 800cf92:	b510      	push	{r4, lr}
 800cf94:	4604      	mov	r4, r0
 800cf96:	e9c0 3300 	strd	r3, r3, [r0]
 800cf9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf9e:	6083      	str	r3, [r0, #8]
 800cfa0:	8181      	strh	r1, [r0, #12]
 800cfa2:	6643      	str	r3, [r0, #100]	; 0x64
 800cfa4:	81c2      	strh	r2, [r0, #14]
 800cfa6:	6183      	str	r3, [r0, #24]
 800cfa8:	4619      	mov	r1, r3
 800cfaa:	2208      	movs	r2, #8
 800cfac:	305c      	adds	r0, #92	; 0x5c
 800cfae:	f7fb fe01 	bl	8008bb4 <memset>
 800cfb2:	4b05      	ldr	r3, [pc, #20]	; (800cfc8 <std+0x38>)
 800cfb4:	6263      	str	r3, [r4, #36]	; 0x24
 800cfb6:	4b05      	ldr	r3, [pc, #20]	; (800cfcc <std+0x3c>)
 800cfb8:	62a3      	str	r3, [r4, #40]	; 0x28
 800cfba:	4b05      	ldr	r3, [pc, #20]	; (800cfd0 <std+0x40>)
 800cfbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cfbe:	4b05      	ldr	r3, [pc, #20]	; (800cfd4 <std+0x44>)
 800cfc0:	6224      	str	r4, [r4, #32]
 800cfc2:	6323      	str	r3, [r4, #48]	; 0x30
 800cfc4:	bd10      	pop	{r4, pc}
 800cfc6:	bf00      	nop
 800cfc8:	0800d2e1 	.word	0x0800d2e1
 800cfcc:	0800d303 	.word	0x0800d303
 800cfd0:	0800d33b 	.word	0x0800d33b
 800cfd4:	0800d35f 	.word	0x0800d35f

0800cfd8 <_cleanup_r>:
 800cfd8:	4901      	ldr	r1, [pc, #4]	; (800cfe0 <_cleanup_r+0x8>)
 800cfda:	f000 b8af 	b.w	800d13c <_fwalk_reent>
 800cfde:	bf00      	nop
 800cfe0:	0800cf19 	.word	0x0800cf19

0800cfe4 <__sfmoreglue>:
 800cfe4:	b570      	push	{r4, r5, r6, lr}
 800cfe6:	1e4a      	subs	r2, r1, #1
 800cfe8:	2568      	movs	r5, #104	; 0x68
 800cfea:	4355      	muls	r5, r2
 800cfec:	460e      	mov	r6, r1
 800cfee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cff2:	f7ff fa7f 	bl	800c4f4 <_malloc_r>
 800cff6:	4604      	mov	r4, r0
 800cff8:	b140      	cbz	r0, 800d00c <__sfmoreglue+0x28>
 800cffa:	2100      	movs	r1, #0
 800cffc:	e9c0 1600 	strd	r1, r6, [r0]
 800d000:	300c      	adds	r0, #12
 800d002:	60a0      	str	r0, [r4, #8]
 800d004:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d008:	f7fb fdd4 	bl	8008bb4 <memset>
 800d00c:	4620      	mov	r0, r4
 800d00e:	bd70      	pop	{r4, r5, r6, pc}

0800d010 <__sfp_lock_acquire>:
 800d010:	4801      	ldr	r0, [pc, #4]	; (800d018 <__sfp_lock_acquire+0x8>)
 800d012:	f000 b8b3 	b.w	800d17c <__retarget_lock_acquire_recursive>
 800d016:	bf00      	nop
 800d018:	20000a14 	.word	0x20000a14

0800d01c <__sfp_lock_release>:
 800d01c:	4801      	ldr	r0, [pc, #4]	; (800d024 <__sfp_lock_release+0x8>)
 800d01e:	f000 b8ae 	b.w	800d17e <__retarget_lock_release_recursive>
 800d022:	bf00      	nop
 800d024:	20000a14 	.word	0x20000a14

0800d028 <__sinit_lock_acquire>:
 800d028:	4801      	ldr	r0, [pc, #4]	; (800d030 <__sinit_lock_acquire+0x8>)
 800d02a:	f000 b8a7 	b.w	800d17c <__retarget_lock_acquire_recursive>
 800d02e:	bf00      	nop
 800d030:	20000a0f 	.word	0x20000a0f

0800d034 <__sinit_lock_release>:
 800d034:	4801      	ldr	r0, [pc, #4]	; (800d03c <__sinit_lock_release+0x8>)
 800d036:	f000 b8a2 	b.w	800d17e <__retarget_lock_release_recursive>
 800d03a:	bf00      	nop
 800d03c:	20000a0f 	.word	0x20000a0f

0800d040 <__sinit>:
 800d040:	b510      	push	{r4, lr}
 800d042:	4604      	mov	r4, r0
 800d044:	f7ff fff0 	bl	800d028 <__sinit_lock_acquire>
 800d048:	69a3      	ldr	r3, [r4, #24]
 800d04a:	b11b      	cbz	r3, 800d054 <__sinit+0x14>
 800d04c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d050:	f7ff bff0 	b.w	800d034 <__sinit_lock_release>
 800d054:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d058:	6523      	str	r3, [r4, #80]	; 0x50
 800d05a:	4b13      	ldr	r3, [pc, #76]	; (800d0a8 <__sinit+0x68>)
 800d05c:	4a13      	ldr	r2, [pc, #76]	; (800d0ac <__sinit+0x6c>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	62a2      	str	r2, [r4, #40]	; 0x28
 800d062:	42a3      	cmp	r3, r4
 800d064:	bf04      	itt	eq
 800d066:	2301      	moveq	r3, #1
 800d068:	61a3      	streq	r3, [r4, #24]
 800d06a:	4620      	mov	r0, r4
 800d06c:	f000 f820 	bl	800d0b0 <__sfp>
 800d070:	6060      	str	r0, [r4, #4]
 800d072:	4620      	mov	r0, r4
 800d074:	f000 f81c 	bl	800d0b0 <__sfp>
 800d078:	60a0      	str	r0, [r4, #8]
 800d07a:	4620      	mov	r0, r4
 800d07c:	f000 f818 	bl	800d0b0 <__sfp>
 800d080:	2200      	movs	r2, #0
 800d082:	60e0      	str	r0, [r4, #12]
 800d084:	2104      	movs	r1, #4
 800d086:	6860      	ldr	r0, [r4, #4]
 800d088:	f7ff ff82 	bl	800cf90 <std>
 800d08c:	68a0      	ldr	r0, [r4, #8]
 800d08e:	2201      	movs	r2, #1
 800d090:	2109      	movs	r1, #9
 800d092:	f7ff ff7d 	bl	800cf90 <std>
 800d096:	68e0      	ldr	r0, [r4, #12]
 800d098:	2202      	movs	r2, #2
 800d09a:	2112      	movs	r1, #18
 800d09c:	f7ff ff78 	bl	800cf90 <std>
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	61a3      	str	r3, [r4, #24]
 800d0a4:	e7d2      	b.n	800d04c <__sinit+0xc>
 800d0a6:	bf00      	nop
 800d0a8:	0800fd2c 	.word	0x0800fd2c
 800d0ac:	0800cfd9 	.word	0x0800cfd9

0800d0b0 <__sfp>:
 800d0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0b2:	4607      	mov	r7, r0
 800d0b4:	f7ff ffac 	bl	800d010 <__sfp_lock_acquire>
 800d0b8:	4b1e      	ldr	r3, [pc, #120]	; (800d134 <__sfp+0x84>)
 800d0ba:	681e      	ldr	r6, [r3, #0]
 800d0bc:	69b3      	ldr	r3, [r6, #24]
 800d0be:	b913      	cbnz	r3, 800d0c6 <__sfp+0x16>
 800d0c0:	4630      	mov	r0, r6
 800d0c2:	f7ff ffbd 	bl	800d040 <__sinit>
 800d0c6:	3648      	adds	r6, #72	; 0x48
 800d0c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d0cc:	3b01      	subs	r3, #1
 800d0ce:	d503      	bpl.n	800d0d8 <__sfp+0x28>
 800d0d0:	6833      	ldr	r3, [r6, #0]
 800d0d2:	b30b      	cbz	r3, 800d118 <__sfp+0x68>
 800d0d4:	6836      	ldr	r6, [r6, #0]
 800d0d6:	e7f7      	b.n	800d0c8 <__sfp+0x18>
 800d0d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d0dc:	b9d5      	cbnz	r5, 800d114 <__sfp+0x64>
 800d0de:	4b16      	ldr	r3, [pc, #88]	; (800d138 <__sfp+0x88>)
 800d0e0:	60e3      	str	r3, [r4, #12]
 800d0e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d0e6:	6665      	str	r5, [r4, #100]	; 0x64
 800d0e8:	f000 f847 	bl	800d17a <__retarget_lock_init_recursive>
 800d0ec:	f7ff ff96 	bl	800d01c <__sfp_lock_release>
 800d0f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d0f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d0f8:	6025      	str	r5, [r4, #0]
 800d0fa:	61a5      	str	r5, [r4, #24]
 800d0fc:	2208      	movs	r2, #8
 800d0fe:	4629      	mov	r1, r5
 800d100:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d104:	f7fb fd56 	bl	8008bb4 <memset>
 800d108:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d10c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d110:	4620      	mov	r0, r4
 800d112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d114:	3468      	adds	r4, #104	; 0x68
 800d116:	e7d9      	b.n	800d0cc <__sfp+0x1c>
 800d118:	2104      	movs	r1, #4
 800d11a:	4638      	mov	r0, r7
 800d11c:	f7ff ff62 	bl	800cfe4 <__sfmoreglue>
 800d120:	4604      	mov	r4, r0
 800d122:	6030      	str	r0, [r6, #0]
 800d124:	2800      	cmp	r0, #0
 800d126:	d1d5      	bne.n	800d0d4 <__sfp+0x24>
 800d128:	f7ff ff78 	bl	800d01c <__sfp_lock_release>
 800d12c:	230c      	movs	r3, #12
 800d12e:	603b      	str	r3, [r7, #0]
 800d130:	e7ee      	b.n	800d110 <__sfp+0x60>
 800d132:	bf00      	nop
 800d134:	0800fd2c 	.word	0x0800fd2c
 800d138:	ffff0001 	.word	0xffff0001

0800d13c <_fwalk_reent>:
 800d13c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d140:	4606      	mov	r6, r0
 800d142:	4688      	mov	r8, r1
 800d144:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d148:	2700      	movs	r7, #0
 800d14a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d14e:	f1b9 0901 	subs.w	r9, r9, #1
 800d152:	d505      	bpl.n	800d160 <_fwalk_reent+0x24>
 800d154:	6824      	ldr	r4, [r4, #0]
 800d156:	2c00      	cmp	r4, #0
 800d158:	d1f7      	bne.n	800d14a <_fwalk_reent+0xe>
 800d15a:	4638      	mov	r0, r7
 800d15c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d160:	89ab      	ldrh	r3, [r5, #12]
 800d162:	2b01      	cmp	r3, #1
 800d164:	d907      	bls.n	800d176 <_fwalk_reent+0x3a>
 800d166:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d16a:	3301      	adds	r3, #1
 800d16c:	d003      	beq.n	800d176 <_fwalk_reent+0x3a>
 800d16e:	4629      	mov	r1, r5
 800d170:	4630      	mov	r0, r6
 800d172:	47c0      	blx	r8
 800d174:	4307      	orrs	r7, r0
 800d176:	3568      	adds	r5, #104	; 0x68
 800d178:	e7e9      	b.n	800d14e <_fwalk_reent+0x12>

0800d17a <__retarget_lock_init_recursive>:
 800d17a:	4770      	bx	lr

0800d17c <__retarget_lock_acquire_recursive>:
 800d17c:	4770      	bx	lr

0800d17e <__retarget_lock_release_recursive>:
 800d17e:	4770      	bx	lr

0800d180 <__swhatbuf_r>:
 800d180:	b570      	push	{r4, r5, r6, lr}
 800d182:	460e      	mov	r6, r1
 800d184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d188:	2900      	cmp	r1, #0
 800d18a:	b096      	sub	sp, #88	; 0x58
 800d18c:	4614      	mov	r4, r2
 800d18e:	461d      	mov	r5, r3
 800d190:	da07      	bge.n	800d1a2 <__swhatbuf_r+0x22>
 800d192:	2300      	movs	r3, #0
 800d194:	602b      	str	r3, [r5, #0]
 800d196:	89b3      	ldrh	r3, [r6, #12]
 800d198:	061a      	lsls	r2, r3, #24
 800d19a:	d410      	bmi.n	800d1be <__swhatbuf_r+0x3e>
 800d19c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1a0:	e00e      	b.n	800d1c0 <__swhatbuf_r+0x40>
 800d1a2:	466a      	mov	r2, sp
 800d1a4:	f000 f902 	bl	800d3ac <_fstat_r>
 800d1a8:	2800      	cmp	r0, #0
 800d1aa:	dbf2      	blt.n	800d192 <__swhatbuf_r+0x12>
 800d1ac:	9a01      	ldr	r2, [sp, #4]
 800d1ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d1b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d1b6:	425a      	negs	r2, r3
 800d1b8:	415a      	adcs	r2, r3
 800d1ba:	602a      	str	r2, [r5, #0]
 800d1bc:	e7ee      	b.n	800d19c <__swhatbuf_r+0x1c>
 800d1be:	2340      	movs	r3, #64	; 0x40
 800d1c0:	2000      	movs	r0, #0
 800d1c2:	6023      	str	r3, [r4, #0]
 800d1c4:	b016      	add	sp, #88	; 0x58
 800d1c6:	bd70      	pop	{r4, r5, r6, pc}

0800d1c8 <__smakebuf_r>:
 800d1c8:	898b      	ldrh	r3, [r1, #12]
 800d1ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d1cc:	079d      	lsls	r5, r3, #30
 800d1ce:	4606      	mov	r6, r0
 800d1d0:	460c      	mov	r4, r1
 800d1d2:	d507      	bpl.n	800d1e4 <__smakebuf_r+0x1c>
 800d1d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d1d8:	6023      	str	r3, [r4, #0]
 800d1da:	6123      	str	r3, [r4, #16]
 800d1dc:	2301      	movs	r3, #1
 800d1de:	6163      	str	r3, [r4, #20]
 800d1e0:	b002      	add	sp, #8
 800d1e2:	bd70      	pop	{r4, r5, r6, pc}
 800d1e4:	ab01      	add	r3, sp, #4
 800d1e6:	466a      	mov	r2, sp
 800d1e8:	f7ff ffca 	bl	800d180 <__swhatbuf_r>
 800d1ec:	9900      	ldr	r1, [sp, #0]
 800d1ee:	4605      	mov	r5, r0
 800d1f0:	4630      	mov	r0, r6
 800d1f2:	f7ff f97f 	bl	800c4f4 <_malloc_r>
 800d1f6:	b948      	cbnz	r0, 800d20c <__smakebuf_r+0x44>
 800d1f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1fc:	059a      	lsls	r2, r3, #22
 800d1fe:	d4ef      	bmi.n	800d1e0 <__smakebuf_r+0x18>
 800d200:	f023 0303 	bic.w	r3, r3, #3
 800d204:	f043 0302 	orr.w	r3, r3, #2
 800d208:	81a3      	strh	r3, [r4, #12]
 800d20a:	e7e3      	b.n	800d1d4 <__smakebuf_r+0xc>
 800d20c:	4b0d      	ldr	r3, [pc, #52]	; (800d244 <__smakebuf_r+0x7c>)
 800d20e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d210:	89a3      	ldrh	r3, [r4, #12]
 800d212:	6020      	str	r0, [r4, #0]
 800d214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d218:	81a3      	strh	r3, [r4, #12]
 800d21a:	9b00      	ldr	r3, [sp, #0]
 800d21c:	6163      	str	r3, [r4, #20]
 800d21e:	9b01      	ldr	r3, [sp, #4]
 800d220:	6120      	str	r0, [r4, #16]
 800d222:	b15b      	cbz	r3, 800d23c <__smakebuf_r+0x74>
 800d224:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d228:	4630      	mov	r0, r6
 800d22a:	f000 f8d1 	bl	800d3d0 <_isatty_r>
 800d22e:	b128      	cbz	r0, 800d23c <__smakebuf_r+0x74>
 800d230:	89a3      	ldrh	r3, [r4, #12]
 800d232:	f023 0303 	bic.w	r3, r3, #3
 800d236:	f043 0301 	orr.w	r3, r3, #1
 800d23a:	81a3      	strh	r3, [r4, #12]
 800d23c:	89a0      	ldrh	r0, [r4, #12]
 800d23e:	4305      	orrs	r5, r0
 800d240:	81a5      	strh	r5, [r4, #12]
 800d242:	e7cd      	b.n	800d1e0 <__smakebuf_r+0x18>
 800d244:	0800cfd9 	.word	0x0800cfd9

0800d248 <_malloc_usable_size_r>:
 800d248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d24c:	1f18      	subs	r0, r3, #4
 800d24e:	2b00      	cmp	r3, #0
 800d250:	bfbc      	itt	lt
 800d252:	580b      	ldrlt	r3, [r1, r0]
 800d254:	18c0      	addlt	r0, r0, r3
 800d256:	4770      	bx	lr

0800d258 <_raise_r>:
 800d258:	291f      	cmp	r1, #31
 800d25a:	b538      	push	{r3, r4, r5, lr}
 800d25c:	4604      	mov	r4, r0
 800d25e:	460d      	mov	r5, r1
 800d260:	d904      	bls.n	800d26c <_raise_r+0x14>
 800d262:	2316      	movs	r3, #22
 800d264:	6003      	str	r3, [r0, #0]
 800d266:	f04f 30ff 	mov.w	r0, #4294967295
 800d26a:	bd38      	pop	{r3, r4, r5, pc}
 800d26c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d26e:	b112      	cbz	r2, 800d276 <_raise_r+0x1e>
 800d270:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d274:	b94b      	cbnz	r3, 800d28a <_raise_r+0x32>
 800d276:	4620      	mov	r0, r4
 800d278:	f000 f830 	bl	800d2dc <_getpid_r>
 800d27c:	462a      	mov	r2, r5
 800d27e:	4601      	mov	r1, r0
 800d280:	4620      	mov	r0, r4
 800d282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d286:	f000 b817 	b.w	800d2b8 <_kill_r>
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	d00a      	beq.n	800d2a4 <_raise_r+0x4c>
 800d28e:	1c59      	adds	r1, r3, #1
 800d290:	d103      	bne.n	800d29a <_raise_r+0x42>
 800d292:	2316      	movs	r3, #22
 800d294:	6003      	str	r3, [r0, #0]
 800d296:	2001      	movs	r0, #1
 800d298:	e7e7      	b.n	800d26a <_raise_r+0x12>
 800d29a:	2400      	movs	r4, #0
 800d29c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d2a0:	4628      	mov	r0, r5
 800d2a2:	4798      	blx	r3
 800d2a4:	2000      	movs	r0, #0
 800d2a6:	e7e0      	b.n	800d26a <_raise_r+0x12>

0800d2a8 <raise>:
 800d2a8:	4b02      	ldr	r3, [pc, #8]	; (800d2b4 <raise+0xc>)
 800d2aa:	4601      	mov	r1, r0
 800d2ac:	6818      	ldr	r0, [r3, #0]
 800d2ae:	f7ff bfd3 	b.w	800d258 <_raise_r>
 800d2b2:	bf00      	nop
 800d2b4:	2000003c 	.word	0x2000003c

0800d2b8 <_kill_r>:
 800d2b8:	b538      	push	{r3, r4, r5, lr}
 800d2ba:	4d07      	ldr	r5, [pc, #28]	; (800d2d8 <_kill_r+0x20>)
 800d2bc:	2300      	movs	r3, #0
 800d2be:	4604      	mov	r4, r0
 800d2c0:	4608      	mov	r0, r1
 800d2c2:	4611      	mov	r1, r2
 800d2c4:	602b      	str	r3, [r5, #0]
 800d2c6:	f7f6 fb7d 	bl	80039c4 <_kill>
 800d2ca:	1c43      	adds	r3, r0, #1
 800d2cc:	d102      	bne.n	800d2d4 <_kill_r+0x1c>
 800d2ce:	682b      	ldr	r3, [r5, #0]
 800d2d0:	b103      	cbz	r3, 800d2d4 <_kill_r+0x1c>
 800d2d2:	6023      	str	r3, [r4, #0]
 800d2d4:	bd38      	pop	{r3, r4, r5, pc}
 800d2d6:	bf00      	nop
 800d2d8:	20000a08 	.word	0x20000a08

0800d2dc <_getpid_r>:
 800d2dc:	f7f6 bb6a 	b.w	80039b4 <_getpid>

0800d2e0 <__sread>:
 800d2e0:	b510      	push	{r4, lr}
 800d2e2:	460c      	mov	r4, r1
 800d2e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2e8:	f000 f894 	bl	800d414 <_read_r>
 800d2ec:	2800      	cmp	r0, #0
 800d2ee:	bfab      	itete	ge
 800d2f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d2f2:	89a3      	ldrhlt	r3, [r4, #12]
 800d2f4:	181b      	addge	r3, r3, r0
 800d2f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d2fa:	bfac      	ite	ge
 800d2fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800d2fe:	81a3      	strhlt	r3, [r4, #12]
 800d300:	bd10      	pop	{r4, pc}

0800d302 <__swrite>:
 800d302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d306:	461f      	mov	r7, r3
 800d308:	898b      	ldrh	r3, [r1, #12]
 800d30a:	05db      	lsls	r3, r3, #23
 800d30c:	4605      	mov	r5, r0
 800d30e:	460c      	mov	r4, r1
 800d310:	4616      	mov	r6, r2
 800d312:	d505      	bpl.n	800d320 <__swrite+0x1e>
 800d314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d318:	2302      	movs	r3, #2
 800d31a:	2200      	movs	r2, #0
 800d31c:	f000 f868 	bl	800d3f0 <_lseek_r>
 800d320:	89a3      	ldrh	r3, [r4, #12]
 800d322:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d326:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d32a:	81a3      	strh	r3, [r4, #12]
 800d32c:	4632      	mov	r2, r6
 800d32e:	463b      	mov	r3, r7
 800d330:	4628      	mov	r0, r5
 800d332:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d336:	f000 b817 	b.w	800d368 <_write_r>

0800d33a <__sseek>:
 800d33a:	b510      	push	{r4, lr}
 800d33c:	460c      	mov	r4, r1
 800d33e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d342:	f000 f855 	bl	800d3f0 <_lseek_r>
 800d346:	1c43      	adds	r3, r0, #1
 800d348:	89a3      	ldrh	r3, [r4, #12]
 800d34a:	bf15      	itete	ne
 800d34c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d34e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d352:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d356:	81a3      	strheq	r3, [r4, #12]
 800d358:	bf18      	it	ne
 800d35a:	81a3      	strhne	r3, [r4, #12]
 800d35c:	bd10      	pop	{r4, pc}

0800d35e <__sclose>:
 800d35e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d362:	f000 b813 	b.w	800d38c <_close_r>
	...

0800d368 <_write_r>:
 800d368:	b538      	push	{r3, r4, r5, lr}
 800d36a:	4d07      	ldr	r5, [pc, #28]	; (800d388 <_write_r+0x20>)
 800d36c:	4604      	mov	r4, r0
 800d36e:	4608      	mov	r0, r1
 800d370:	4611      	mov	r1, r2
 800d372:	2200      	movs	r2, #0
 800d374:	602a      	str	r2, [r5, #0]
 800d376:	461a      	mov	r2, r3
 800d378:	f7f6 fb5b 	bl	8003a32 <_write>
 800d37c:	1c43      	adds	r3, r0, #1
 800d37e:	d102      	bne.n	800d386 <_write_r+0x1e>
 800d380:	682b      	ldr	r3, [r5, #0]
 800d382:	b103      	cbz	r3, 800d386 <_write_r+0x1e>
 800d384:	6023      	str	r3, [r4, #0]
 800d386:	bd38      	pop	{r3, r4, r5, pc}
 800d388:	20000a08 	.word	0x20000a08

0800d38c <_close_r>:
 800d38c:	b538      	push	{r3, r4, r5, lr}
 800d38e:	4d06      	ldr	r5, [pc, #24]	; (800d3a8 <_close_r+0x1c>)
 800d390:	2300      	movs	r3, #0
 800d392:	4604      	mov	r4, r0
 800d394:	4608      	mov	r0, r1
 800d396:	602b      	str	r3, [r5, #0]
 800d398:	f7f6 fb67 	bl	8003a6a <_close>
 800d39c:	1c43      	adds	r3, r0, #1
 800d39e:	d102      	bne.n	800d3a6 <_close_r+0x1a>
 800d3a0:	682b      	ldr	r3, [r5, #0]
 800d3a2:	b103      	cbz	r3, 800d3a6 <_close_r+0x1a>
 800d3a4:	6023      	str	r3, [r4, #0]
 800d3a6:	bd38      	pop	{r3, r4, r5, pc}
 800d3a8:	20000a08 	.word	0x20000a08

0800d3ac <_fstat_r>:
 800d3ac:	b538      	push	{r3, r4, r5, lr}
 800d3ae:	4d07      	ldr	r5, [pc, #28]	; (800d3cc <_fstat_r+0x20>)
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	4604      	mov	r4, r0
 800d3b4:	4608      	mov	r0, r1
 800d3b6:	4611      	mov	r1, r2
 800d3b8:	602b      	str	r3, [r5, #0]
 800d3ba:	f7f6 fb62 	bl	8003a82 <_fstat>
 800d3be:	1c43      	adds	r3, r0, #1
 800d3c0:	d102      	bne.n	800d3c8 <_fstat_r+0x1c>
 800d3c2:	682b      	ldr	r3, [r5, #0]
 800d3c4:	b103      	cbz	r3, 800d3c8 <_fstat_r+0x1c>
 800d3c6:	6023      	str	r3, [r4, #0]
 800d3c8:	bd38      	pop	{r3, r4, r5, pc}
 800d3ca:	bf00      	nop
 800d3cc:	20000a08 	.word	0x20000a08

0800d3d0 <_isatty_r>:
 800d3d0:	b538      	push	{r3, r4, r5, lr}
 800d3d2:	4d06      	ldr	r5, [pc, #24]	; (800d3ec <_isatty_r+0x1c>)
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	4604      	mov	r4, r0
 800d3d8:	4608      	mov	r0, r1
 800d3da:	602b      	str	r3, [r5, #0]
 800d3dc:	f7f6 fb61 	bl	8003aa2 <_isatty>
 800d3e0:	1c43      	adds	r3, r0, #1
 800d3e2:	d102      	bne.n	800d3ea <_isatty_r+0x1a>
 800d3e4:	682b      	ldr	r3, [r5, #0]
 800d3e6:	b103      	cbz	r3, 800d3ea <_isatty_r+0x1a>
 800d3e8:	6023      	str	r3, [r4, #0]
 800d3ea:	bd38      	pop	{r3, r4, r5, pc}
 800d3ec:	20000a08 	.word	0x20000a08

0800d3f0 <_lseek_r>:
 800d3f0:	b538      	push	{r3, r4, r5, lr}
 800d3f2:	4d07      	ldr	r5, [pc, #28]	; (800d410 <_lseek_r+0x20>)
 800d3f4:	4604      	mov	r4, r0
 800d3f6:	4608      	mov	r0, r1
 800d3f8:	4611      	mov	r1, r2
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	602a      	str	r2, [r5, #0]
 800d3fe:	461a      	mov	r2, r3
 800d400:	f7f6 fb5a 	bl	8003ab8 <_lseek>
 800d404:	1c43      	adds	r3, r0, #1
 800d406:	d102      	bne.n	800d40e <_lseek_r+0x1e>
 800d408:	682b      	ldr	r3, [r5, #0]
 800d40a:	b103      	cbz	r3, 800d40e <_lseek_r+0x1e>
 800d40c:	6023      	str	r3, [r4, #0]
 800d40e:	bd38      	pop	{r3, r4, r5, pc}
 800d410:	20000a08 	.word	0x20000a08

0800d414 <_read_r>:
 800d414:	b538      	push	{r3, r4, r5, lr}
 800d416:	4d07      	ldr	r5, [pc, #28]	; (800d434 <_read_r+0x20>)
 800d418:	4604      	mov	r4, r0
 800d41a:	4608      	mov	r0, r1
 800d41c:	4611      	mov	r1, r2
 800d41e:	2200      	movs	r2, #0
 800d420:	602a      	str	r2, [r5, #0]
 800d422:	461a      	mov	r2, r3
 800d424:	f7f6 fae8 	bl	80039f8 <_read>
 800d428:	1c43      	adds	r3, r0, #1
 800d42a:	d102      	bne.n	800d432 <_read_r+0x1e>
 800d42c:	682b      	ldr	r3, [r5, #0]
 800d42e:	b103      	cbz	r3, 800d432 <_read_r+0x1e>
 800d430:	6023      	str	r3, [r4, #0]
 800d432:	bd38      	pop	{r3, r4, r5, pc}
 800d434:	20000a08 	.word	0x20000a08

0800d438 <atan>:
 800d438:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d43c:	ec55 4b10 	vmov	r4, r5, d0
 800d440:	4bc3      	ldr	r3, [pc, #780]	; (800d750 <atan+0x318>)
 800d442:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d446:	429e      	cmp	r6, r3
 800d448:	46ab      	mov	fp, r5
 800d44a:	dd18      	ble.n	800d47e <atan+0x46>
 800d44c:	4bc1      	ldr	r3, [pc, #772]	; (800d754 <atan+0x31c>)
 800d44e:	429e      	cmp	r6, r3
 800d450:	dc01      	bgt.n	800d456 <atan+0x1e>
 800d452:	d109      	bne.n	800d468 <atan+0x30>
 800d454:	b144      	cbz	r4, 800d468 <atan+0x30>
 800d456:	4622      	mov	r2, r4
 800d458:	462b      	mov	r3, r5
 800d45a:	4620      	mov	r0, r4
 800d45c:	4629      	mov	r1, r5
 800d45e:	f7f2 ff3d 	bl	80002dc <__adddf3>
 800d462:	4604      	mov	r4, r0
 800d464:	460d      	mov	r5, r1
 800d466:	e006      	b.n	800d476 <atan+0x3e>
 800d468:	f1bb 0f00 	cmp.w	fp, #0
 800d46c:	f300 8131 	bgt.w	800d6d2 <atan+0x29a>
 800d470:	a59b      	add	r5, pc, #620	; (adr r5, 800d6e0 <atan+0x2a8>)
 800d472:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d476:	ec45 4b10 	vmov	d0, r4, r5
 800d47a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d47e:	4bb6      	ldr	r3, [pc, #728]	; (800d758 <atan+0x320>)
 800d480:	429e      	cmp	r6, r3
 800d482:	dc14      	bgt.n	800d4ae <atan+0x76>
 800d484:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d488:	429e      	cmp	r6, r3
 800d48a:	dc0d      	bgt.n	800d4a8 <atan+0x70>
 800d48c:	a396      	add	r3, pc, #600	; (adr r3, 800d6e8 <atan+0x2b0>)
 800d48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d492:	ee10 0a10 	vmov	r0, s0
 800d496:	4629      	mov	r1, r5
 800d498:	f7f2 ff20 	bl	80002dc <__adddf3>
 800d49c:	4baf      	ldr	r3, [pc, #700]	; (800d75c <atan+0x324>)
 800d49e:	2200      	movs	r2, #0
 800d4a0:	f7f3 fb62 	bl	8000b68 <__aeabi_dcmpgt>
 800d4a4:	2800      	cmp	r0, #0
 800d4a6:	d1e6      	bne.n	800d476 <atan+0x3e>
 800d4a8:	f04f 3aff 	mov.w	sl, #4294967295
 800d4ac:	e02b      	b.n	800d506 <atan+0xce>
 800d4ae:	f000 fa37 	bl	800d920 <fabs>
 800d4b2:	4bab      	ldr	r3, [pc, #684]	; (800d760 <atan+0x328>)
 800d4b4:	429e      	cmp	r6, r3
 800d4b6:	ec55 4b10 	vmov	r4, r5, d0
 800d4ba:	f300 80bf 	bgt.w	800d63c <atan+0x204>
 800d4be:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d4c2:	429e      	cmp	r6, r3
 800d4c4:	f300 80a0 	bgt.w	800d608 <atan+0x1d0>
 800d4c8:	ee10 2a10 	vmov	r2, s0
 800d4cc:	ee10 0a10 	vmov	r0, s0
 800d4d0:	462b      	mov	r3, r5
 800d4d2:	4629      	mov	r1, r5
 800d4d4:	f7f2 ff02 	bl	80002dc <__adddf3>
 800d4d8:	4ba0      	ldr	r3, [pc, #640]	; (800d75c <atan+0x324>)
 800d4da:	2200      	movs	r2, #0
 800d4dc:	f7f2 fefc 	bl	80002d8 <__aeabi_dsub>
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	4606      	mov	r6, r0
 800d4e4:	460f      	mov	r7, r1
 800d4e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d4ea:	4620      	mov	r0, r4
 800d4ec:	4629      	mov	r1, r5
 800d4ee:	f7f2 fef5 	bl	80002dc <__adddf3>
 800d4f2:	4602      	mov	r2, r0
 800d4f4:	460b      	mov	r3, r1
 800d4f6:	4630      	mov	r0, r6
 800d4f8:	4639      	mov	r1, r7
 800d4fa:	f7f3 f9cf 	bl	800089c <__aeabi_ddiv>
 800d4fe:	f04f 0a00 	mov.w	sl, #0
 800d502:	4604      	mov	r4, r0
 800d504:	460d      	mov	r5, r1
 800d506:	4622      	mov	r2, r4
 800d508:	462b      	mov	r3, r5
 800d50a:	4620      	mov	r0, r4
 800d50c:	4629      	mov	r1, r5
 800d50e:	f7f3 f89b 	bl	8000648 <__aeabi_dmul>
 800d512:	4602      	mov	r2, r0
 800d514:	460b      	mov	r3, r1
 800d516:	4680      	mov	r8, r0
 800d518:	4689      	mov	r9, r1
 800d51a:	f7f3 f895 	bl	8000648 <__aeabi_dmul>
 800d51e:	a374      	add	r3, pc, #464	; (adr r3, 800d6f0 <atan+0x2b8>)
 800d520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d524:	4606      	mov	r6, r0
 800d526:	460f      	mov	r7, r1
 800d528:	f7f3 f88e 	bl	8000648 <__aeabi_dmul>
 800d52c:	a372      	add	r3, pc, #456	; (adr r3, 800d6f8 <atan+0x2c0>)
 800d52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d532:	f7f2 fed3 	bl	80002dc <__adddf3>
 800d536:	4632      	mov	r2, r6
 800d538:	463b      	mov	r3, r7
 800d53a:	f7f3 f885 	bl	8000648 <__aeabi_dmul>
 800d53e:	a370      	add	r3, pc, #448	; (adr r3, 800d700 <atan+0x2c8>)
 800d540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d544:	f7f2 feca 	bl	80002dc <__adddf3>
 800d548:	4632      	mov	r2, r6
 800d54a:	463b      	mov	r3, r7
 800d54c:	f7f3 f87c 	bl	8000648 <__aeabi_dmul>
 800d550:	a36d      	add	r3, pc, #436	; (adr r3, 800d708 <atan+0x2d0>)
 800d552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d556:	f7f2 fec1 	bl	80002dc <__adddf3>
 800d55a:	4632      	mov	r2, r6
 800d55c:	463b      	mov	r3, r7
 800d55e:	f7f3 f873 	bl	8000648 <__aeabi_dmul>
 800d562:	a36b      	add	r3, pc, #428	; (adr r3, 800d710 <atan+0x2d8>)
 800d564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d568:	f7f2 feb8 	bl	80002dc <__adddf3>
 800d56c:	4632      	mov	r2, r6
 800d56e:	463b      	mov	r3, r7
 800d570:	f7f3 f86a 	bl	8000648 <__aeabi_dmul>
 800d574:	a368      	add	r3, pc, #416	; (adr r3, 800d718 <atan+0x2e0>)
 800d576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d57a:	f7f2 feaf 	bl	80002dc <__adddf3>
 800d57e:	4642      	mov	r2, r8
 800d580:	464b      	mov	r3, r9
 800d582:	f7f3 f861 	bl	8000648 <__aeabi_dmul>
 800d586:	a366      	add	r3, pc, #408	; (adr r3, 800d720 <atan+0x2e8>)
 800d588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d58c:	4680      	mov	r8, r0
 800d58e:	4689      	mov	r9, r1
 800d590:	4630      	mov	r0, r6
 800d592:	4639      	mov	r1, r7
 800d594:	f7f3 f858 	bl	8000648 <__aeabi_dmul>
 800d598:	a363      	add	r3, pc, #396	; (adr r3, 800d728 <atan+0x2f0>)
 800d59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d59e:	f7f2 fe9b 	bl	80002d8 <__aeabi_dsub>
 800d5a2:	4632      	mov	r2, r6
 800d5a4:	463b      	mov	r3, r7
 800d5a6:	f7f3 f84f 	bl	8000648 <__aeabi_dmul>
 800d5aa:	a361      	add	r3, pc, #388	; (adr r3, 800d730 <atan+0x2f8>)
 800d5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b0:	f7f2 fe92 	bl	80002d8 <__aeabi_dsub>
 800d5b4:	4632      	mov	r2, r6
 800d5b6:	463b      	mov	r3, r7
 800d5b8:	f7f3 f846 	bl	8000648 <__aeabi_dmul>
 800d5bc:	a35e      	add	r3, pc, #376	; (adr r3, 800d738 <atan+0x300>)
 800d5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c2:	f7f2 fe89 	bl	80002d8 <__aeabi_dsub>
 800d5c6:	4632      	mov	r2, r6
 800d5c8:	463b      	mov	r3, r7
 800d5ca:	f7f3 f83d 	bl	8000648 <__aeabi_dmul>
 800d5ce:	a35c      	add	r3, pc, #368	; (adr r3, 800d740 <atan+0x308>)
 800d5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d4:	f7f2 fe80 	bl	80002d8 <__aeabi_dsub>
 800d5d8:	4632      	mov	r2, r6
 800d5da:	463b      	mov	r3, r7
 800d5dc:	f7f3 f834 	bl	8000648 <__aeabi_dmul>
 800d5e0:	4602      	mov	r2, r0
 800d5e2:	460b      	mov	r3, r1
 800d5e4:	4640      	mov	r0, r8
 800d5e6:	4649      	mov	r1, r9
 800d5e8:	f7f2 fe78 	bl	80002dc <__adddf3>
 800d5ec:	4622      	mov	r2, r4
 800d5ee:	462b      	mov	r3, r5
 800d5f0:	f7f3 f82a 	bl	8000648 <__aeabi_dmul>
 800d5f4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d5f8:	4602      	mov	r2, r0
 800d5fa:	460b      	mov	r3, r1
 800d5fc:	d14b      	bne.n	800d696 <atan+0x25e>
 800d5fe:	4620      	mov	r0, r4
 800d600:	4629      	mov	r1, r5
 800d602:	f7f2 fe69 	bl	80002d8 <__aeabi_dsub>
 800d606:	e72c      	b.n	800d462 <atan+0x2a>
 800d608:	ee10 0a10 	vmov	r0, s0
 800d60c:	4b53      	ldr	r3, [pc, #332]	; (800d75c <atan+0x324>)
 800d60e:	2200      	movs	r2, #0
 800d610:	4629      	mov	r1, r5
 800d612:	f7f2 fe61 	bl	80002d8 <__aeabi_dsub>
 800d616:	4b51      	ldr	r3, [pc, #324]	; (800d75c <atan+0x324>)
 800d618:	4606      	mov	r6, r0
 800d61a:	460f      	mov	r7, r1
 800d61c:	2200      	movs	r2, #0
 800d61e:	4620      	mov	r0, r4
 800d620:	4629      	mov	r1, r5
 800d622:	f7f2 fe5b 	bl	80002dc <__adddf3>
 800d626:	4602      	mov	r2, r0
 800d628:	460b      	mov	r3, r1
 800d62a:	4630      	mov	r0, r6
 800d62c:	4639      	mov	r1, r7
 800d62e:	f7f3 f935 	bl	800089c <__aeabi_ddiv>
 800d632:	f04f 0a01 	mov.w	sl, #1
 800d636:	4604      	mov	r4, r0
 800d638:	460d      	mov	r5, r1
 800d63a:	e764      	b.n	800d506 <atan+0xce>
 800d63c:	4b49      	ldr	r3, [pc, #292]	; (800d764 <atan+0x32c>)
 800d63e:	429e      	cmp	r6, r3
 800d640:	da1d      	bge.n	800d67e <atan+0x246>
 800d642:	ee10 0a10 	vmov	r0, s0
 800d646:	4b48      	ldr	r3, [pc, #288]	; (800d768 <atan+0x330>)
 800d648:	2200      	movs	r2, #0
 800d64a:	4629      	mov	r1, r5
 800d64c:	f7f2 fe44 	bl	80002d8 <__aeabi_dsub>
 800d650:	4b45      	ldr	r3, [pc, #276]	; (800d768 <atan+0x330>)
 800d652:	4606      	mov	r6, r0
 800d654:	460f      	mov	r7, r1
 800d656:	2200      	movs	r2, #0
 800d658:	4620      	mov	r0, r4
 800d65a:	4629      	mov	r1, r5
 800d65c:	f7f2 fff4 	bl	8000648 <__aeabi_dmul>
 800d660:	4b3e      	ldr	r3, [pc, #248]	; (800d75c <atan+0x324>)
 800d662:	2200      	movs	r2, #0
 800d664:	f7f2 fe3a 	bl	80002dc <__adddf3>
 800d668:	4602      	mov	r2, r0
 800d66a:	460b      	mov	r3, r1
 800d66c:	4630      	mov	r0, r6
 800d66e:	4639      	mov	r1, r7
 800d670:	f7f3 f914 	bl	800089c <__aeabi_ddiv>
 800d674:	f04f 0a02 	mov.w	sl, #2
 800d678:	4604      	mov	r4, r0
 800d67a:	460d      	mov	r5, r1
 800d67c:	e743      	b.n	800d506 <atan+0xce>
 800d67e:	462b      	mov	r3, r5
 800d680:	ee10 2a10 	vmov	r2, s0
 800d684:	4939      	ldr	r1, [pc, #228]	; (800d76c <atan+0x334>)
 800d686:	2000      	movs	r0, #0
 800d688:	f7f3 f908 	bl	800089c <__aeabi_ddiv>
 800d68c:	f04f 0a03 	mov.w	sl, #3
 800d690:	4604      	mov	r4, r0
 800d692:	460d      	mov	r5, r1
 800d694:	e737      	b.n	800d506 <atan+0xce>
 800d696:	4b36      	ldr	r3, [pc, #216]	; (800d770 <atan+0x338>)
 800d698:	4e36      	ldr	r6, [pc, #216]	; (800d774 <atan+0x33c>)
 800d69a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d69e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800d6a2:	e9da 2300 	ldrd	r2, r3, [sl]
 800d6a6:	f7f2 fe17 	bl	80002d8 <__aeabi_dsub>
 800d6aa:	4622      	mov	r2, r4
 800d6ac:	462b      	mov	r3, r5
 800d6ae:	f7f2 fe13 	bl	80002d8 <__aeabi_dsub>
 800d6b2:	4602      	mov	r2, r0
 800d6b4:	460b      	mov	r3, r1
 800d6b6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d6ba:	f7f2 fe0d 	bl	80002d8 <__aeabi_dsub>
 800d6be:	f1bb 0f00 	cmp.w	fp, #0
 800d6c2:	4604      	mov	r4, r0
 800d6c4:	460d      	mov	r5, r1
 800d6c6:	f6bf aed6 	bge.w	800d476 <atan+0x3e>
 800d6ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d6ce:	461d      	mov	r5, r3
 800d6d0:	e6d1      	b.n	800d476 <atan+0x3e>
 800d6d2:	a51d      	add	r5, pc, #116	; (adr r5, 800d748 <atan+0x310>)
 800d6d4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d6d8:	e6cd      	b.n	800d476 <atan+0x3e>
 800d6da:	bf00      	nop
 800d6dc:	f3af 8000 	nop.w
 800d6e0:	54442d18 	.word	0x54442d18
 800d6e4:	bff921fb 	.word	0xbff921fb
 800d6e8:	8800759c 	.word	0x8800759c
 800d6ec:	7e37e43c 	.word	0x7e37e43c
 800d6f0:	e322da11 	.word	0xe322da11
 800d6f4:	3f90ad3a 	.word	0x3f90ad3a
 800d6f8:	24760deb 	.word	0x24760deb
 800d6fc:	3fa97b4b 	.word	0x3fa97b4b
 800d700:	a0d03d51 	.word	0xa0d03d51
 800d704:	3fb10d66 	.word	0x3fb10d66
 800d708:	c54c206e 	.word	0xc54c206e
 800d70c:	3fb745cd 	.word	0x3fb745cd
 800d710:	920083ff 	.word	0x920083ff
 800d714:	3fc24924 	.word	0x3fc24924
 800d718:	5555550d 	.word	0x5555550d
 800d71c:	3fd55555 	.word	0x3fd55555
 800d720:	2c6a6c2f 	.word	0x2c6a6c2f
 800d724:	bfa2b444 	.word	0xbfa2b444
 800d728:	52defd9a 	.word	0x52defd9a
 800d72c:	3fadde2d 	.word	0x3fadde2d
 800d730:	af749a6d 	.word	0xaf749a6d
 800d734:	3fb3b0f2 	.word	0x3fb3b0f2
 800d738:	fe231671 	.word	0xfe231671
 800d73c:	3fbc71c6 	.word	0x3fbc71c6
 800d740:	9998ebc4 	.word	0x9998ebc4
 800d744:	3fc99999 	.word	0x3fc99999
 800d748:	54442d18 	.word	0x54442d18
 800d74c:	3ff921fb 	.word	0x3ff921fb
 800d750:	440fffff 	.word	0x440fffff
 800d754:	7ff00000 	.word	0x7ff00000
 800d758:	3fdbffff 	.word	0x3fdbffff
 800d75c:	3ff00000 	.word	0x3ff00000
 800d760:	3ff2ffff 	.word	0x3ff2ffff
 800d764:	40038000 	.word	0x40038000
 800d768:	3ff80000 	.word	0x3ff80000
 800d76c:	bff00000 	.word	0xbff00000
 800d770:	08010208 	.word	0x08010208
 800d774:	080101e8 	.word	0x080101e8

0800d778 <ceil>:
 800d778:	ec51 0b10 	vmov	r0, r1, d0
 800d77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d780:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d784:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d788:	2e13      	cmp	r6, #19
 800d78a:	ee10 5a10 	vmov	r5, s0
 800d78e:	ee10 8a10 	vmov	r8, s0
 800d792:	460c      	mov	r4, r1
 800d794:	dc30      	bgt.n	800d7f8 <ceil+0x80>
 800d796:	2e00      	cmp	r6, #0
 800d798:	da12      	bge.n	800d7c0 <ceil+0x48>
 800d79a:	a335      	add	r3, pc, #212	; (adr r3, 800d870 <ceil+0xf8>)
 800d79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a0:	f7f2 fd9c 	bl	80002dc <__adddf3>
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	f7f3 f9de 	bl	8000b68 <__aeabi_dcmpgt>
 800d7ac:	b128      	cbz	r0, 800d7ba <ceil+0x42>
 800d7ae:	2c00      	cmp	r4, #0
 800d7b0:	db55      	blt.n	800d85e <ceil+0xe6>
 800d7b2:	432c      	orrs	r4, r5
 800d7b4:	d057      	beq.n	800d866 <ceil+0xee>
 800d7b6:	4c30      	ldr	r4, [pc, #192]	; (800d878 <ceil+0x100>)
 800d7b8:	2500      	movs	r5, #0
 800d7ba:	4621      	mov	r1, r4
 800d7bc:	4628      	mov	r0, r5
 800d7be:	e025      	b.n	800d80c <ceil+0x94>
 800d7c0:	4f2e      	ldr	r7, [pc, #184]	; (800d87c <ceil+0x104>)
 800d7c2:	4137      	asrs	r7, r6
 800d7c4:	ea01 0307 	and.w	r3, r1, r7
 800d7c8:	4303      	orrs	r3, r0
 800d7ca:	d01f      	beq.n	800d80c <ceil+0x94>
 800d7cc:	a328      	add	r3, pc, #160	; (adr r3, 800d870 <ceil+0xf8>)
 800d7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d2:	f7f2 fd83 	bl	80002dc <__adddf3>
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	2300      	movs	r3, #0
 800d7da:	f7f3 f9c5 	bl	8000b68 <__aeabi_dcmpgt>
 800d7de:	2800      	cmp	r0, #0
 800d7e0:	d0eb      	beq.n	800d7ba <ceil+0x42>
 800d7e2:	2c00      	cmp	r4, #0
 800d7e4:	bfc2      	ittt	gt
 800d7e6:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800d7ea:	fa43 f606 	asrgt.w	r6, r3, r6
 800d7ee:	19a4      	addgt	r4, r4, r6
 800d7f0:	ea24 0407 	bic.w	r4, r4, r7
 800d7f4:	2500      	movs	r5, #0
 800d7f6:	e7e0      	b.n	800d7ba <ceil+0x42>
 800d7f8:	2e33      	cmp	r6, #51	; 0x33
 800d7fa:	dd0b      	ble.n	800d814 <ceil+0x9c>
 800d7fc:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d800:	d104      	bne.n	800d80c <ceil+0x94>
 800d802:	ee10 2a10 	vmov	r2, s0
 800d806:	460b      	mov	r3, r1
 800d808:	f7f2 fd68 	bl	80002dc <__adddf3>
 800d80c:	ec41 0b10 	vmov	d0, r0, r1
 800d810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d814:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d818:	f04f 33ff 	mov.w	r3, #4294967295
 800d81c:	fa23 f707 	lsr.w	r7, r3, r7
 800d820:	4207      	tst	r7, r0
 800d822:	d0f3      	beq.n	800d80c <ceil+0x94>
 800d824:	a312      	add	r3, pc, #72	; (adr r3, 800d870 <ceil+0xf8>)
 800d826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d82a:	f7f2 fd57 	bl	80002dc <__adddf3>
 800d82e:	2200      	movs	r2, #0
 800d830:	2300      	movs	r3, #0
 800d832:	f7f3 f999 	bl	8000b68 <__aeabi_dcmpgt>
 800d836:	2800      	cmp	r0, #0
 800d838:	d0bf      	beq.n	800d7ba <ceil+0x42>
 800d83a:	2c00      	cmp	r4, #0
 800d83c:	dd02      	ble.n	800d844 <ceil+0xcc>
 800d83e:	2e14      	cmp	r6, #20
 800d840:	d103      	bne.n	800d84a <ceil+0xd2>
 800d842:	3401      	adds	r4, #1
 800d844:	ea25 0507 	bic.w	r5, r5, r7
 800d848:	e7b7      	b.n	800d7ba <ceil+0x42>
 800d84a:	2301      	movs	r3, #1
 800d84c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d850:	fa03 f606 	lsl.w	r6, r3, r6
 800d854:	4435      	add	r5, r6
 800d856:	4545      	cmp	r5, r8
 800d858:	bf38      	it	cc
 800d85a:	18e4      	addcc	r4, r4, r3
 800d85c:	e7f2      	b.n	800d844 <ceil+0xcc>
 800d85e:	2500      	movs	r5, #0
 800d860:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d864:	e7a9      	b.n	800d7ba <ceil+0x42>
 800d866:	4625      	mov	r5, r4
 800d868:	e7a7      	b.n	800d7ba <ceil+0x42>
 800d86a:	bf00      	nop
 800d86c:	f3af 8000 	nop.w
 800d870:	8800759c 	.word	0x8800759c
 800d874:	7e37e43c 	.word	0x7e37e43c
 800d878:	3ff00000 	.word	0x3ff00000
 800d87c:	000fffff 	.word	0x000fffff

0800d880 <cos>:
 800d880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d882:	ec53 2b10 	vmov	r2, r3, d0
 800d886:	4824      	ldr	r0, [pc, #144]	; (800d918 <cos+0x98>)
 800d888:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d88c:	4281      	cmp	r1, r0
 800d88e:	dc06      	bgt.n	800d89e <cos+0x1e>
 800d890:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800d910 <cos+0x90>
 800d894:	f001 fb7c 	bl	800ef90 <__kernel_cos>
 800d898:	ec51 0b10 	vmov	r0, r1, d0
 800d89c:	e007      	b.n	800d8ae <cos+0x2e>
 800d89e:	481f      	ldr	r0, [pc, #124]	; (800d91c <cos+0x9c>)
 800d8a0:	4281      	cmp	r1, r0
 800d8a2:	dd09      	ble.n	800d8b8 <cos+0x38>
 800d8a4:	ee10 0a10 	vmov	r0, s0
 800d8a8:	4619      	mov	r1, r3
 800d8aa:	f7f2 fd15 	bl	80002d8 <__aeabi_dsub>
 800d8ae:	ec41 0b10 	vmov	d0, r0, r1
 800d8b2:	b005      	add	sp, #20
 800d8b4:	f85d fb04 	ldr.w	pc, [sp], #4
 800d8b8:	4668      	mov	r0, sp
 800d8ba:	f001 f8a9 	bl	800ea10 <__ieee754_rem_pio2>
 800d8be:	f000 0003 	and.w	r0, r0, #3
 800d8c2:	2801      	cmp	r0, #1
 800d8c4:	d007      	beq.n	800d8d6 <cos+0x56>
 800d8c6:	2802      	cmp	r0, #2
 800d8c8:	d012      	beq.n	800d8f0 <cos+0x70>
 800d8ca:	b9c0      	cbnz	r0, 800d8fe <cos+0x7e>
 800d8cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d8d0:	ed9d 0b00 	vldr	d0, [sp]
 800d8d4:	e7de      	b.n	800d894 <cos+0x14>
 800d8d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d8da:	ed9d 0b00 	vldr	d0, [sp]
 800d8de:	f001 ff5f 	bl	800f7a0 <__kernel_sin>
 800d8e2:	ec53 2b10 	vmov	r2, r3, d0
 800d8e6:	ee10 0a10 	vmov	r0, s0
 800d8ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d8ee:	e7de      	b.n	800d8ae <cos+0x2e>
 800d8f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d8f4:	ed9d 0b00 	vldr	d0, [sp]
 800d8f8:	f001 fb4a 	bl	800ef90 <__kernel_cos>
 800d8fc:	e7f1      	b.n	800d8e2 <cos+0x62>
 800d8fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d902:	ed9d 0b00 	vldr	d0, [sp]
 800d906:	2001      	movs	r0, #1
 800d908:	f001 ff4a 	bl	800f7a0 <__kernel_sin>
 800d90c:	e7c4      	b.n	800d898 <cos+0x18>
 800d90e:	bf00      	nop
	...
 800d918:	3fe921fb 	.word	0x3fe921fb
 800d91c:	7fefffff 	.word	0x7fefffff

0800d920 <fabs>:
 800d920:	ec51 0b10 	vmov	r0, r1, d0
 800d924:	ee10 2a10 	vmov	r2, s0
 800d928:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d92c:	ec43 2b10 	vmov	d0, r2, r3
 800d930:	4770      	bx	lr
	...

0800d934 <round>:
 800d934:	ec51 0b10 	vmov	r0, r1, d0
 800d938:	b570      	push	{r4, r5, r6, lr}
 800d93a:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800d93e:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800d942:	2c13      	cmp	r4, #19
 800d944:	ee10 2a10 	vmov	r2, s0
 800d948:	460b      	mov	r3, r1
 800d94a:	dc19      	bgt.n	800d980 <round+0x4c>
 800d94c:	2c00      	cmp	r4, #0
 800d94e:	da09      	bge.n	800d964 <round+0x30>
 800d950:	3401      	adds	r4, #1
 800d952:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800d956:	d103      	bne.n	800d960 <round+0x2c>
 800d958:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d95c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d960:	2100      	movs	r1, #0
 800d962:	e028      	b.n	800d9b6 <round+0x82>
 800d964:	4d15      	ldr	r5, [pc, #84]	; (800d9bc <round+0x88>)
 800d966:	4125      	asrs	r5, r4
 800d968:	ea01 0605 	and.w	r6, r1, r5
 800d96c:	4332      	orrs	r2, r6
 800d96e:	d00e      	beq.n	800d98e <round+0x5a>
 800d970:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d974:	fa42 f404 	asr.w	r4, r2, r4
 800d978:	4423      	add	r3, r4
 800d97a:	ea23 0305 	bic.w	r3, r3, r5
 800d97e:	e7ef      	b.n	800d960 <round+0x2c>
 800d980:	2c33      	cmp	r4, #51	; 0x33
 800d982:	dd07      	ble.n	800d994 <round+0x60>
 800d984:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800d988:	d101      	bne.n	800d98e <round+0x5a>
 800d98a:	f7f2 fca7 	bl	80002dc <__adddf3>
 800d98e:	ec41 0b10 	vmov	d0, r0, r1
 800d992:	bd70      	pop	{r4, r5, r6, pc}
 800d994:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800d998:	f04f 35ff 	mov.w	r5, #4294967295
 800d99c:	40f5      	lsrs	r5, r6
 800d99e:	4228      	tst	r0, r5
 800d9a0:	d0f5      	beq.n	800d98e <round+0x5a>
 800d9a2:	2101      	movs	r1, #1
 800d9a4:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800d9a8:	fa01 f404 	lsl.w	r4, r1, r4
 800d9ac:	1912      	adds	r2, r2, r4
 800d9ae:	bf28      	it	cs
 800d9b0:	185b      	addcs	r3, r3, r1
 800d9b2:	ea22 0105 	bic.w	r1, r2, r5
 800d9b6:	4608      	mov	r0, r1
 800d9b8:	4619      	mov	r1, r3
 800d9ba:	e7e8      	b.n	800d98e <round+0x5a>
 800d9bc:	000fffff 	.word	0x000fffff

0800d9c0 <sin>:
 800d9c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d9c2:	ec53 2b10 	vmov	r2, r3, d0
 800d9c6:	4826      	ldr	r0, [pc, #152]	; (800da60 <sin+0xa0>)
 800d9c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d9cc:	4281      	cmp	r1, r0
 800d9ce:	dc07      	bgt.n	800d9e0 <sin+0x20>
 800d9d0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800da58 <sin+0x98>
 800d9d4:	2000      	movs	r0, #0
 800d9d6:	f001 fee3 	bl	800f7a0 <__kernel_sin>
 800d9da:	ec51 0b10 	vmov	r0, r1, d0
 800d9de:	e007      	b.n	800d9f0 <sin+0x30>
 800d9e0:	4820      	ldr	r0, [pc, #128]	; (800da64 <sin+0xa4>)
 800d9e2:	4281      	cmp	r1, r0
 800d9e4:	dd09      	ble.n	800d9fa <sin+0x3a>
 800d9e6:	ee10 0a10 	vmov	r0, s0
 800d9ea:	4619      	mov	r1, r3
 800d9ec:	f7f2 fc74 	bl	80002d8 <__aeabi_dsub>
 800d9f0:	ec41 0b10 	vmov	d0, r0, r1
 800d9f4:	b005      	add	sp, #20
 800d9f6:	f85d fb04 	ldr.w	pc, [sp], #4
 800d9fa:	4668      	mov	r0, sp
 800d9fc:	f001 f808 	bl	800ea10 <__ieee754_rem_pio2>
 800da00:	f000 0003 	and.w	r0, r0, #3
 800da04:	2801      	cmp	r0, #1
 800da06:	d008      	beq.n	800da1a <sin+0x5a>
 800da08:	2802      	cmp	r0, #2
 800da0a:	d00d      	beq.n	800da28 <sin+0x68>
 800da0c:	b9d0      	cbnz	r0, 800da44 <sin+0x84>
 800da0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800da12:	ed9d 0b00 	vldr	d0, [sp]
 800da16:	2001      	movs	r0, #1
 800da18:	e7dd      	b.n	800d9d6 <sin+0x16>
 800da1a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800da1e:	ed9d 0b00 	vldr	d0, [sp]
 800da22:	f001 fab5 	bl	800ef90 <__kernel_cos>
 800da26:	e7d8      	b.n	800d9da <sin+0x1a>
 800da28:	ed9d 1b02 	vldr	d1, [sp, #8]
 800da2c:	ed9d 0b00 	vldr	d0, [sp]
 800da30:	2001      	movs	r0, #1
 800da32:	f001 feb5 	bl	800f7a0 <__kernel_sin>
 800da36:	ec53 2b10 	vmov	r2, r3, d0
 800da3a:	ee10 0a10 	vmov	r0, s0
 800da3e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800da42:	e7d5      	b.n	800d9f0 <sin+0x30>
 800da44:	ed9d 1b02 	vldr	d1, [sp, #8]
 800da48:	ed9d 0b00 	vldr	d0, [sp]
 800da4c:	f001 faa0 	bl	800ef90 <__kernel_cos>
 800da50:	e7f1      	b.n	800da36 <sin+0x76>
 800da52:	bf00      	nop
 800da54:	f3af 8000 	nop.w
	...
 800da60:	3fe921fb 	.word	0x3fe921fb
 800da64:	7fefffff 	.word	0x7fefffff

0800da68 <sqrtl>:
 800da68:	f000 b8fe 	b.w	800dc68 <sqrt>
 800da6c:	0000      	movs	r0, r0
	...

0800da70 <exp>:
 800da70:	b538      	push	{r3, r4, r5, lr}
 800da72:	ed2d 8b02 	vpush	{d8}
 800da76:	ec55 4b10 	vmov	r4, r5, d0
 800da7a:	f000 f929 	bl	800dcd0 <__ieee754_exp>
 800da7e:	4b22      	ldr	r3, [pc, #136]	; (800db08 <exp+0x98>)
 800da80:	eeb0 8a40 	vmov.f32	s16, s0
 800da84:	eef0 8a60 	vmov.f32	s17, s1
 800da88:	f993 3000 	ldrsb.w	r3, [r3]
 800da8c:	3301      	adds	r3, #1
 800da8e:	d012      	beq.n	800dab6 <exp+0x46>
 800da90:	ec45 4b10 	vmov	d0, r4, r5
 800da94:	f001 ff42 	bl	800f91c <finite>
 800da98:	b168      	cbz	r0, 800dab6 <exp+0x46>
 800da9a:	a313      	add	r3, pc, #76	; (adr r3, 800dae8 <exp+0x78>)
 800da9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa0:	4620      	mov	r0, r4
 800daa2:	4629      	mov	r1, r5
 800daa4:	f7f3 f860 	bl	8000b68 <__aeabi_dcmpgt>
 800daa8:	b160      	cbz	r0, 800dac4 <exp+0x54>
 800daaa:	f7fb f859 	bl	8008b60 <__errno>
 800daae:	ed9f 8b10 	vldr	d8, [pc, #64]	; 800daf0 <exp+0x80>
 800dab2:	2322      	movs	r3, #34	; 0x22
 800dab4:	6003      	str	r3, [r0, #0]
 800dab6:	eeb0 0a48 	vmov.f32	s0, s16
 800daba:	eef0 0a68 	vmov.f32	s1, s17
 800dabe:	ecbd 8b02 	vpop	{d8}
 800dac2:	bd38      	pop	{r3, r4, r5, pc}
 800dac4:	a30c      	add	r3, pc, #48	; (adr r3, 800daf8 <exp+0x88>)
 800dac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daca:	4620      	mov	r0, r4
 800dacc:	4629      	mov	r1, r5
 800dace:	f7f3 f82d 	bl	8000b2c <__aeabi_dcmplt>
 800dad2:	2800      	cmp	r0, #0
 800dad4:	d0ef      	beq.n	800dab6 <exp+0x46>
 800dad6:	f7fb f843 	bl	8008b60 <__errno>
 800dada:	2322      	movs	r3, #34	; 0x22
 800dadc:	ed9f 8b08 	vldr	d8, [pc, #32]	; 800db00 <exp+0x90>
 800dae0:	6003      	str	r3, [r0, #0]
 800dae2:	e7e8      	b.n	800dab6 <exp+0x46>
 800dae4:	f3af 8000 	nop.w
 800dae8:	fefa39ef 	.word	0xfefa39ef
 800daec:	40862e42 	.word	0x40862e42
 800daf0:	00000000 	.word	0x00000000
 800daf4:	7ff00000 	.word	0x7ff00000
 800daf8:	d52d3051 	.word	0xd52d3051
 800dafc:	c0874910 	.word	0xc0874910
	...
 800db08:	20000210 	.word	0x20000210

0800db0c <pow>:
 800db0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db10:	ec59 8b10 	vmov	r8, r9, d0
 800db14:	ec57 6b11 	vmov	r6, r7, d1
 800db18:	f000 fa56 	bl	800dfc8 <__ieee754_pow>
 800db1c:	4b4e      	ldr	r3, [pc, #312]	; (800dc58 <pow+0x14c>)
 800db1e:	f993 3000 	ldrsb.w	r3, [r3]
 800db22:	3301      	adds	r3, #1
 800db24:	ec55 4b10 	vmov	r4, r5, d0
 800db28:	d015      	beq.n	800db56 <pow+0x4a>
 800db2a:	4632      	mov	r2, r6
 800db2c:	463b      	mov	r3, r7
 800db2e:	4630      	mov	r0, r6
 800db30:	4639      	mov	r1, r7
 800db32:	f7f3 f823 	bl	8000b7c <__aeabi_dcmpun>
 800db36:	b970      	cbnz	r0, 800db56 <pow+0x4a>
 800db38:	4642      	mov	r2, r8
 800db3a:	464b      	mov	r3, r9
 800db3c:	4640      	mov	r0, r8
 800db3e:	4649      	mov	r1, r9
 800db40:	f7f3 f81c 	bl	8000b7c <__aeabi_dcmpun>
 800db44:	2200      	movs	r2, #0
 800db46:	2300      	movs	r3, #0
 800db48:	b148      	cbz	r0, 800db5e <pow+0x52>
 800db4a:	4630      	mov	r0, r6
 800db4c:	4639      	mov	r1, r7
 800db4e:	f7f2 ffe3 	bl	8000b18 <__aeabi_dcmpeq>
 800db52:	2800      	cmp	r0, #0
 800db54:	d17d      	bne.n	800dc52 <pow+0x146>
 800db56:	ec45 4b10 	vmov	d0, r4, r5
 800db5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db5e:	4640      	mov	r0, r8
 800db60:	4649      	mov	r1, r9
 800db62:	f7f2 ffd9 	bl	8000b18 <__aeabi_dcmpeq>
 800db66:	b1e0      	cbz	r0, 800dba2 <pow+0x96>
 800db68:	2200      	movs	r2, #0
 800db6a:	2300      	movs	r3, #0
 800db6c:	4630      	mov	r0, r6
 800db6e:	4639      	mov	r1, r7
 800db70:	f7f2 ffd2 	bl	8000b18 <__aeabi_dcmpeq>
 800db74:	2800      	cmp	r0, #0
 800db76:	d16c      	bne.n	800dc52 <pow+0x146>
 800db78:	ec47 6b10 	vmov	d0, r6, r7
 800db7c:	f001 fece 	bl	800f91c <finite>
 800db80:	2800      	cmp	r0, #0
 800db82:	d0e8      	beq.n	800db56 <pow+0x4a>
 800db84:	2200      	movs	r2, #0
 800db86:	2300      	movs	r3, #0
 800db88:	4630      	mov	r0, r6
 800db8a:	4639      	mov	r1, r7
 800db8c:	f7f2 ffce 	bl	8000b2c <__aeabi_dcmplt>
 800db90:	2800      	cmp	r0, #0
 800db92:	d0e0      	beq.n	800db56 <pow+0x4a>
 800db94:	f7fa ffe4 	bl	8008b60 <__errno>
 800db98:	2321      	movs	r3, #33	; 0x21
 800db9a:	6003      	str	r3, [r0, #0]
 800db9c:	2400      	movs	r4, #0
 800db9e:	4d2f      	ldr	r5, [pc, #188]	; (800dc5c <pow+0x150>)
 800dba0:	e7d9      	b.n	800db56 <pow+0x4a>
 800dba2:	ec45 4b10 	vmov	d0, r4, r5
 800dba6:	f001 feb9 	bl	800f91c <finite>
 800dbaa:	bbb8      	cbnz	r0, 800dc1c <pow+0x110>
 800dbac:	ec49 8b10 	vmov	d0, r8, r9
 800dbb0:	f001 feb4 	bl	800f91c <finite>
 800dbb4:	b390      	cbz	r0, 800dc1c <pow+0x110>
 800dbb6:	ec47 6b10 	vmov	d0, r6, r7
 800dbba:	f001 feaf 	bl	800f91c <finite>
 800dbbe:	b368      	cbz	r0, 800dc1c <pow+0x110>
 800dbc0:	4622      	mov	r2, r4
 800dbc2:	462b      	mov	r3, r5
 800dbc4:	4620      	mov	r0, r4
 800dbc6:	4629      	mov	r1, r5
 800dbc8:	f7f2 ffd8 	bl	8000b7c <__aeabi_dcmpun>
 800dbcc:	b160      	cbz	r0, 800dbe8 <pow+0xdc>
 800dbce:	f7fa ffc7 	bl	8008b60 <__errno>
 800dbd2:	2321      	movs	r3, #33	; 0x21
 800dbd4:	6003      	str	r3, [r0, #0]
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	2300      	movs	r3, #0
 800dbda:	4610      	mov	r0, r2
 800dbdc:	4619      	mov	r1, r3
 800dbde:	f7f2 fe5d 	bl	800089c <__aeabi_ddiv>
 800dbe2:	4604      	mov	r4, r0
 800dbe4:	460d      	mov	r5, r1
 800dbe6:	e7b6      	b.n	800db56 <pow+0x4a>
 800dbe8:	f7fa ffba 	bl	8008b60 <__errno>
 800dbec:	2322      	movs	r3, #34	; 0x22
 800dbee:	6003      	str	r3, [r0, #0]
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	4640      	mov	r0, r8
 800dbf6:	4649      	mov	r1, r9
 800dbf8:	f7f2 ff98 	bl	8000b2c <__aeabi_dcmplt>
 800dbfc:	2400      	movs	r4, #0
 800dbfe:	b158      	cbz	r0, 800dc18 <pow+0x10c>
 800dc00:	ec47 6b10 	vmov	d0, r6, r7
 800dc04:	f001 ff18 	bl	800fa38 <rint>
 800dc08:	4632      	mov	r2, r6
 800dc0a:	ec51 0b10 	vmov	r0, r1, d0
 800dc0e:	463b      	mov	r3, r7
 800dc10:	f7f2 ff82 	bl	8000b18 <__aeabi_dcmpeq>
 800dc14:	2800      	cmp	r0, #0
 800dc16:	d0c2      	beq.n	800db9e <pow+0x92>
 800dc18:	4d11      	ldr	r5, [pc, #68]	; (800dc60 <pow+0x154>)
 800dc1a:	e79c      	b.n	800db56 <pow+0x4a>
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	2300      	movs	r3, #0
 800dc20:	4620      	mov	r0, r4
 800dc22:	4629      	mov	r1, r5
 800dc24:	f7f2 ff78 	bl	8000b18 <__aeabi_dcmpeq>
 800dc28:	2800      	cmp	r0, #0
 800dc2a:	d094      	beq.n	800db56 <pow+0x4a>
 800dc2c:	ec49 8b10 	vmov	d0, r8, r9
 800dc30:	f001 fe74 	bl	800f91c <finite>
 800dc34:	2800      	cmp	r0, #0
 800dc36:	d08e      	beq.n	800db56 <pow+0x4a>
 800dc38:	ec47 6b10 	vmov	d0, r6, r7
 800dc3c:	f001 fe6e 	bl	800f91c <finite>
 800dc40:	2800      	cmp	r0, #0
 800dc42:	d088      	beq.n	800db56 <pow+0x4a>
 800dc44:	f7fa ff8c 	bl	8008b60 <__errno>
 800dc48:	2322      	movs	r3, #34	; 0x22
 800dc4a:	6003      	str	r3, [r0, #0]
 800dc4c:	2400      	movs	r4, #0
 800dc4e:	2500      	movs	r5, #0
 800dc50:	e781      	b.n	800db56 <pow+0x4a>
 800dc52:	4d04      	ldr	r5, [pc, #16]	; (800dc64 <pow+0x158>)
 800dc54:	2400      	movs	r4, #0
 800dc56:	e77e      	b.n	800db56 <pow+0x4a>
 800dc58:	20000210 	.word	0x20000210
 800dc5c:	fff00000 	.word	0xfff00000
 800dc60:	7ff00000 	.word	0x7ff00000
 800dc64:	3ff00000 	.word	0x3ff00000

0800dc68 <sqrt>:
 800dc68:	b538      	push	{r3, r4, r5, lr}
 800dc6a:	ed2d 8b02 	vpush	{d8}
 800dc6e:	ec55 4b10 	vmov	r4, r5, d0
 800dc72:	f001 f8d7 	bl	800ee24 <__ieee754_sqrt>
 800dc76:	4b15      	ldr	r3, [pc, #84]	; (800dccc <sqrt+0x64>)
 800dc78:	eeb0 8a40 	vmov.f32	s16, s0
 800dc7c:	eef0 8a60 	vmov.f32	s17, s1
 800dc80:	f993 3000 	ldrsb.w	r3, [r3]
 800dc84:	3301      	adds	r3, #1
 800dc86:	d019      	beq.n	800dcbc <sqrt+0x54>
 800dc88:	4622      	mov	r2, r4
 800dc8a:	462b      	mov	r3, r5
 800dc8c:	4620      	mov	r0, r4
 800dc8e:	4629      	mov	r1, r5
 800dc90:	f7f2 ff74 	bl	8000b7c <__aeabi_dcmpun>
 800dc94:	b990      	cbnz	r0, 800dcbc <sqrt+0x54>
 800dc96:	2200      	movs	r2, #0
 800dc98:	2300      	movs	r3, #0
 800dc9a:	4620      	mov	r0, r4
 800dc9c:	4629      	mov	r1, r5
 800dc9e:	f7f2 ff45 	bl	8000b2c <__aeabi_dcmplt>
 800dca2:	b158      	cbz	r0, 800dcbc <sqrt+0x54>
 800dca4:	f7fa ff5c 	bl	8008b60 <__errno>
 800dca8:	2321      	movs	r3, #33	; 0x21
 800dcaa:	6003      	str	r3, [r0, #0]
 800dcac:	2200      	movs	r2, #0
 800dcae:	2300      	movs	r3, #0
 800dcb0:	4610      	mov	r0, r2
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	f7f2 fdf2 	bl	800089c <__aeabi_ddiv>
 800dcb8:	ec41 0b18 	vmov	d8, r0, r1
 800dcbc:	eeb0 0a48 	vmov.f32	s0, s16
 800dcc0:	eef0 0a68 	vmov.f32	s1, s17
 800dcc4:	ecbd 8b02 	vpop	{d8}
 800dcc8:	bd38      	pop	{r3, r4, r5, pc}
 800dcca:	bf00      	nop
 800dccc:	20000210 	.word	0x20000210

0800dcd0 <__ieee754_exp>:
 800dcd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcd4:	ec55 4b10 	vmov	r4, r5, d0
 800dcd8:	49b1      	ldr	r1, [pc, #708]	; (800dfa0 <__ieee754_exp+0x2d0>)
 800dcda:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dcde:	428b      	cmp	r3, r1
 800dce0:	ed2d 8b04 	vpush	{d8-d9}
 800dce4:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800dce8:	d937      	bls.n	800dd5a <__ieee754_exp+0x8a>
 800dcea:	49ae      	ldr	r1, [pc, #696]	; (800dfa4 <__ieee754_exp+0x2d4>)
 800dcec:	428b      	cmp	r3, r1
 800dcee:	d916      	bls.n	800dd1e <__ieee754_exp+0x4e>
 800dcf0:	ee10 3a10 	vmov	r3, s0
 800dcf4:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800dcf8:	4313      	orrs	r3, r2
 800dcfa:	d009      	beq.n	800dd10 <__ieee754_exp+0x40>
 800dcfc:	ee10 2a10 	vmov	r2, s0
 800dd00:	462b      	mov	r3, r5
 800dd02:	4620      	mov	r0, r4
 800dd04:	4629      	mov	r1, r5
 800dd06:	f7f2 fae9 	bl	80002dc <__adddf3>
 800dd0a:	4604      	mov	r4, r0
 800dd0c:	460d      	mov	r5, r1
 800dd0e:	e000      	b.n	800dd12 <__ieee754_exp+0x42>
 800dd10:	bb06      	cbnz	r6, 800dd54 <__ieee754_exp+0x84>
 800dd12:	ecbd 8b04 	vpop	{d8-d9}
 800dd16:	ec45 4b10 	vmov	d0, r4, r5
 800dd1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd1e:	a38a      	add	r3, pc, #552	; (adr r3, 800df48 <__ieee754_exp+0x278>)
 800dd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd24:	ee10 0a10 	vmov	r0, s0
 800dd28:	4629      	mov	r1, r5
 800dd2a:	f7f2 ff1d 	bl	8000b68 <__aeabi_dcmpgt>
 800dd2e:	b138      	cbz	r0, 800dd40 <__ieee754_exp+0x70>
 800dd30:	a387      	add	r3, pc, #540	; (adr r3, 800df50 <__ieee754_exp+0x280>)
 800dd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd36:	4610      	mov	r0, r2
 800dd38:	4619      	mov	r1, r3
 800dd3a:	f7f2 fc85 	bl	8000648 <__aeabi_dmul>
 800dd3e:	e7e4      	b.n	800dd0a <__ieee754_exp+0x3a>
 800dd40:	a385      	add	r3, pc, #532	; (adr r3, 800df58 <__ieee754_exp+0x288>)
 800dd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd46:	4620      	mov	r0, r4
 800dd48:	4629      	mov	r1, r5
 800dd4a:	f7f2 feef 	bl	8000b2c <__aeabi_dcmplt>
 800dd4e:	2800      	cmp	r0, #0
 800dd50:	f000 8087 	beq.w	800de62 <__ieee754_exp+0x192>
 800dd54:	2400      	movs	r4, #0
 800dd56:	2500      	movs	r5, #0
 800dd58:	e7db      	b.n	800dd12 <__ieee754_exp+0x42>
 800dd5a:	4a93      	ldr	r2, [pc, #588]	; (800dfa8 <__ieee754_exp+0x2d8>)
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	f240 80ac 	bls.w	800deba <__ieee754_exp+0x1ea>
 800dd62:	4a92      	ldr	r2, [pc, #584]	; (800dfac <__ieee754_exp+0x2dc>)
 800dd64:	4293      	cmp	r3, r2
 800dd66:	d87c      	bhi.n	800de62 <__ieee754_exp+0x192>
 800dd68:	4b91      	ldr	r3, [pc, #580]	; (800dfb0 <__ieee754_exp+0x2e0>)
 800dd6a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd72:	ee10 0a10 	vmov	r0, s0
 800dd76:	4629      	mov	r1, r5
 800dd78:	f7f2 faae 	bl	80002d8 <__aeabi_dsub>
 800dd7c:	4b8d      	ldr	r3, [pc, #564]	; (800dfb4 <__ieee754_exp+0x2e4>)
 800dd7e:	00f7      	lsls	r7, r6, #3
 800dd80:	443b      	add	r3, r7
 800dd82:	ed93 7b00 	vldr	d7, [r3]
 800dd86:	f1c6 0a01 	rsb	sl, r6, #1
 800dd8a:	4680      	mov	r8, r0
 800dd8c:	4689      	mov	r9, r1
 800dd8e:	ebaa 0a06 	sub.w	sl, sl, r6
 800dd92:	eeb0 8a47 	vmov.f32	s16, s14
 800dd96:	eef0 8a67 	vmov.f32	s17, s15
 800dd9a:	ec53 2b18 	vmov	r2, r3, d8
 800dd9e:	4640      	mov	r0, r8
 800dda0:	4649      	mov	r1, r9
 800dda2:	f7f2 fa99 	bl	80002d8 <__aeabi_dsub>
 800dda6:	4604      	mov	r4, r0
 800dda8:	460d      	mov	r5, r1
 800ddaa:	4622      	mov	r2, r4
 800ddac:	462b      	mov	r3, r5
 800ddae:	4620      	mov	r0, r4
 800ddb0:	4629      	mov	r1, r5
 800ddb2:	f7f2 fc49 	bl	8000648 <__aeabi_dmul>
 800ddb6:	a36a      	add	r3, pc, #424	; (adr r3, 800df60 <__ieee754_exp+0x290>)
 800ddb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddbc:	4606      	mov	r6, r0
 800ddbe:	460f      	mov	r7, r1
 800ddc0:	f7f2 fc42 	bl	8000648 <__aeabi_dmul>
 800ddc4:	a368      	add	r3, pc, #416	; (adr r3, 800df68 <__ieee754_exp+0x298>)
 800ddc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddca:	f7f2 fa85 	bl	80002d8 <__aeabi_dsub>
 800ddce:	4632      	mov	r2, r6
 800ddd0:	463b      	mov	r3, r7
 800ddd2:	f7f2 fc39 	bl	8000648 <__aeabi_dmul>
 800ddd6:	a366      	add	r3, pc, #408	; (adr r3, 800df70 <__ieee754_exp+0x2a0>)
 800ddd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dddc:	f7f2 fa7e 	bl	80002dc <__adddf3>
 800dde0:	4632      	mov	r2, r6
 800dde2:	463b      	mov	r3, r7
 800dde4:	f7f2 fc30 	bl	8000648 <__aeabi_dmul>
 800dde8:	a363      	add	r3, pc, #396	; (adr r3, 800df78 <__ieee754_exp+0x2a8>)
 800ddea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddee:	f7f2 fa73 	bl	80002d8 <__aeabi_dsub>
 800ddf2:	4632      	mov	r2, r6
 800ddf4:	463b      	mov	r3, r7
 800ddf6:	f7f2 fc27 	bl	8000648 <__aeabi_dmul>
 800ddfa:	a361      	add	r3, pc, #388	; (adr r3, 800df80 <__ieee754_exp+0x2b0>)
 800ddfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de00:	f7f2 fa6c 	bl	80002dc <__adddf3>
 800de04:	4632      	mov	r2, r6
 800de06:	463b      	mov	r3, r7
 800de08:	f7f2 fc1e 	bl	8000648 <__aeabi_dmul>
 800de0c:	4602      	mov	r2, r0
 800de0e:	460b      	mov	r3, r1
 800de10:	4620      	mov	r0, r4
 800de12:	4629      	mov	r1, r5
 800de14:	f7f2 fa60 	bl	80002d8 <__aeabi_dsub>
 800de18:	4602      	mov	r2, r0
 800de1a:	460b      	mov	r3, r1
 800de1c:	4606      	mov	r6, r0
 800de1e:	460f      	mov	r7, r1
 800de20:	4620      	mov	r0, r4
 800de22:	4629      	mov	r1, r5
 800de24:	f7f2 fc10 	bl	8000648 <__aeabi_dmul>
 800de28:	ec41 0b19 	vmov	d9, r0, r1
 800de2c:	f1ba 0f00 	cmp.w	sl, #0
 800de30:	d15d      	bne.n	800deee <__ieee754_exp+0x21e>
 800de32:	2200      	movs	r2, #0
 800de34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800de38:	4630      	mov	r0, r6
 800de3a:	4639      	mov	r1, r7
 800de3c:	f7f2 fa4c 	bl	80002d8 <__aeabi_dsub>
 800de40:	4602      	mov	r2, r0
 800de42:	460b      	mov	r3, r1
 800de44:	ec51 0b19 	vmov	r0, r1, d9
 800de48:	f7f2 fd28 	bl	800089c <__aeabi_ddiv>
 800de4c:	4622      	mov	r2, r4
 800de4e:	462b      	mov	r3, r5
 800de50:	f7f2 fa42 	bl	80002d8 <__aeabi_dsub>
 800de54:	4602      	mov	r2, r0
 800de56:	460b      	mov	r3, r1
 800de58:	2000      	movs	r0, #0
 800de5a:	4957      	ldr	r1, [pc, #348]	; (800dfb8 <__ieee754_exp+0x2e8>)
 800de5c:	f7f2 fa3c 	bl	80002d8 <__aeabi_dsub>
 800de60:	e753      	b.n	800dd0a <__ieee754_exp+0x3a>
 800de62:	4856      	ldr	r0, [pc, #344]	; (800dfbc <__ieee754_exp+0x2ec>)
 800de64:	a348      	add	r3, pc, #288	; (adr r3, 800df88 <__ieee754_exp+0x2b8>)
 800de66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de6a:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800de6e:	4629      	mov	r1, r5
 800de70:	4620      	mov	r0, r4
 800de72:	f7f2 fbe9 	bl	8000648 <__aeabi_dmul>
 800de76:	e9d6 2300 	ldrd	r2, r3, [r6]
 800de7a:	f7f2 fa2f 	bl	80002dc <__adddf3>
 800de7e:	f7f2 fe93 	bl	8000ba8 <__aeabi_d2iz>
 800de82:	4682      	mov	sl, r0
 800de84:	f7f2 fb76 	bl	8000574 <__aeabi_i2d>
 800de88:	a341      	add	r3, pc, #260	; (adr r3, 800df90 <__ieee754_exp+0x2c0>)
 800de8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de8e:	4606      	mov	r6, r0
 800de90:	460f      	mov	r7, r1
 800de92:	f7f2 fbd9 	bl	8000648 <__aeabi_dmul>
 800de96:	4602      	mov	r2, r0
 800de98:	460b      	mov	r3, r1
 800de9a:	4620      	mov	r0, r4
 800de9c:	4629      	mov	r1, r5
 800de9e:	f7f2 fa1b 	bl	80002d8 <__aeabi_dsub>
 800dea2:	a33d      	add	r3, pc, #244	; (adr r3, 800df98 <__ieee754_exp+0x2c8>)
 800dea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea8:	4680      	mov	r8, r0
 800deaa:	4689      	mov	r9, r1
 800deac:	4630      	mov	r0, r6
 800deae:	4639      	mov	r1, r7
 800deb0:	f7f2 fbca 	bl	8000648 <__aeabi_dmul>
 800deb4:	ec41 0b18 	vmov	d8, r0, r1
 800deb8:	e76f      	b.n	800dd9a <__ieee754_exp+0xca>
 800deba:	4a41      	ldr	r2, [pc, #260]	; (800dfc0 <__ieee754_exp+0x2f0>)
 800debc:	4293      	cmp	r3, r2
 800debe:	d811      	bhi.n	800dee4 <__ieee754_exp+0x214>
 800dec0:	a323      	add	r3, pc, #140	; (adr r3, 800df50 <__ieee754_exp+0x280>)
 800dec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec6:	ee10 0a10 	vmov	r0, s0
 800deca:	4629      	mov	r1, r5
 800decc:	f7f2 fa06 	bl	80002dc <__adddf3>
 800ded0:	4b39      	ldr	r3, [pc, #228]	; (800dfb8 <__ieee754_exp+0x2e8>)
 800ded2:	2200      	movs	r2, #0
 800ded4:	f7f2 fe48 	bl	8000b68 <__aeabi_dcmpgt>
 800ded8:	b138      	cbz	r0, 800deea <__ieee754_exp+0x21a>
 800deda:	4b37      	ldr	r3, [pc, #220]	; (800dfb8 <__ieee754_exp+0x2e8>)
 800dedc:	2200      	movs	r2, #0
 800dede:	4620      	mov	r0, r4
 800dee0:	4629      	mov	r1, r5
 800dee2:	e710      	b.n	800dd06 <__ieee754_exp+0x36>
 800dee4:	f04f 0a00 	mov.w	sl, #0
 800dee8:	e75f      	b.n	800ddaa <__ieee754_exp+0xda>
 800deea:	4682      	mov	sl, r0
 800deec:	e75d      	b.n	800ddaa <__ieee754_exp+0xda>
 800deee:	4632      	mov	r2, r6
 800def0:	463b      	mov	r3, r7
 800def2:	2000      	movs	r0, #0
 800def4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800def8:	f7f2 f9ee 	bl	80002d8 <__aeabi_dsub>
 800defc:	4602      	mov	r2, r0
 800defe:	460b      	mov	r3, r1
 800df00:	ec51 0b19 	vmov	r0, r1, d9
 800df04:	f7f2 fcca 	bl	800089c <__aeabi_ddiv>
 800df08:	4602      	mov	r2, r0
 800df0a:	460b      	mov	r3, r1
 800df0c:	ec51 0b18 	vmov	r0, r1, d8
 800df10:	f7f2 f9e2 	bl	80002d8 <__aeabi_dsub>
 800df14:	4642      	mov	r2, r8
 800df16:	464b      	mov	r3, r9
 800df18:	f7f2 f9de 	bl	80002d8 <__aeabi_dsub>
 800df1c:	4602      	mov	r2, r0
 800df1e:	460b      	mov	r3, r1
 800df20:	2000      	movs	r0, #0
 800df22:	4925      	ldr	r1, [pc, #148]	; (800dfb8 <__ieee754_exp+0x2e8>)
 800df24:	f7f2 f9d8 	bl	80002d8 <__aeabi_dsub>
 800df28:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800df2c:	4592      	cmp	sl, r2
 800df2e:	db02      	blt.n	800df36 <__ieee754_exp+0x266>
 800df30:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800df34:	e6e9      	b.n	800dd0a <__ieee754_exp+0x3a>
 800df36:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800df3a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800df3e:	2200      	movs	r2, #0
 800df40:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800df44:	e6f9      	b.n	800dd3a <__ieee754_exp+0x6a>
 800df46:	bf00      	nop
 800df48:	fefa39ef 	.word	0xfefa39ef
 800df4c:	40862e42 	.word	0x40862e42
 800df50:	8800759c 	.word	0x8800759c
 800df54:	7e37e43c 	.word	0x7e37e43c
 800df58:	d52d3051 	.word	0xd52d3051
 800df5c:	c0874910 	.word	0xc0874910
 800df60:	72bea4d0 	.word	0x72bea4d0
 800df64:	3e663769 	.word	0x3e663769
 800df68:	c5d26bf1 	.word	0xc5d26bf1
 800df6c:	3ebbbd41 	.word	0x3ebbbd41
 800df70:	af25de2c 	.word	0xaf25de2c
 800df74:	3f11566a 	.word	0x3f11566a
 800df78:	16bebd93 	.word	0x16bebd93
 800df7c:	3f66c16c 	.word	0x3f66c16c
 800df80:	5555553e 	.word	0x5555553e
 800df84:	3fc55555 	.word	0x3fc55555
 800df88:	652b82fe 	.word	0x652b82fe
 800df8c:	3ff71547 	.word	0x3ff71547
 800df90:	fee00000 	.word	0xfee00000
 800df94:	3fe62e42 	.word	0x3fe62e42
 800df98:	35793c76 	.word	0x35793c76
 800df9c:	3dea39ef 	.word	0x3dea39ef
 800dfa0:	40862e41 	.word	0x40862e41
 800dfa4:	7fefffff 	.word	0x7fefffff
 800dfa8:	3fd62e42 	.word	0x3fd62e42
 800dfac:	3ff0a2b1 	.word	0x3ff0a2b1
 800dfb0:	08010238 	.word	0x08010238
 800dfb4:	08010248 	.word	0x08010248
 800dfb8:	3ff00000 	.word	0x3ff00000
 800dfbc:	08010228 	.word	0x08010228
 800dfc0:	3e2fffff 	.word	0x3e2fffff
 800dfc4:	00000000 	.word	0x00000000

0800dfc8 <__ieee754_pow>:
 800dfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfcc:	ed2d 8b06 	vpush	{d8-d10}
 800dfd0:	b08d      	sub	sp, #52	; 0x34
 800dfd2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800dfd6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800dfda:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800dfde:	ea56 0100 	orrs.w	r1, r6, r0
 800dfe2:	ec53 2b10 	vmov	r2, r3, d0
 800dfe6:	f000 84d1 	beq.w	800e98c <__ieee754_pow+0x9c4>
 800dfea:	497f      	ldr	r1, [pc, #508]	; (800e1e8 <__ieee754_pow+0x220>)
 800dfec:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800dff0:	428c      	cmp	r4, r1
 800dff2:	ee10 8a10 	vmov	r8, s0
 800dff6:	4699      	mov	r9, r3
 800dff8:	dc09      	bgt.n	800e00e <__ieee754_pow+0x46>
 800dffa:	d103      	bne.n	800e004 <__ieee754_pow+0x3c>
 800dffc:	b97a      	cbnz	r2, 800e01e <__ieee754_pow+0x56>
 800dffe:	42a6      	cmp	r6, r4
 800e000:	dd02      	ble.n	800e008 <__ieee754_pow+0x40>
 800e002:	e00c      	b.n	800e01e <__ieee754_pow+0x56>
 800e004:	428e      	cmp	r6, r1
 800e006:	dc02      	bgt.n	800e00e <__ieee754_pow+0x46>
 800e008:	428e      	cmp	r6, r1
 800e00a:	d110      	bne.n	800e02e <__ieee754_pow+0x66>
 800e00c:	b178      	cbz	r0, 800e02e <__ieee754_pow+0x66>
 800e00e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e012:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e016:	ea54 0308 	orrs.w	r3, r4, r8
 800e01a:	f000 84b7 	beq.w	800e98c <__ieee754_pow+0x9c4>
 800e01e:	4873      	ldr	r0, [pc, #460]	; (800e1ec <__ieee754_pow+0x224>)
 800e020:	b00d      	add	sp, #52	; 0x34
 800e022:	ecbd 8b06 	vpop	{d8-d10}
 800e026:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e02a:	f7fe bc19 	b.w	800c860 <nan>
 800e02e:	f1b9 0f00 	cmp.w	r9, #0
 800e032:	da36      	bge.n	800e0a2 <__ieee754_pow+0xda>
 800e034:	496e      	ldr	r1, [pc, #440]	; (800e1f0 <__ieee754_pow+0x228>)
 800e036:	428e      	cmp	r6, r1
 800e038:	dc51      	bgt.n	800e0de <__ieee754_pow+0x116>
 800e03a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800e03e:	428e      	cmp	r6, r1
 800e040:	f340 84af 	ble.w	800e9a2 <__ieee754_pow+0x9da>
 800e044:	1531      	asrs	r1, r6, #20
 800e046:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e04a:	2914      	cmp	r1, #20
 800e04c:	dd0f      	ble.n	800e06e <__ieee754_pow+0xa6>
 800e04e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800e052:	fa20 fc01 	lsr.w	ip, r0, r1
 800e056:	fa0c f101 	lsl.w	r1, ip, r1
 800e05a:	4281      	cmp	r1, r0
 800e05c:	f040 84a1 	bne.w	800e9a2 <__ieee754_pow+0x9da>
 800e060:	f00c 0c01 	and.w	ip, ip, #1
 800e064:	f1cc 0102 	rsb	r1, ip, #2
 800e068:	9100      	str	r1, [sp, #0]
 800e06a:	b180      	cbz	r0, 800e08e <__ieee754_pow+0xc6>
 800e06c:	e059      	b.n	800e122 <__ieee754_pow+0x15a>
 800e06e:	2800      	cmp	r0, #0
 800e070:	d155      	bne.n	800e11e <__ieee754_pow+0x156>
 800e072:	f1c1 0114 	rsb	r1, r1, #20
 800e076:	fa46 fc01 	asr.w	ip, r6, r1
 800e07a:	fa0c f101 	lsl.w	r1, ip, r1
 800e07e:	42b1      	cmp	r1, r6
 800e080:	f040 848c 	bne.w	800e99c <__ieee754_pow+0x9d4>
 800e084:	f00c 0c01 	and.w	ip, ip, #1
 800e088:	f1cc 0102 	rsb	r1, ip, #2
 800e08c:	9100      	str	r1, [sp, #0]
 800e08e:	4959      	ldr	r1, [pc, #356]	; (800e1f4 <__ieee754_pow+0x22c>)
 800e090:	428e      	cmp	r6, r1
 800e092:	d12d      	bne.n	800e0f0 <__ieee754_pow+0x128>
 800e094:	2f00      	cmp	r7, #0
 800e096:	da79      	bge.n	800e18c <__ieee754_pow+0x1c4>
 800e098:	4956      	ldr	r1, [pc, #344]	; (800e1f4 <__ieee754_pow+0x22c>)
 800e09a:	2000      	movs	r0, #0
 800e09c:	f7f2 fbfe 	bl	800089c <__aeabi_ddiv>
 800e0a0:	e016      	b.n	800e0d0 <__ieee754_pow+0x108>
 800e0a2:	2100      	movs	r1, #0
 800e0a4:	9100      	str	r1, [sp, #0]
 800e0a6:	2800      	cmp	r0, #0
 800e0a8:	d13b      	bne.n	800e122 <__ieee754_pow+0x15a>
 800e0aa:	494f      	ldr	r1, [pc, #316]	; (800e1e8 <__ieee754_pow+0x220>)
 800e0ac:	428e      	cmp	r6, r1
 800e0ae:	d1ee      	bne.n	800e08e <__ieee754_pow+0xc6>
 800e0b0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e0b4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e0b8:	ea53 0308 	orrs.w	r3, r3, r8
 800e0bc:	f000 8466 	beq.w	800e98c <__ieee754_pow+0x9c4>
 800e0c0:	4b4d      	ldr	r3, [pc, #308]	; (800e1f8 <__ieee754_pow+0x230>)
 800e0c2:	429c      	cmp	r4, r3
 800e0c4:	dd0d      	ble.n	800e0e2 <__ieee754_pow+0x11a>
 800e0c6:	2f00      	cmp	r7, #0
 800e0c8:	f280 8464 	bge.w	800e994 <__ieee754_pow+0x9cc>
 800e0cc:	2000      	movs	r0, #0
 800e0ce:	2100      	movs	r1, #0
 800e0d0:	ec41 0b10 	vmov	d0, r0, r1
 800e0d4:	b00d      	add	sp, #52	; 0x34
 800e0d6:	ecbd 8b06 	vpop	{d8-d10}
 800e0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0de:	2102      	movs	r1, #2
 800e0e0:	e7e0      	b.n	800e0a4 <__ieee754_pow+0xdc>
 800e0e2:	2f00      	cmp	r7, #0
 800e0e4:	daf2      	bge.n	800e0cc <__ieee754_pow+0x104>
 800e0e6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800e0ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e0ee:	e7ef      	b.n	800e0d0 <__ieee754_pow+0x108>
 800e0f0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800e0f4:	d104      	bne.n	800e100 <__ieee754_pow+0x138>
 800e0f6:	4610      	mov	r0, r2
 800e0f8:	4619      	mov	r1, r3
 800e0fa:	f7f2 faa5 	bl	8000648 <__aeabi_dmul>
 800e0fe:	e7e7      	b.n	800e0d0 <__ieee754_pow+0x108>
 800e100:	493e      	ldr	r1, [pc, #248]	; (800e1fc <__ieee754_pow+0x234>)
 800e102:	428f      	cmp	r7, r1
 800e104:	d10d      	bne.n	800e122 <__ieee754_pow+0x15a>
 800e106:	f1b9 0f00 	cmp.w	r9, #0
 800e10a:	db0a      	blt.n	800e122 <__ieee754_pow+0x15a>
 800e10c:	ec43 2b10 	vmov	d0, r2, r3
 800e110:	b00d      	add	sp, #52	; 0x34
 800e112:	ecbd 8b06 	vpop	{d8-d10}
 800e116:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e11a:	f000 be83 	b.w	800ee24 <__ieee754_sqrt>
 800e11e:	2100      	movs	r1, #0
 800e120:	9100      	str	r1, [sp, #0]
 800e122:	ec43 2b10 	vmov	d0, r2, r3
 800e126:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e12a:	f7ff fbf9 	bl	800d920 <fabs>
 800e12e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e132:	ec51 0b10 	vmov	r0, r1, d0
 800e136:	f1b8 0f00 	cmp.w	r8, #0
 800e13a:	d12a      	bne.n	800e192 <__ieee754_pow+0x1ca>
 800e13c:	b12c      	cbz	r4, 800e14a <__ieee754_pow+0x182>
 800e13e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800e1f4 <__ieee754_pow+0x22c>
 800e142:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800e146:	45e6      	cmp	lr, ip
 800e148:	d123      	bne.n	800e192 <__ieee754_pow+0x1ca>
 800e14a:	2f00      	cmp	r7, #0
 800e14c:	da05      	bge.n	800e15a <__ieee754_pow+0x192>
 800e14e:	4602      	mov	r2, r0
 800e150:	460b      	mov	r3, r1
 800e152:	2000      	movs	r0, #0
 800e154:	4927      	ldr	r1, [pc, #156]	; (800e1f4 <__ieee754_pow+0x22c>)
 800e156:	f7f2 fba1 	bl	800089c <__aeabi_ddiv>
 800e15a:	f1b9 0f00 	cmp.w	r9, #0
 800e15e:	dab7      	bge.n	800e0d0 <__ieee754_pow+0x108>
 800e160:	9b00      	ldr	r3, [sp, #0]
 800e162:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e166:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e16a:	4323      	orrs	r3, r4
 800e16c:	d108      	bne.n	800e180 <__ieee754_pow+0x1b8>
 800e16e:	4602      	mov	r2, r0
 800e170:	460b      	mov	r3, r1
 800e172:	4610      	mov	r0, r2
 800e174:	4619      	mov	r1, r3
 800e176:	f7f2 f8af 	bl	80002d8 <__aeabi_dsub>
 800e17a:	4602      	mov	r2, r0
 800e17c:	460b      	mov	r3, r1
 800e17e:	e78d      	b.n	800e09c <__ieee754_pow+0xd4>
 800e180:	9b00      	ldr	r3, [sp, #0]
 800e182:	2b01      	cmp	r3, #1
 800e184:	d1a4      	bne.n	800e0d0 <__ieee754_pow+0x108>
 800e186:	4602      	mov	r2, r0
 800e188:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e18c:	4610      	mov	r0, r2
 800e18e:	4619      	mov	r1, r3
 800e190:	e79e      	b.n	800e0d0 <__ieee754_pow+0x108>
 800e192:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800e196:	f10c 35ff 	add.w	r5, ip, #4294967295
 800e19a:	950a      	str	r5, [sp, #40]	; 0x28
 800e19c:	9d00      	ldr	r5, [sp, #0]
 800e19e:	46ac      	mov	ip, r5
 800e1a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800e1a2:	ea5c 0505 	orrs.w	r5, ip, r5
 800e1a6:	d0e4      	beq.n	800e172 <__ieee754_pow+0x1aa>
 800e1a8:	4b15      	ldr	r3, [pc, #84]	; (800e200 <__ieee754_pow+0x238>)
 800e1aa:	429e      	cmp	r6, r3
 800e1ac:	f340 80fc 	ble.w	800e3a8 <__ieee754_pow+0x3e0>
 800e1b0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e1b4:	429e      	cmp	r6, r3
 800e1b6:	4b10      	ldr	r3, [pc, #64]	; (800e1f8 <__ieee754_pow+0x230>)
 800e1b8:	dd07      	ble.n	800e1ca <__ieee754_pow+0x202>
 800e1ba:	429c      	cmp	r4, r3
 800e1bc:	dc0a      	bgt.n	800e1d4 <__ieee754_pow+0x20c>
 800e1be:	2f00      	cmp	r7, #0
 800e1c0:	da84      	bge.n	800e0cc <__ieee754_pow+0x104>
 800e1c2:	a307      	add	r3, pc, #28	; (adr r3, 800e1e0 <__ieee754_pow+0x218>)
 800e1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c8:	e795      	b.n	800e0f6 <__ieee754_pow+0x12e>
 800e1ca:	429c      	cmp	r4, r3
 800e1cc:	dbf7      	blt.n	800e1be <__ieee754_pow+0x1f6>
 800e1ce:	4b09      	ldr	r3, [pc, #36]	; (800e1f4 <__ieee754_pow+0x22c>)
 800e1d0:	429c      	cmp	r4, r3
 800e1d2:	dd17      	ble.n	800e204 <__ieee754_pow+0x23c>
 800e1d4:	2f00      	cmp	r7, #0
 800e1d6:	dcf4      	bgt.n	800e1c2 <__ieee754_pow+0x1fa>
 800e1d8:	e778      	b.n	800e0cc <__ieee754_pow+0x104>
 800e1da:	bf00      	nop
 800e1dc:	f3af 8000 	nop.w
 800e1e0:	8800759c 	.word	0x8800759c
 800e1e4:	7e37e43c 	.word	0x7e37e43c
 800e1e8:	7ff00000 	.word	0x7ff00000
 800e1ec:	08010180 	.word	0x08010180
 800e1f0:	433fffff 	.word	0x433fffff
 800e1f4:	3ff00000 	.word	0x3ff00000
 800e1f8:	3fefffff 	.word	0x3fefffff
 800e1fc:	3fe00000 	.word	0x3fe00000
 800e200:	41e00000 	.word	0x41e00000
 800e204:	4b64      	ldr	r3, [pc, #400]	; (800e398 <__ieee754_pow+0x3d0>)
 800e206:	2200      	movs	r2, #0
 800e208:	f7f2 f866 	bl	80002d8 <__aeabi_dsub>
 800e20c:	a356      	add	r3, pc, #344	; (adr r3, 800e368 <__ieee754_pow+0x3a0>)
 800e20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e212:	4604      	mov	r4, r0
 800e214:	460d      	mov	r5, r1
 800e216:	f7f2 fa17 	bl	8000648 <__aeabi_dmul>
 800e21a:	a355      	add	r3, pc, #340	; (adr r3, 800e370 <__ieee754_pow+0x3a8>)
 800e21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e220:	4606      	mov	r6, r0
 800e222:	460f      	mov	r7, r1
 800e224:	4620      	mov	r0, r4
 800e226:	4629      	mov	r1, r5
 800e228:	f7f2 fa0e 	bl	8000648 <__aeabi_dmul>
 800e22c:	4b5b      	ldr	r3, [pc, #364]	; (800e39c <__ieee754_pow+0x3d4>)
 800e22e:	4682      	mov	sl, r0
 800e230:	468b      	mov	fp, r1
 800e232:	2200      	movs	r2, #0
 800e234:	4620      	mov	r0, r4
 800e236:	4629      	mov	r1, r5
 800e238:	f7f2 fa06 	bl	8000648 <__aeabi_dmul>
 800e23c:	4602      	mov	r2, r0
 800e23e:	460b      	mov	r3, r1
 800e240:	a14d      	add	r1, pc, #308	; (adr r1, 800e378 <__ieee754_pow+0x3b0>)
 800e242:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e246:	f7f2 f847 	bl	80002d8 <__aeabi_dsub>
 800e24a:	4622      	mov	r2, r4
 800e24c:	462b      	mov	r3, r5
 800e24e:	f7f2 f9fb 	bl	8000648 <__aeabi_dmul>
 800e252:	4602      	mov	r2, r0
 800e254:	460b      	mov	r3, r1
 800e256:	2000      	movs	r0, #0
 800e258:	4951      	ldr	r1, [pc, #324]	; (800e3a0 <__ieee754_pow+0x3d8>)
 800e25a:	f7f2 f83d 	bl	80002d8 <__aeabi_dsub>
 800e25e:	4622      	mov	r2, r4
 800e260:	4680      	mov	r8, r0
 800e262:	4689      	mov	r9, r1
 800e264:	462b      	mov	r3, r5
 800e266:	4620      	mov	r0, r4
 800e268:	4629      	mov	r1, r5
 800e26a:	f7f2 f9ed 	bl	8000648 <__aeabi_dmul>
 800e26e:	4602      	mov	r2, r0
 800e270:	460b      	mov	r3, r1
 800e272:	4640      	mov	r0, r8
 800e274:	4649      	mov	r1, r9
 800e276:	f7f2 f9e7 	bl	8000648 <__aeabi_dmul>
 800e27a:	a341      	add	r3, pc, #260	; (adr r3, 800e380 <__ieee754_pow+0x3b8>)
 800e27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e280:	f7f2 f9e2 	bl	8000648 <__aeabi_dmul>
 800e284:	4602      	mov	r2, r0
 800e286:	460b      	mov	r3, r1
 800e288:	4650      	mov	r0, sl
 800e28a:	4659      	mov	r1, fp
 800e28c:	f7f2 f824 	bl	80002d8 <__aeabi_dsub>
 800e290:	4602      	mov	r2, r0
 800e292:	460b      	mov	r3, r1
 800e294:	4680      	mov	r8, r0
 800e296:	4689      	mov	r9, r1
 800e298:	4630      	mov	r0, r6
 800e29a:	4639      	mov	r1, r7
 800e29c:	f7f2 f81e 	bl	80002dc <__adddf3>
 800e2a0:	2400      	movs	r4, #0
 800e2a2:	4632      	mov	r2, r6
 800e2a4:	463b      	mov	r3, r7
 800e2a6:	4620      	mov	r0, r4
 800e2a8:	460d      	mov	r5, r1
 800e2aa:	f7f2 f815 	bl	80002d8 <__aeabi_dsub>
 800e2ae:	4602      	mov	r2, r0
 800e2b0:	460b      	mov	r3, r1
 800e2b2:	4640      	mov	r0, r8
 800e2b4:	4649      	mov	r1, r9
 800e2b6:	f7f2 f80f 	bl	80002d8 <__aeabi_dsub>
 800e2ba:	9b00      	ldr	r3, [sp, #0]
 800e2bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e2be:	3b01      	subs	r3, #1
 800e2c0:	4313      	orrs	r3, r2
 800e2c2:	4682      	mov	sl, r0
 800e2c4:	468b      	mov	fp, r1
 800e2c6:	f040 81f1 	bne.w	800e6ac <__ieee754_pow+0x6e4>
 800e2ca:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800e388 <__ieee754_pow+0x3c0>
 800e2ce:	eeb0 8a47 	vmov.f32	s16, s14
 800e2d2:	eef0 8a67 	vmov.f32	s17, s15
 800e2d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e2da:	2600      	movs	r6, #0
 800e2dc:	4632      	mov	r2, r6
 800e2de:	463b      	mov	r3, r7
 800e2e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2e4:	f7f1 fff8 	bl	80002d8 <__aeabi_dsub>
 800e2e8:	4622      	mov	r2, r4
 800e2ea:	462b      	mov	r3, r5
 800e2ec:	f7f2 f9ac 	bl	8000648 <__aeabi_dmul>
 800e2f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e2f4:	4680      	mov	r8, r0
 800e2f6:	4689      	mov	r9, r1
 800e2f8:	4650      	mov	r0, sl
 800e2fa:	4659      	mov	r1, fp
 800e2fc:	f7f2 f9a4 	bl	8000648 <__aeabi_dmul>
 800e300:	4602      	mov	r2, r0
 800e302:	460b      	mov	r3, r1
 800e304:	4640      	mov	r0, r8
 800e306:	4649      	mov	r1, r9
 800e308:	f7f1 ffe8 	bl	80002dc <__adddf3>
 800e30c:	4632      	mov	r2, r6
 800e30e:	463b      	mov	r3, r7
 800e310:	4680      	mov	r8, r0
 800e312:	4689      	mov	r9, r1
 800e314:	4620      	mov	r0, r4
 800e316:	4629      	mov	r1, r5
 800e318:	f7f2 f996 	bl	8000648 <__aeabi_dmul>
 800e31c:	460b      	mov	r3, r1
 800e31e:	4604      	mov	r4, r0
 800e320:	460d      	mov	r5, r1
 800e322:	4602      	mov	r2, r0
 800e324:	4649      	mov	r1, r9
 800e326:	4640      	mov	r0, r8
 800e328:	f7f1 ffd8 	bl	80002dc <__adddf3>
 800e32c:	4b1d      	ldr	r3, [pc, #116]	; (800e3a4 <__ieee754_pow+0x3dc>)
 800e32e:	4299      	cmp	r1, r3
 800e330:	ec45 4b19 	vmov	d9, r4, r5
 800e334:	4606      	mov	r6, r0
 800e336:	460f      	mov	r7, r1
 800e338:	468b      	mov	fp, r1
 800e33a:	f340 82fe 	ble.w	800e93a <__ieee754_pow+0x972>
 800e33e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e342:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e346:	4303      	orrs	r3, r0
 800e348:	f000 81f0 	beq.w	800e72c <__ieee754_pow+0x764>
 800e34c:	a310      	add	r3, pc, #64	; (adr r3, 800e390 <__ieee754_pow+0x3c8>)
 800e34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e352:	ec51 0b18 	vmov	r0, r1, d8
 800e356:	f7f2 f977 	bl	8000648 <__aeabi_dmul>
 800e35a:	a30d      	add	r3, pc, #52	; (adr r3, 800e390 <__ieee754_pow+0x3c8>)
 800e35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e360:	e6cb      	b.n	800e0fa <__ieee754_pow+0x132>
 800e362:	bf00      	nop
 800e364:	f3af 8000 	nop.w
 800e368:	60000000 	.word	0x60000000
 800e36c:	3ff71547 	.word	0x3ff71547
 800e370:	f85ddf44 	.word	0xf85ddf44
 800e374:	3e54ae0b 	.word	0x3e54ae0b
 800e378:	55555555 	.word	0x55555555
 800e37c:	3fd55555 	.word	0x3fd55555
 800e380:	652b82fe 	.word	0x652b82fe
 800e384:	3ff71547 	.word	0x3ff71547
 800e388:	00000000 	.word	0x00000000
 800e38c:	bff00000 	.word	0xbff00000
 800e390:	8800759c 	.word	0x8800759c
 800e394:	7e37e43c 	.word	0x7e37e43c
 800e398:	3ff00000 	.word	0x3ff00000
 800e39c:	3fd00000 	.word	0x3fd00000
 800e3a0:	3fe00000 	.word	0x3fe00000
 800e3a4:	408fffff 	.word	0x408fffff
 800e3a8:	4bd7      	ldr	r3, [pc, #860]	; (800e708 <__ieee754_pow+0x740>)
 800e3aa:	ea03 0309 	and.w	r3, r3, r9
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	b92b      	cbnz	r3, 800e3be <__ieee754_pow+0x3f6>
 800e3b2:	4bd6      	ldr	r3, [pc, #856]	; (800e70c <__ieee754_pow+0x744>)
 800e3b4:	f7f2 f948 	bl	8000648 <__aeabi_dmul>
 800e3b8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e3bc:	460c      	mov	r4, r1
 800e3be:	1523      	asrs	r3, r4, #20
 800e3c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e3c4:	4413      	add	r3, r2
 800e3c6:	9309      	str	r3, [sp, #36]	; 0x24
 800e3c8:	4bd1      	ldr	r3, [pc, #836]	; (800e710 <__ieee754_pow+0x748>)
 800e3ca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e3ce:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e3d2:	429c      	cmp	r4, r3
 800e3d4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e3d8:	dd08      	ble.n	800e3ec <__ieee754_pow+0x424>
 800e3da:	4bce      	ldr	r3, [pc, #824]	; (800e714 <__ieee754_pow+0x74c>)
 800e3dc:	429c      	cmp	r4, r3
 800e3de:	f340 8163 	ble.w	800e6a8 <__ieee754_pow+0x6e0>
 800e3e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3e4:	3301      	adds	r3, #1
 800e3e6:	9309      	str	r3, [sp, #36]	; 0x24
 800e3e8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e3ec:	2400      	movs	r4, #0
 800e3ee:	00e3      	lsls	r3, r4, #3
 800e3f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800e3f2:	4bc9      	ldr	r3, [pc, #804]	; (800e718 <__ieee754_pow+0x750>)
 800e3f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e3f8:	ed93 7b00 	vldr	d7, [r3]
 800e3fc:	4629      	mov	r1, r5
 800e3fe:	ec53 2b17 	vmov	r2, r3, d7
 800e402:	eeb0 8a47 	vmov.f32	s16, s14
 800e406:	eef0 8a67 	vmov.f32	s17, s15
 800e40a:	4682      	mov	sl, r0
 800e40c:	f7f1 ff64 	bl	80002d8 <__aeabi_dsub>
 800e410:	4652      	mov	r2, sl
 800e412:	4606      	mov	r6, r0
 800e414:	460f      	mov	r7, r1
 800e416:	462b      	mov	r3, r5
 800e418:	ec51 0b18 	vmov	r0, r1, d8
 800e41c:	f7f1 ff5e 	bl	80002dc <__adddf3>
 800e420:	4602      	mov	r2, r0
 800e422:	460b      	mov	r3, r1
 800e424:	2000      	movs	r0, #0
 800e426:	49bd      	ldr	r1, [pc, #756]	; (800e71c <__ieee754_pow+0x754>)
 800e428:	f7f2 fa38 	bl	800089c <__aeabi_ddiv>
 800e42c:	ec41 0b19 	vmov	d9, r0, r1
 800e430:	4602      	mov	r2, r0
 800e432:	460b      	mov	r3, r1
 800e434:	4630      	mov	r0, r6
 800e436:	4639      	mov	r1, r7
 800e438:	f7f2 f906 	bl	8000648 <__aeabi_dmul>
 800e43c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e440:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e444:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e448:	2300      	movs	r3, #0
 800e44a:	9304      	str	r3, [sp, #16]
 800e44c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e450:	46ab      	mov	fp, r5
 800e452:	106d      	asrs	r5, r5, #1
 800e454:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e458:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e45c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e460:	2200      	movs	r2, #0
 800e462:	4640      	mov	r0, r8
 800e464:	4649      	mov	r1, r9
 800e466:	4614      	mov	r4, r2
 800e468:	461d      	mov	r5, r3
 800e46a:	f7f2 f8ed 	bl	8000648 <__aeabi_dmul>
 800e46e:	4602      	mov	r2, r0
 800e470:	460b      	mov	r3, r1
 800e472:	4630      	mov	r0, r6
 800e474:	4639      	mov	r1, r7
 800e476:	f7f1 ff2f 	bl	80002d8 <__aeabi_dsub>
 800e47a:	ec53 2b18 	vmov	r2, r3, d8
 800e47e:	4606      	mov	r6, r0
 800e480:	460f      	mov	r7, r1
 800e482:	4620      	mov	r0, r4
 800e484:	4629      	mov	r1, r5
 800e486:	f7f1 ff27 	bl	80002d8 <__aeabi_dsub>
 800e48a:	4602      	mov	r2, r0
 800e48c:	460b      	mov	r3, r1
 800e48e:	4650      	mov	r0, sl
 800e490:	4659      	mov	r1, fp
 800e492:	f7f1 ff21 	bl	80002d8 <__aeabi_dsub>
 800e496:	4642      	mov	r2, r8
 800e498:	464b      	mov	r3, r9
 800e49a:	f7f2 f8d5 	bl	8000648 <__aeabi_dmul>
 800e49e:	4602      	mov	r2, r0
 800e4a0:	460b      	mov	r3, r1
 800e4a2:	4630      	mov	r0, r6
 800e4a4:	4639      	mov	r1, r7
 800e4a6:	f7f1 ff17 	bl	80002d8 <__aeabi_dsub>
 800e4aa:	ec53 2b19 	vmov	r2, r3, d9
 800e4ae:	f7f2 f8cb 	bl	8000648 <__aeabi_dmul>
 800e4b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e4b6:	ec41 0b18 	vmov	d8, r0, r1
 800e4ba:	4610      	mov	r0, r2
 800e4bc:	4619      	mov	r1, r3
 800e4be:	f7f2 f8c3 	bl	8000648 <__aeabi_dmul>
 800e4c2:	a37d      	add	r3, pc, #500	; (adr r3, 800e6b8 <__ieee754_pow+0x6f0>)
 800e4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c8:	4604      	mov	r4, r0
 800e4ca:	460d      	mov	r5, r1
 800e4cc:	f7f2 f8bc 	bl	8000648 <__aeabi_dmul>
 800e4d0:	a37b      	add	r3, pc, #492	; (adr r3, 800e6c0 <__ieee754_pow+0x6f8>)
 800e4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4d6:	f7f1 ff01 	bl	80002dc <__adddf3>
 800e4da:	4622      	mov	r2, r4
 800e4dc:	462b      	mov	r3, r5
 800e4de:	f7f2 f8b3 	bl	8000648 <__aeabi_dmul>
 800e4e2:	a379      	add	r3, pc, #484	; (adr r3, 800e6c8 <__ieee754_pow+0x700>)
 800e4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4e8:	f7f1 fef8 	bl	80002dc <__adddf3>
 800e4ec:	4622      	mov	r2, r4
 800e4ee:	462b      	mov	r3, r5
 800e4f0:	f7f2 f8aa 	bl	8000648 <__aeabi_dmul>
 800e4f4:	a376      	add	r3, pc, #472	; (adr r3, 800e6d0 <__ieee754_pow+0x708>)
 800e4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4fa:	f7f1 feef 	bl	80002dc <__adddf3>
 800e4fe:	4622      	mov	r2, r4
 800e500:	462b      	mov	r3, r5
 800e502:	f7f2 f8a1 	bl	8000648 <__aeabi_dmul>
 800e506:	a374      	add	r3, pc, #464	; (adr r3, 800e6d8 <__ieee754_pow+0x710>)
 800e508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e50c:	f7f1 fee6 	bl	80002dc <__adddf3>
 800e510:	4622      	mov	r2, r4
 800e512:	462b      	mov	r3, r5
 800e514:	f7f2 f898 	bl	8000648 <__aeabi_dmul>
 800e518:	a371      	add	r3, pc, #452	; (adr r3, 800e6e0 <__ieee754_pow+0x718>)
 800e51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e51e:	f7f1 fedd 	bl	80002dc <__adddf3>
 800e522:	4622      	mov	r2, r4
 800e524:	4606      	mov	r6, r0
 800e526:	460f      	mov	r7, r1
 800e528:	462b      	mov	r3, r5
 800e52a:	4620      	mov	r0, r4
 800e52c:	4629      	mov	r1, r5
 800e52e:	f7f2 f88b 	bl	8000648 <__aeabi_dmul>
 800e532:	4602      	mov	r2, r0
 800e534:	460b      	mov	r3, r1
 800e536:	4630      	mov	r0, r6
 800e538:	4639      	mov	r1, r7
 800e53a:	f7f2 f885 	bl	8000648 <__aeabi_dmul>
 800e53e:	4642      	mov	r2, r8
 800e540:	4604      	mov	r4, r0
 800e542:	460d      	mov	r5, r1
 800e544:	464b      	mov	r3, r9
 800e546:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e54a:	f7f1 fec7 	bl	80002dc <__adddf3>
 800e54e:	ec53 2b18 	vmov	r2, r3, d8
 800e552:	f7f2 f879 	bl	8000648 <__aeabi_dmul>
 800e556:	4622      	mov	r2, r4
 800e558:	462b      	mov	r3, r5
 800e55a:	f7f1 febf 	bl	80002dc <__adddf3>
 800e55e:	4642      	mov	r2, r8
 800e560:	4682      	mov	sl, r0
 800e562:	468b      	mov	fp, r1
 800e564:	464b      	mov	r3, r9
 800e566:	4640      	mov	r0, r8
 800e568:	4649      	mov	r1, r9
 800e56a:	f7f2 f86d 	bl	8000648 <__aeabi_dmul>
 800e56e:	4b6c      	ldr	r3, [pc, #432]	; (800e720 <__ieee754_pow+0x758>)
 800e570:	2200      	movs	r2, #0
 800e572:	4606      	mov	r6, r0
 800e574:	460f      	mov	r7, r1
 800e576:	f7f1 feb1 	bl	80002dc <__adddf3>
 800e57a:	4652      	mov	r2, sl
 800e57c:	465b      	mov	r3, fp
 800e57e:	f7f1 fead 	bl	80002dc <__adddf3>
 800e582:	9c04      	ldr	r4, [sp, #16]
 800e584:	460d      	mov	r5, r1
 800e586:	4622      	mov	r2, r4
 800e588:	460b      	mov	r3, r1
 800e58a:	4640      	mov	r0, r8
 800e58c:	4649      	mov	r1, r9
 800e58e:	f7f2 f85b 	bl	8000648 <__aeabi_dmul>
 800e592:	4b63      	ldr	r3, [pc, #396]	; (800e720 <__ieee754_pow+0x758>)
 800e594:	4680      	mov	r8, r0
 800e596:	4689      	mov	r9, r1
 800e598:	2200      	movs	r2, #0
 800e59a:	4620      	mov	r0, r4
 800e59c:	4629      	mov	r1, r5
 800e59e:	f7f1 fe9b 	bl	80002d8 <__aeabi_dsub>
 800e5a2:	4632      	mov	r2, r6
 800e5a4:	463b      	mov	r3, r7
 800e5a6:	f7f1 fe97 	bl	80002d8 <__aeabi_dsub>
 800e5aa:	4602      	mov	r2, r0
 800e5ac:	460b      	mov	r3, r1
 800e5ae:	4650      	mov	r0, sl
 800e5b0:	4659      	mov	r1, fp
 800e5b2:	f7f1 fe91 	bl	80002d8 <__aeabi_dsub>
 800e5b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e5ba:	f7f2 f845 	bl	8000648 <__aeabi_dmul>
 800e5be:	4622      	mov	r2, r4
 800e5c0:	4606      	mov	r6, r0
 800e5c2:	460f      	mov	r7, r1
 800e5c4:	462b      	mov	r3, r5
 800e5c6:	ec51 0b18 	vmov	r0, r1, d8
 800e5ca:	f7f2 f83d 	bl	8000648 <__aeabi_dmul>
 800e5ce:	4602      	mov	r2, r0
 800e5d0:	460b      	mov	r3, r1
 800e5d2:	4630      	mov	r0, r6
 800e5d4:	4639      	mov	r1, r7
 800e5d6:	f7f1 fe81 	bl	80002dc <__adddf3>
 800e5da:	4606      	mov	r6, r0
 800e5dc:	460f      	mov	r7, r1
 800e5de:	4602      	mov	r2, r0
 800e5e0:	460b      	mov	r3, r1
 800e5e2:	4640      	mov	r0, r8
 800e5e4:	4649      	mov	r1, r9
 800e5e6:	f7f1 fe79 	bl	80002dc <__adddf3>
 800e5ea:	9c04      	ldr	r4, [sp, #16]
 800e5ec:	a33e      	add	r3, pc, #248	; (adr r3, 800e6e8 <__ieee754_pow+0x720>)
 800e5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f2:	4620      	mov	r0, r4
 800e5f4:	460d      	mov	r5, r1
 800e5f6:	f7f2 f827 	bl	8000648 <__aeabi_dmul>
 800e5fa:	4642      	mov	r2, r8
 800e5fc:	ec41 0b18 	vmov	d8, r0, r1
 800e600:	464b      	mov	r3, r9
 800e602:	4620      	mov	r0, r4
 800e604:	4629      	mov	r1, r5
 800e606:	f7f1 fe67 	bl	80002d8 <__aeabi_dsub>
 800e60a:	4602      	mov	r2, r0
 800e60c:	460b      	mov	r3, r1
 800e60e:	4630      	mov	r0, r6
 800e610:	4639      	mov	r1, r7
 800e612:	f7f1 fe61 	bl	80002d8 <__aeabi_dsub>
 800e616:	a336      	add	r3, pc, #216	; (adr r3, 800e6f0 <__ieee754_pow+0x728>)
 800e618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e61c:	f7f2 f814 	bl	8000648 <__aeabi_dmul>
 800e620:	a335      	add	r3, pc, #212	; (adr r3, 800e6f8 <__ieee754_pow+0x730>)
 800e622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e626:	4606      	mov	r6, r0
 800e628:	460f      	mov	r7, r1
 800e62a:	4620      	mov	r0, r4
 800e62c:	4629      	mov	r1, r5
 800e62e:	f7f2 f80b 	bl	8000648 <__aeabi_dmul>
 800e632:	4602      	mov	r2, r0
 800e634:	460b      	mov	r3, r1
 800e636:	4630      	mov	r0, r6
 800e638:	4639      	mov	r1, r7
 800e63a:	f7f1 fe4f 	bl	80002dc <__adddf3>
 800e63e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e640:	4b38      	ldr	r3, [pc, #224]	; (800e724 <__ieee754_pow+0x75c>)
 800e642:	4413      	add	r3, r2
 800e644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e648:	f7f1 fe48 	bl	80002dc <__adddf3>
 800e64c:	4682      	mov	sl, r0
 800e64e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e650:	468b      	mov	fp, r1
 800e652:	f7f1 ff8f 	bl	8000574 <__aeabi_i2d>
 800e656:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e658:	4b33      	ldr	r3, [pc, #204]	; (800e728 <__ieee754_pow+0x760>)
 800e65a:	4413      	add	r3, r2
 800e65c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e660:	4606      	mov	r6, r0
 800e662:	460f      	mov	r7, r1
 800e664:	4652      	mov	r2, sl
 800e666:	465b      	mov	r3, fp
 800e668:	ec51 0b18 	vmov	r0, r1, d8
 800e66c:	f7f1 fe36 	bl	80002dc <__adddf3>
 800e670:	4642      	mov	r2, r8
 800e672:	464b      	mov	r3, r9
 800e674:	f7f1 fe32 	bl	80002dc <__adddf3>
 800e678:	4632      	mov	r2, r6
 800e67a:	463b      	mov	r3, r7
 800e67c:	f7f1 fe2e 	bl	80002dc <__adddf3>
 800e680:	9c04      	ldr	r4, [sp, #16]
 800e682:	4632      	mov	r2, r6
 800e684:	463b      	mov	r3, r7
 800e686:	4620      	mov	r0, r4
 800e688:	460d      	mov	r5, r1
 800e68a:	f7f1 fe25 	bl	80002d8 <__aeabi_dsub>
 800e68e:	4642      	mov	r2, r8
 800e690:	464b      	mov	r3, r9
 800e692:	f7f1 fe21 	bl	80002d8 <__aeabi_dsub>
 800e696:	ec53 2b18 	vmov	r2, r3, d8
 800e69a:	f7f1 fe1d 	bl	80002d8 <__aeabi_dsub>
 800e69e:	4602      	mov	r2, r0
 800e6a0:	460b      	mov	r3, r1
 800e6a2:	4650      	mov	r0, sl
 800e6a4:	4659      	mov	r1, fp
 800e6a6:	e606      	b.n	800e2b6 <__ieee754_pow+0x2ee>
 800e6a8:	2401      	movs	r4, #1
 800e6aa:	e6a0      	b.n	800e3ee <__ieee754_pow+0x426>
 800e6ac:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800e700 <__ieee754_pow+0x738>
 800e6b0:	e60d      	b.n	800e2ce <__ieee754_pow+0x306>
 800e6b2:	bf00      	nop
 800e6b4:	f3af 8000 	nop.w
 800e6b8:	4a454eef 	.word	0x4a454eef
 800e6bc:	3fca7e28 	.word	0x3fca7e28
 800e6c0:	93c9db65 	.word	0x93c9db65
 800e6c4:	3fcd864a 	.word	0x3fcd864a
 800e6c8:	a91d4101 	.word	0xa91d4101
 800e6cc:	3fd17460 	.word	0x3fd17460
 800e6d0:	518f264d 	.word	0x518f264d
 800e6d4:	3fd55555 	.word	0x3fd55555
 800e6d8:	db6fabff 	.word	0xdb6fabff
 800e6dc:	3fdb6db6 	.word	0x3fdb6db6
 800e6e0:	33333303 	.word	0x33333303
 800e6e4:	3fe33333 	.word	0x3fe33333
 800e6e8:	e0000000 	.word	0xe0000000
 800e6ec:	3feec709 	.word	0x3feec709
 800e6f0:	dc3a03fd 	.word	0xdc3a03fd
 800e6f4:	3feec709 	.word	0x3feec709
 800e6f8:	145b01f5 	.word	0x145b01f5
 800e6fc:	be3e2fe0 	.word	0xbe3e2fe0
 800e700:	00000000 	.word	0x00000000
 800e704:	3ff00000 	.word	0x3ff00000
 800e708:	7ff00000 	.word	0x7ff00000
 800e70c:	43400000 	.word	0x43400000
 800e710:	0003988e 	.word	0x0003988e
 800e714:	000bb679 	.word	0x000bb679
 800e718:	08010258 	.word	0x08010258
 800e71c:	3ff00000 	.word	0x3ff00000
 800e720:	40080000 	.word	0x40080000
 800e724:	08010278 	.word	0x08010278
 800e728:	08010268 	.word	0x08010268
 800e72c:	a3b5      	add	r3, pc, #724	; (adr r3, 800ea04 <__ieee754_pow+0xa3c>)
 800e72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e732:	4640      	mov	r0, r8
 800e734:	4649      	mov	r1, r9
 800e736:	f7f1 fdd1 	bl	80002dc <__adddf3>
 800e73a:	4622      	mov	r2, r4
 800e73c:	ec41 0b1a 	vmov	d10, r0, r1
 800e740:	462b      	mov	r3, r5
 800e742:	4630      	mov	r0, r6
 800e744:	4639      	mov	r1, r7
 800e746:	f7f1 fdc7 	bl	80002d8 <__aeabi_dsub>
 800e74a:	4602      	mov	r2, r0
 800e74c:	460b      	mov	r3, r1
 800e74e:	ec51 0b1a 	vmov	r0, r1, d10
 800e752:	f7f2 fa09 	bl	8000b68 <__aeabi_dcmpgt>
 800e756:	2800      	cmp	r0, #0
 800e758:	f47f adf8 	bne.w	800e34c <__ieee754_pow+0x384>
 800e75c:	4aa4      	ldr	r2, [pc, #656]	; (800e9f0 <__ieee754_pow+0xa28>)
 800e75e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e762:	4293      	cmp	r3, r2
 800e764:	f340 810b 	ble.w	800e97e <__ieee754_pow+0x9b6>
 800e768:	151b      	asrs	r3, r3, #20
 800e76a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e76e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e772:	fa4a f303 	asr.w	r3, sl, r3
 800e776:	445b      	add	r3, fp
 800e778:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e77c:	4e9d      	ldr	r6, [pc, #628]	; (800e9f4 <__ieee754_pow+0xa2c>)
 800e77e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e782:	4116      	asrs	r6, r2
 800e784:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e788:	2000      	movs	r0, #0
 800e78a:	ea23 0106 	bic.w	r1, r3, r6
 800e78e:	f1c2 0214 	rsb	r2, r2, #20
 800e792:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e796:	fa4a fa02 	asr.w	sl, sl, r2
 800e79a:	f1bb 0f00 	cmp.w	fp, #0
 800e79e:	4602      	mov	r2, r0
 800e7a0:	460b      	mov	r3, r1
 800e7a2:	4620      	mov	r0, r4
 800e7a4:	4629      	mov	r1, r5
 800e7a6:	bfb8      	it	lt
 800e7a8:	f1ca 0a00 	rsblt	sl, sl, #0
 800e7ac:	f7f1 fd94 	bl	80002d8 <__aeabi_dsub>
 800e7b0:	ec41 0b19 	vmov	d9, r0, r1
 800e7b4:	4642      	mov	r2, r8
 800e7b6:	464b      	mov	r3, r9
 800e7b8:	ec51 0b19 	vmov	r0, r1, d9
 800e7bc:	f7f1 fd8e 	bl	80002dc <__adddf3>
 800e7c0:	2400      	movs	r4, #0
 800e7c2:	a379      	add	r3, pc, #484	; (adr r3, 800e9a8 <__ieee754_pow+0x9e0>)
 800e7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7c8:	4620      	mov	r0, r4
 800e7ca:	460d      	mov	r5, r1
 800e7cc:	f7f1 ff3c 	bl	8000648 <__aeabi_dmul>
 800e7d0:	ec53 2b19 	vmov	r2, r3, d9
 800e7d4:	4606      	mov	r6, r0
 800e7d6:	460f      	mov	r7, r1
 800e7d8:	4620      	mov	r0, r4
 800e7da:	4629      	mov	r1, r5
 800e7dc:	f7f1 fd7c 	bl	80002d8 <__aeabi_dsub>
 800e7e0:	4602      	mov	r2, r0
 800e7e2:	460b      	mov	r3, r1
 800e7e4:	4640      	mov	r0, r8
 800e7e6:	4649      	mov	r1, r9
 800e7e8:	f7f1 fd76 	bl	80002d8 <__aeabi_dsub>
 800e7ec:	a370      	add	r3, pc, #448	; (adr r3, 800e9b0 <__ieee754_pow+0x9e8>)
 800e7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f2:	f7f1 ff29 	bl	8000648 <__aeabi_dmul>
 800e7f6:	a370      	add	r3, pc, #448	; (adr r3, 800e9b8 <__ieee754_pow+0x9f0>)
 800e7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7fc:	4680      	mov	r8, r0
 800e7fe:	4689      	mov	r9, r1
 800e800:	4620      	mov	r0, r4
 800e802:	4629      	mov	r1, r5
 800e804:	f7f1 ff20 	bl	8000648 <__aeabi_dmul>
 800e808:	4602      	mov	r2, r0
 800e80a:	460b      	mov	r3, r1
 800e80c:	4640      	mov	r0, r8
 800e80e:	4649      	mov	r1, r9
 800e810:	f7f1 fd64 	bl	80002dc <__adddf3>
 800e814:	4604      	mov	r4, r0
 800e816:	460d      	mov	r5, r1
 800e818:	4602      	mov	r2, r0
 800e81a:	460b      	mov	r3, r1
 800e81c:	4630      	mov	r0, r6
 800e81e:	4639      	mov	r1, r7
 800e820:	f7f1 fd5c 	bl	80002dc <__adddf3>
 800e824:	4632      	mov	r2, r6
 800e826:	463b      	mov	r3, r7
 800e828:	4680      	mov	r8, r0
 800e82a:	4689      	mov	r9, r1
 800e82c:	f7f1 fd54 	bl	80002d8 <__aeabi_dsub>
 800e830:	4602      	mov	r2, r0
 800e832:	460b      	mov	r3, r1
 800e834:	4620      	mov	r0, r4
 800e836:	4629      	mov	r1, r5
 800e838:	f7f1 fd4e 	bl	80002d8 <__aeabi_dsub>
 800e83c:	4642      	mov	r2, r8
 800e83e:	4606      	mov	r6, r0
 800e840:	460f      	mov	r7, r1
 800e842:	464b      	mov	r3, r9
 800e844:	4640      	mov	r0, r8
 800e846:	4649      	mov	r1, r9
 800e848:	f7f1 fefe 	bl	8000648 <__aeabi_dmul>
 800e84c:	a35c      	add	r3, pc, #368	; (adr r3, 800e9c0 <__ieee754_pow+0x9f8>)
 800e84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e852:	4604      	mov	r4, r0
 800e854:	460d      	mov	r5, r1
 800e856:	f7f1 fef7 	bl	8000648 <__aeabi_dmul>
 800e85a:	a35b      	add	r3, pc, #364	; (adr r3, 800e9c8 <__ieee754_pow+0xa00>)
 800e85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e860:	f7f1 fd3a 	bl	80002d8 <__aeabi_dsub>
 800e864:	4622      	mov	r2, r4
 800e866:	462b      	mov	r3, r5
 800e868:	f7f1 feee 	bl	8000648 <__aeabi_dmul>
 800e86c:	a358      	add	r3, pc, #352	; (adr r3, 800e9d0 <__ieee754_pow+0xa08>)
 800e86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e872:	f7f1 fd33 	bl	80002dc <__adddf3>
 800e876:	4622      	mov	r2, r4
 800e878:	462b      	mov	r3, r5
 800e87a:	f7f1 fee5 	bl	8000648 <__aeabi_dmul>
 800e87e:	a356      	add	r3, pc, #344	; (adr r3, 800e9d8 <__ieee754_pow+0xa10>)
 800e880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e884:	f7f1 fd28 	bl	80002d8 <__aeabi_dsub>
 800e888:	4622      	mov	r2, r4
 800e88a:	462b      	mov	r3, r5
 800e88c:	f7f1 fedc 	bl	8000648 <__aeabi_dmul>
 800e890:	a353      	add	r3, pc, #332	; (adr r3, 800e9e0 <__ieee754_pow+0xa18>)
 800e892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e896:	f7f1 fd21 	bl	80002dc <__adddf3>
 800e89a:	4622      	mov	r2, r4
 800e89c:	462b      	mov	r3, r5
 800e89e:	f7f1 fed3 	bl	8000648 <__aeabi_dmul>
 800e8a2:	4602      	mov	r2, r0
 800e8a4:	460b      	mov	r3, r1
 800e8a6:	4640      	mov	r0, r8
 800e8a8:	4649      	mov	r1, r9
 800e8aa:	f7f1 fd15 	bl	80002d8 <__aeabi_dsub>
 800e8ae:	4604      	mov	r4, r0
 800e8b0:	460d      	mov	r5, r1
 800e8b2:	4602      	mov	r2, r0
 800e8b4:	460b      	mov	r3, r1
 800e8b6:	4640      	mov	r0, r8
 800e8b8:	4649      	mov	r1, r9
 800e8ba:	f7f1 fec5 	bl	8000648 <__aeabi_dmul>
 800e8be:	2200      	movs	r2, #0
 800e8c0:	ec41 0b19 	vmov	d9, r0, r1
 800e8c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e8c8:	4620      	mov	r0, r4
 800e8ca:	4629      	mov	r1, r5
 800e8cc:	f7f1 fd04 	bl	80002d8 <__aeabi_dsub>
 800e8d0:	4602      	mov	r2, r0
 800e8d2:	460b      	mov	r3, r1
 800e8d4:	ec51 0b19 	vmov	r0, r1, d9
 800e8d8:	f7f1 ffe0 	bl	800089c <__aeabi_ddiv>
 800e8dc:	4632      	mov	r2, r6
 800e8de:	4604      	mov	r4, r0
 800e8e0:	460d      	mov	r5, r1
 800e8e2:	463b      	mov	r3, r7
 800e8e4:	4640      	mov	r0, r8
 800e8e6:	4649      	mov	r1, r9
 800e8e8:	f7f1 feae 	bl	8000648 <__aeabi_dmul>
 800e8ec:	4632      	mov	r2, r6
 800e8ee:	463b      	mov	r3, r7
 800e8f0:	f7f1 fcf4 	bl	80002dc <__adddf3>
 800e8f4:	4602      	mov	r2, r0
 800e8f6:	460b      	mov	r3, r1
 800e8f8:	4620      	mov	r0, r4
 800e8fa:	4629      	mov	r1, r5
 800e8fc:	f7f1 fcec 	bl	80002d8 <__aeabi_dsub>
 800e900:	4642      	mov	r2, r8
 800e902:	464b      	mov	r3, r9
 800e904:	f7f1 fce8 	bl	80002d8 <__aeabi_dsub>
 800e908:	460b      	mov	r3, r1
 800e90a:	4602      	mov	r2, r0
 800e90c:	493a      	ldr	r1, [pc, #232]	; (800e9f8 <__ieee754_pow+0xa30>)
 800e90e:	2000      	movs	r0, #0
 800e910:	f7f1 fce2 	bl	80002d8 <__aeabi_dsub>
 800e914:	e9cd 0100 	strd	r0, r1, [sp]
 800e918:	9b01      	ldr	r3, [sp, #4]
 800e91a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e91e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e922:	da2f      	bge.n	800e984 <__ieee754_pow+0x9bc>
 800e924:	4650      	mov	r0, sl
 800e926:	ed9d 0b00 	vldr	d0, [sp]
 800e92a:	f001 f911 	bl	800fb50 <scalbn>
 800e92e:	ec51 0b10 	vmov	r0, r1, d0
 800e932:	ec53 2b18 	vmov	r2, r3, d8
 800e936:	f7ff bbe0 	b.w	800e0fa <__ieee754_pow+0x132>
 800e93a:	4b30      	ldr	r3, [pc, #192]	; (800e9fc <__ieee754_pow+0xa34>)
 800e93c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e940:	429e      	cmp	r6, r3
 800e942:	f77f af0b 	ble.w	800e75c <__ieee754_pow+0x794>
 800e946:	4b2e      	ldr	r3, [pc, #184]	; (800ea00 <__ieee754_pow+0xa38>)
 800e948:	440b      	add	r3, r1
 800e94a:	4303      	orrs	r3, r0
 800e94c:	d00b      	beq.n	800e966 <__ieee754_pow+0x99e>
 800e94e:	a326      	add	r3, pc, #152	; (adr r3, 800e9e8 <__ieee754_pow+0xa20>)
 800e950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e954:	ec51 0b18 	vmov	r0, r1, d8
 800e958:	f7f1 fe76 	bl	8000648 <__aeabi_dmul>
 800e95c:	a322      	add	r3, pc, #136	; (adr r3, 800e9e8 <__ieee754_pow+0xa20>)
 800e95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e962:	f7ff bbca 	b.w	800e0fa <__ieee754_pow+0x132>
 800e966:	4622      	mov	r2, r4
 800e968:	462b      	mov	r3, r5
 800e96a:	f7f1 fcb5 	bl	80002d8 <__aeabi_dsub>
 800e96e:	4642      	mov	r2, r8
 800e970:	464b      	mov	r3, r9
 800e972:	f7f2 f8ef 	bl	8000b54 <__aeabi_dcmpge>
 800e976:	2800      	cmp	r0, #0
 800e978:	f43f aef0 	beq.w	800e75c <__ieee754_pow+0x794>
 800e97c:	e7e7      	b.n	800e94e <__ieee754_pow+0x986>
 800e97e:	f04f 0a00 	mov.w	sl, #0
 800e982:	e717      	b.n	800e7b4 <__ieee754_pow+0x7ec>
 800e984:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e988:	4619      	mov	r1, r3
 800e98a:	e7d2      	b.n	800e932 <__ieee754_pow+0x96a>
 800e98c:	491a      	ldr	r1, [pc, #104]	; (800e9f8 <__ieee754_pow+0xa30>)
 800e98e:	2000      	movs	r0, #0
 800e990:	f7ff bb9e 	b.w	800e0d0 <__ieee754_pow+0x108>
 800e994:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e998:	f7ff bb9a 	b.w	800e0d0 <__ieee754_pow+0x108>
 800e99c:	9000      	str	r0, [sp, #0]
 800e99e:	f7ff bb76 	b.w	800e08e <__ieee754_pow+0xc6>
 800e9a2:	2100      	movs	r1, #0
 800e9a4:	f7ff bb60 	b.w	800e068 <__ieee754_pow+0xa0>
 800e9a8:	00000000 	.word	0x00000000
 800e9ac:	3fe62e43 	.word	0x3fe62e43
 800e9b0:	fefa39ef 	.word	0xfefa39ef
 800e9b4:	3fe62e42 	.word	0x3fe62e42
 800e9b8:	0ca86c39 	.word	0x0ca86c39
 800e9bc:	be205c61 	.word	0xbe205c61
 800e9c0:	72bea4d0 	.word	0x72bea4d0
 800e9c4:	3e663769 	.word	0x3e663769
 800e9c8:	c5d26bf1 	.word	0xc5d26bf1
 800e9cc:	3ebbbd41 	.word	0x3ebbbd41
 800e9d0:	af25de2c 	.word	0xaf25de2c
 800e9d4:	3f11566a 	.word	0x3f11566a
 800e9d8:	16bebd93 	.word	0x16bebd93
 800e9dc:	3f66c16c 	.word	0x3f66c16c
 800e9e0:	5555553e 	.word	0x5555553e
 800e9e4:	3fc55555 	.word	0x3fc55555
 800e9e8:	c2f8f359 	.word	0xc2f8f359
 800e9ec:	01a56e1f 	.word	0x01a56e1f
 800e9f0:	3fe00000 	.word	0x3fe00000
 800e9f4:	000fffff 	.word	0x000fffff
 800e9f8:	3ff00000 	.word	0x3ff00000
 800e9fc:	4090cbff 	.word	0x4090cbff
 800ea00:	3f6f3400 	.word	0x3f6f3400
 800ea04:	652b82fe 	.word	0x652b82fe
 800ea08:	3c971547 	.word	0x3c971547
 800ea0c:	00000000 	.word	0x00000000

0800ea10 <__ieee754_rem_pio2>:
 800ea10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea14:	ed2d 8b02 	vpush	{d8}
 800ea18:	ec55 4b10 	vmov	r4, r5, d0
 800ea1c:	4bca      	ldr	r3, [pc, #808]	; (800ed48 <__ieee754_rem_pio2+0x338>)
 800ea1e:	b08b      	sub	sp, #44	; 0x2c
 800ea20:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ea24:	4598      	cmp	r8, r3
 800ea26:	4682      	mov	sl, r0
 800ea28:	9502      	str	r5, [sp, #8]
 800ea2a:	dc08      	bgt.n	800ea3e <__ieee754_rem_pio2+0x2e>
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	2300      	movs	r3, #0
 800ea30:	ed80 0b00 	vstr	d0, [r0]
 800ea34:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ea38:	f04f 0b00 	mov.w	fp, #0
 800ea3c:	e028      	b.n	800ea90 <__ieee754_rem_pio2+0x80>
 800ea3e:	4bc3      	ldr	r3, [pc, #780]	; (800ed4c <__ieee754_rem_pio2+0x33c>)
 800ea40:	4598      	cmp	r8, r3
 800ea42:	dc78      	bgt.n	800eb36 <__ieee754_rem_pio2+0x126>
 800ea44:	9b02      	ldr	r3, [sp, #8]
 800ea46:	4ec2      	ldr	r6, [pc, #776]	; (800ed50 <__ieee754_rem_pio2+0x340>)
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	ee10 0a10 	vmov	r0, s0
 800ea4e:	a3b0      	add	r3, pc, #704	; (adr r3, 800ed10 <__ieee754_rem_pio2+0x300>)
 800ea50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea54:	4629      	mov	r1, r5
 800ea56:	dd39      	ble.n	800eacc <__ieee754_rem_pio2+0xbc>
 800ea58:	f7f1 fc3e 	bl	80002d8 <__aeabi_dsub>
 800ea5c:	45b0      	cmp	r8, r6
 800ea5e:	4604      	mov	r4, r0
 800ea60:	460d      	mov	r5, r1
 800ea62:	d01b      	beq.n	800ea9c <__ieee754_rem_pio2+0x8c>
 800ea64:	a3ac      	add	r3, pc, #688	; (adr r3, 800ed18 <__ieee754_rem_pio2+0x308>)
 800ea66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea6a:	f7f1 fc35 	bl	80002d8 <__aeabi_dsub>
 800ea6e:	4602      	mov	r2, r0
 800ea70:	460b      	mov	r3, r1
 800ea72:	e9ca 2300 	strd	r2, r3, [sl]
 800ea76:	4620      	mov	r0, r4
 800ea78:	4629      	mov	r1, r5
 800ea7a:	f7f1 fc2d 	bl	80002d8 <__aeabi_dsub>
 800ea7e:	a3a6      	add	r3, pc, #664	; (adr r3, 800ed18 <__ieee754_rem_pio2+0x308>)
 800ea80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea84:	f7f1 fc28 	bl	80002d8 <__aeabi_dsub>
 800ea88:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ea8c:	f04f 0b01 	mov.w	fp, #1
 800ea90:	4658      	mov	r0, fp
 800ea92:	b00b      	add	sp, #44	; 0x2c
 800ea94:	ecbd 8b02 	vpop	{d8}
 800ea98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea9c:	a3a0      	add	r3, pc, #640	; (adr r3, 800ed20 <__ieee754_rem_pio2+0x310>)
 800ea9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa2:	f7f1 fc19 	bl	80002d8 <__aeabi_dsub>
 800eaa6:	a3a0      	add	r3, pc, #640	; (adr r3, 800ed28 <__ieee754_rem_pio2+0x318>)
 800eaa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaac:	4604      	mov	r4, r0
 800eaae:	460d      	mov	r5, r1
 800eab0:	f7f1 fc12 	bl	80002d8 <__aeabi_dsub>
 800eab4:	4602      	mov	r2, r0
 800eab6:	460b      	mov	r3, r1
 800eab8:	e9ca 2300 	strd	r2, r3, [sl]
 800eabc:	4620      	mov	r0, r4
 800eabe:	4629      	mov	r1, r5
 800eac0:	f7f1 fc0a 	bl	80002d8 <__aeabi_dsub>
 800eac4:	a398      	add	r3, pc, #608	; (adr r3, 800ed28 <__ieee754_rem_pio2+0x318>)
 800eac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaca:	e7db      	b.n	800ea84 <__ieee754_rem_pio2+0x74>
 800eacc:	f7f1 fc06 	bl	80002dc <__adddf3>
 800ead0:	45b0      	cmp	r8, r6
 800ead2:	4604      	mov	r4, r0
 800ead4:	460d      	mov	r5, r1
 800ead6:	d016      	beq.n	800eb06 <__ieee754_rem_pio2+0xf6>
 800ead8:	a38f      	add	r3, pc, #572	; (adr r3, 800ed18 <__ieee754_rem_pio2+0x308>)
 800eada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eade:	f7f1 fbfd 	bl	80002dc <__adddf3>
 800eae2:	4602      	mov	r2, r0
 800eae4:	460b      	mov	r3, r1
 800eae6:	e9ca 2300 	strd	r2, r3, [sl]
 800eaea:	4620      	mov	r0, r4
 800eaec:	4629      	mov	r1, r5
 800eaee:	f7f1 fbf3 	bl	80002d8 <__aeabi_dsub>
 800eaf2:	a389      	add	r3, pc, #548	; (adr r3, 800ed18 <__ieee754_rem_pio2+0x308>)
 800eaf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf8:	f7f1 fbf0 	bl	80002dc <__adddf3>
 800eafc:	f04f 3bff 	mov.w	fp, #4294967295
 800eb00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800eb04:	e7c4      	b.n	800ea90 <__ieee754_rem_pio2+0x80>
 800eb06:	a386      	add	r3, pc, #536	; (adr r3, 800ed20 <__ieee754_rem_pio2+0x310>)
 800eb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb0c:	f7f1 fbe6 	bl	80002dc <__adddf3>
 800eb10:	a385      	add	r3, pc, #532	; (adr r3, 800ed28 <__ieee754_rem_pio2+0x318>)
 800eb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb16:	4604      	mov	r4, r0
 800eb18:	460d      	mov	r5, r1
 800eb1a:	f7f1 fbdf 	bl	80002dc <__adddf3>
 800eb1e:	4602      	mov	r2, r0
 800eb20:	460b      	mov	r3, r1
 800eb22:	e9ca 2300 	strd	r2, r3, [sl]
 800eb26:	4620      	mov	r0, r4
 800eb28:	4629      	mov	r1, r5
 800eb2a:	f7f1 fbd5 	bl	80002d8 <__aeabi_dsub>
 800eb2e:	a37e      	add	r3, pc, #504	; (adr r3, 800ed28 <__ieee754_rem_pio2+0x318>)
 800eb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb34:	e7e0      	b.n	800eaf8 <__ieee754_rem_pio2+0xe8>
 800eb36:	4b87      	ldr	r3, [pc, #540]	; (800ed54 <__ieee754_rem_pio2+0x344>)
 800eb38:	4598      	cmp	r8, r3
 800eb3a:	f300 80d9 	bgt.w	800ecf0 <__ieee754_rem_pio2+0x2e0>
 800eb3e:	f7fe feef 	bl	800d920 <fabs>
 800eb42:	ec55 4b10 	vmov	r4, r5, d0
 800eb46:	ee10 0a10 	vmov	r0, s0
 800eb4a:	a379      	add	r3, pc, #484	; (adr r3, 800ed30 <__ieee754_rem_pio2+0x320>)
 800eb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb50:	4629      	mov	r1, r5
 800eb52:	f7f1 fd79 	bl	8000648 <__aeabi_dmul>
 800eb56:	4b80      	ldr	r3, [pc, #512]	; (800ed58 <__ieee754_rem_pio2+0x348>)
 800eb58:	2200      	movs	r2, #0
 800eb5a:	f7f1 fbbf 	bl	80002dc <__adddf3>
 800eb5e:	f7f2 f823 	bl	8000ba8 <__aeabi_d2iz>
 800eb62:	4683      	mov	fp, r0
 800eb64:	f7f1 fd06 	bl	8000574 <__aeabi_i2d>
 800eb68:	4602      	mov	r2, r0
 800eb6a:	460b      	mov	r3, r1
 800eb6c:	ec43 2b18 	vmov	d8, r2, r3
 800eb70:	a367      	add	r3, pc, #412	; (adr r3, 800ed10 <__ieee754_rem_pio2+0x300>)
 800eb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb76:	f7f1 fd67 	bl	8000648 <__aeabi_dmul>
 800eb7a:	4602      	mov	r2, r0
 800eb7c:	460b      	mov	r3, r1
 800eb7e:	4620      	mov	r0, r4
 800eb80:	4629      	mov	r1, r5
 800eb82:	f7f1 fba9 	bl	80002d8 <__aeabi_dsub>
 800eb86:	a364      	add	r3, pc, #400	; (adr r3, 800ed18 <__ieee754_rem_pio2+0x308>)
 800eb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb8c:	4606      	mov	r6, r0
 800eb8e:	460f      	mov	r7, r1
 800eb90:	ec51 0b18 	vmov	r0, r1, d8
 800eb94:	f7f1 fd58 	bl	8000648 <__aeabi_dmul>
 800eb98:	f1bb 0f1f 	cmp.w	fp, #31
 800eb9c:	4604      	mov	r4, r0
 800eb9e:	460d      	mov	r5, r1
 800eba0:	dc0d      	bgt.n	800ebbe <__ieee754_rem_pio2+0x1ae>
 800eba2:	4b6e      	ldr	r3, [pc, #440]	; (800ed5c <__ieee754_rem_pio2+0x34c>)
 800eba4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800eba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebac:	4543      	cmp	r3, r8
 800ebae:	d006      	beq.n	800ebbe <__ieee754_rem_pio2+0x1ae>
 800ebb0:	4622      	mov	r2, r4
 800ebb2:	462b      	mov	r3, r5
 800ebb4:	4630      	mov	r0, r6
 800ebb6:	4639      	mov	r1, r7
 800ebb8:	f7f1 fb8e 	bl	80002d8 <__aeabi_dsub>
 800ebbc:	e00f      	b.n	800ebde <__ieee754_rem_pio2+0x1ce>
 800ebbe:	462b      	mov	r3, r5
 800ebc0:	4622      	mov	r2, r4
 800ebc2:	4630      	mov	r0, r6
 800ebc4:	4639      	mov	r1, r7
 800ebc6:	f7f1 fb87 	bl	80002d8 <__aeabi_dsub>
 800ebca:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ebce:	9303      	str	r3, [sp, #12]
 800ebd0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ebd4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800ebd8:	f1b8 0f10 	cmp.w	r8, #16
 800ebdc:	dc02      	bgt.n	800ebe4 <__ieee754_rem_pio2+0x1d4>
 800ebde:	e9ca 0100 	strd	r0, r1, [sl]
 800ebe2:	e039      	b.n	800ec58 <__ieee754_rem_pio2+0x248>
 800ebe4:	a34e      	add	r3, pc, #312	; (adr r3, 800ed20 <__ieee754_rem_pio2+0x310>)
 800ebe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebea:	ec51 0b18 	vmov	r0, r1, d8
 800ebee:	f7f1 fd2b 	bl	8000648 <__aeabi_dmul>
 800ebf2:	4604      	mov	r4, r0
 800ebf4:	460d      	mov	r5, r1
 800ebf6:	4602      	mov	r2, r0
 800ebf8:	460b      	mov	r3, r1
 800ebfa:	4630      	mov	r0, r6
 800ebfc:	4639      	mov	r1, r7
 800ebfe:	f7f1 fb6b 	bl	80002d8 <__aeabi_dsub>
 800ec02:	4602      	mov	r2, r0
 800ec04:	460b      	mov	r3, r1
 800ec06:	4680      	mov	r8, r0
 800ec08:	4689      	mov	r9, r1
 800ec0a:	4630      	mov	r0, r6
 800ec0c:	4639      	mov	r1, r7
 800ec0e:	f7f1 fb63 	bl	80002d8 <__aeabi_dsub>
 800ec12:	4622      	mov	r2, r4
 800ec14:	462b      	mov	r3, r5
 800ec16:	f7f1 fb5f 	bl	80002d8 <__aeabi_dsub>
 800ec1a:	a343      	add	r3, pc, #268	; (adr r3, 800ed28 <__ieee754_rem_pio2+0x318>)
 800ec1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec20:	4604      	mov	r4, r0
 800ec22:	460d      	mov	r5, r1
 800ec24:	ec51 0b18 	vmov	r0, r1, d8
 800ec28:	f7f1 fd0e 	bl	8000648 <__aeabi_dmul>
 800ec2c:	4622      	mov	r2, r4
 800ec2e:	462b      	mov	r3, r5
 800ec30:	f7f1 fb52 	bl	80002d8 <__aeabi_dsub>
 800ec34:	4602      	mov	r2, r0
 800ec36:	460b      	mov	r3, r1
 800ec38:	4604      	mov	r4, r0
 800ec3a:	460d      	mov	r5, r1
 800ec3c:	4640      	mov	r0, r8
 800ec3e:	4649      	mov	r1, r9
 800ec40:	f7f1 fb4a 	bl	80002d8 <__aeabi_dsub>
 800ec44:	9a03      	ldr	r2, [sp, #12]
 800ec46:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ec4a:	1ad3      	subs	r3, r2, r3
 800ec4c:	2b31      	cmp	r3, #49	; 0x31
 800ec4e:	dc24      	bgt.n	800ec9a <__ieee754_rem_pio2+0x28a>
 800ec50:	e9ca 0100 	strd	r0, r1, [sl]
 800ec54:	4646      	mov	r6, r8
 800ec56:	464f      	mov	r7, r9
 800ec58:	e9da 8900 	ldrd	r8, r9, [sl]
 800ec5c:	4630      	mov	r0, r6
 800ec5e:	4642      	mov	r2, r8
 800ec60:	464b      	mov	r3, r9
 800ec62:	4639      	mov	r1, r7
 800ec64:	f7f1 fb38 	bl	80002d8 <__aeabi_dsub>
 800ec68:	462b      	mov	r3, r5
 800ec6a:	4622      	mov	r2, r4
 800ec6c:	f7f1 fb34 	bl	80002d8 <__aeabi_dsub>
 800ec70:	9b02      	ldr	r3, [sp, #8]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ec78:	f6bf af0a 	bge.w	800ea90 <__ieee754_rem_pio2+0x80>
 800ec7c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ec80:	f8ca 3004 	str.w	r3, [sl, #4]
 800ec84:	f8ca 8000 	str.w	r8, [sl]
 800ec88:	f8ca 0008 	str.w	r0, [sl, #8]
 800ec8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ec90:	f8ca 300c 	str.w	r3, [sl, #12]
 800ec94:	f1cb 0b00 	rsb	fp, fp, #0
 800ec98:	e6fa      	b.n	800ea90 <__ieee754_rem_pio2+0x80>
 800ec9a:	a327      	add	r3, pc, #156	; (adr r3, 800ed38 <__ieee754_rem_pio2+0x328>)
 800ec9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca0:	ec51 0b18 	vmov	r0, r1, d8
 800eca4:	f7f1 fcd0 	bl	8000648 <__aeabi_dmul>
 800eca8:	4604      	mov	r4, r0
 800ecaa:	460d      	mov	r5, r1
 800ecac:	4602      	mov	r2, r0
 800ecae:	460b      	mov	r3, r1
 800ecb0:	4640      	mov	r0, r8
 800ecb2:	4649      	mov	r1, r9
 800ecb4:	f7f1 fb10 	bl	80002d8 <__aeabi_dsub>
 800ecb8:	4602      	mov	r2, r0
 800ecba:	460b      	mov	r3, r1
 800ecbc:	4606      	mov	r6, r0
 800ecbe:	460f      	mov	r7, r1
 800ecc0:	4640      	mov	r0, r8
 800ecc2:	4649      	mov	r1, r9
 800ecc4:	f7f1 fb08 	bl	80002d8 <__aeabi_dsub>
 800ecc8:	4622      	mov	r2, r4
 800ecca:	462b      	mov	r3, r5
 800eccc:	f7f1 fb04 	bl	80002d8 <__aeabi_dsub>
 800ecd0:	a31b      	add	r3, pc, #108	; (adr r3, 800ed40 <__ieee754_rem_pio2+0x330>)
 800ecd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd6:	4604      	mov	r4, r0
 800ecd8:	460d      	mov	r5, r1
 800ecda:	ec51 0b18 	vmov	r0, r1, d8
 800ecde:	f7f1 fcb3 	bl	8000648 <__aeabi_dmul>
 800ece2:	4622      	mov	r2, r4
 800ece4:	462b      	mov	r3, r5
 800ece6:	f7f1 faf7 	bl	80002d8 <__aeabi_dsub>
 800ecea:	4604      	mov	r4, r0
 800ecec:	460d      	mov	r5, r1
 800ecee:	e75f      	b.n	800ebb0 <__ieee754_rem_pio2+0x1a0>
 800ecf0:	4b1b      	ldr	r3, [pc, #108]	; (800ed60 <__ieee754_rem_pio2+0x350>)
 800ecf2:	4598      	cmp	r8, r3
 800ecf4:	dd36      	ble.n	800ed64 <__ieee754_rem_pio2+0x354>
 800ecf6:	ee10 2a10 	vmov	r2, s0
 800ecfa:	462b      	mov	r3, r5
 800ecfc:	4620      	mov	r0, r4
 800ecfe:	4629      	mov	r1, r5
 800ed00:	f7f1 faea 	bl	80002d8 <__aeabi_dsub>
 800ed04:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ed08:	e9ca 0100 	strd	r0, r1, [sl]
 800ed0c:	e694      	b.n	800ea38 <__ieee754_rem_pio2+0x28>
 800ed0e:	bf00      	nop
 800ed10:	54400000 	.word	0x54400000
 800ed14:	3ff921fb 	.word	0x3ff921fb
 800ed18:	1a626331 	.word	0x1a626331
 800ed1c:	3dd0b461 	.word	0x3dd0b461
 800ed20:	1a600000 	.word	0x1a600000
 800ed24:	3dd0b461 	.word	0x3dd0b461
 800ed28:	2e037073 	.word	0x2e037073
 800ed2c:	3ba3198a 	.word	0x3ba3198a
 800ed30:	6dc9c883 	.word	0x6dc9c883
 800ed34:	3fe45f30 	.word	0x3fe45f30
 800ed38:	2e000000 	.word	0x2e000000
 800ed3c:	3ba3198a 	.word	0x3ba3198a
 800ed40:	252049c1 	.word	0x252049c1
 800ed44:	397b839a 	.word	0x397b839a
 800ed48:	3fe921fb 	.word	0x3fe921fb
 800ed4c:	4002d97b 	.word	0x4002d97b
 800ed50:	3ff921fb 	.word	0x3ff921fb
 800ed54:	413921fb 	.word	0x413921fb
 800ed58:	3fe00000 	.word	0x3fe00000
 800ed5c:	08010288 	.word	0x08010288
 800ed60:	7fefffff 	.word	0x7fefffff
 800ed64:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ed68:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ed6c:	ee10 0a10 	vmov	r0, s0
 800ed70:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ed74:	ee10 6a10 	vmov	r6, s0
 800ed78:	460f      	mov	r7, r1
 800ed7a:	f7f1 ff15 	bl	8000ba8 <__aeabi_d2iz>
 800ed7e:	f7f1 fbf9 	bl	8000574 <__aeabi_i2d>
 800ed82:	4602      	mov	r2, r0
 800ed84:	460b      	mov	r3, r1
 800ed86:	4630      	mov	r0, r6
 800ed88:	4639      	mov	r1, r7
 800ed8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ed8e:	f7f1 faa3 	bl	80002d8 <__aeabi_dsub>
 800ed92:	4b22      	ldr	r3, [pc, #136]	; (800ee1c <__ieee754_rem_pio2+0x40c>)
 800ed94:	2200      	movs	r2, #0
 800ed96:	f7f1 fc57 	bl	8000648 <__aeabi_dmul>
 800ed9a:	460f      	mov	r7, r1
 800ed9c:	4606      	mov	r6, r0
 800ed9e:	f7f1 ff03 	bl	8000ba8 <__aeabi_d2iz>
 800eda2:	f7f1 fbe7 	bl	8000574 <__aeabi_i2d>
 800eda6:	4602      	mov	r2, r0
 800eda8:	460b      	mov	r3, r1
 800edaa:	4630      	mov	r0, r6
 800edac:	4639      	mov	r1, r7
 800edae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800edb2:	f7f1 fa91 	bl	80002d8 <__aeabi_dsub>
 800edb6:	4b19      	ldr	r3, [pc, #100]	; (800ee1c <__ieee754_rem_pio2+0x40c>)
 800edb8:	2200      	movs	r2, #0
 800edba:	f7f1 fc45 	bl	8000648 <__aeabi_dmul>
 800edbe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800edc2:	ad04      	add	r5, sp, #16
 800edc4:	f04f 0803 	mov.w	r8, #3
 800edc8:	46a9      	mov	r9, r5
 800edca:	2600      	movs	r6, #0
 800edcc:	2700      	movs	r7, #0
 800edce:	4632      	mov	r2, r6
 800edd0:	463b      	mov	r3, r7
 800edd2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800edd6:	46c3      	mov	fp, r8
 800edd8:	3d08      	subs	r5, #8
 800edda:	f108 38ff 	add.w	r8, r8, #4294967295
 800edde:	f7f1 fe9b 	bl	8000b18 <__aeabi_dcmpeq>
 800ede2:	2800      	cmp	r0, #0
 800ede4:	d1f3      	bne.n	800edce <__ieee754_rem_pio2+0x3be>
 800ede6:	4b0e      	ldr	r3, [pc, #56]	; (800ee20 <__ieee754_rem_pio2+0x410>)
 800ede8:	9301      	str	r3, [sp, #4]
 800edea:	2302      	movs	r3, #2
 800edec:	9300      	str	r3, [sp, #0]
 800edee:	4622      	mov	r2, r4
 800edf0:	465b      	mov	r3, fp
 800edf2:	4651      	mov	r1, sl
 800edf4:	4648      	mov	r0, r9
 800edf6:	f000 f993 	bl	800f120 <__kernel_rem_pio2>
 800edfa:	9b02      	ldr	r3, [sp, #8]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	4683      	mov	fp, r0
 800ee00:	f6bf ae46 	bge.w	800ea90 <__ieee754_rem_pio2+0x80>
 800ee04:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ee08:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ee0c:	f8ca 3004 	str.w	r3, [sl, #4]
 800ee10:	f8da 300c 	ldr.w	r3, [sl, #12]
 800ee14:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ee18:	e73a      	b.n	800ec90 <__ieee754_rem_pio2+0x280>
 800ee1a:	bf00      	nop
 800ee1c:	41700000 	.word	0x41700000
 800ee20:	08010308 	.word	0x08010308

0800ee24 <__ieee754_sqrt>:
 800ee24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee28:	ec55 4b10 	vmov	r4, r5, d0
 800ee2c:	4e56      	ldr	r6, [pc, #344]	; (800ef88 <__ieee754_sqrt+0x164>)
 800ee2e:	43ae      	bics	r6, r5
 800ee30:	ee10 0a10 	vmov	r0, s0
 800ee34:	ee10 3a10 	vmov	r3, s0
 800ee38:	4629      	mov	r1, r5
 800ee3a:	462a      	mov	r2, r5
 800ee3c:	d110      	bne.n	800ee60 <__ieee754_sqrt+0x3c>
 800ee3e:	ee10 2a10 	vmov	r2, s0
 800ee42:	462b      	mov	r3, r5
 800ee44:	f7f1 fc00 	bl	8000648 <__aeabi_dmul>
 800ee48:	4602      	mov	r2, r0
 800ee4a:	460b      	mov	r3, r1
 800ee4c:	4620      	mov	r0, r4
 800ee4e:	4629      	mov	r1, r5
 800ee50:	f7f1 fa44 	bl	80002dc <__adddf3>
 800ee54:	4604      	mov	r4, r0
 800ee56:	460d      	mov	r5, r1
 800ee58:	ec45 4b10 	vmov	d0, r4, r5
 800ee5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee60:	2d00      	cmp	r5, #0
 800ee62:	dc10      	bgt.n	800ee86 <__ieee754_sqrt+0x62>
 800ee64:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ee68:	4330      	orrs	r0, r6
 800ee6a:	d0f5      	beq.n	800ee58 <__ieee754_sqrt+0x34>
 800ee6c:	b15d      	cbz	r5, 800ee86 <__ieee754_sqrt+0x62>
 800ee6e:	ee10 2a10 	vmov	r2, s0
 800ee72:	462b      	mov	r3, r5
 800ee74:	ee10 0a10 	vmov	r0, s0
 800ee78:	f7f1 fa2e 	bl	80002d8 <__aeabi_dsub>
 800ee7c:	4602      	mov	r2, r0
 800ee7e:	460b      	mov	r3, r1
 800ee80:	f7f1 fd0c 	bl	800089c <__aeabi_ddiv>
 800ee84:	e7e6      	b.n	800ee54 <__ieee754_sqrt+0x30>
 800ee86:	1509      	asrs	r1, r1, #20
 800ee88:	d076      	beq.n	800ef78 <__ieee754_sqrt+0x154>
 800ee8a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ee8e:	07ce      	lsls	r6, r1, #31
 800ee90:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800ee94:	bf5e      	ittt	pl
 800ee96:	0fda      	lsrpl	r2, r3, #31
 800ee98:	005b      	lslpl	r3, r3, #1
 800ee9a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800ee9e:	0fda      	lsrs	r2, r3, #31
 800eea0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800eea4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800eea8:	2000      	movs	r0, #0
 800eeaa:	106d      	asrs	r5, r5, #1
 800eeac:	005b      	lsls	r3, r3, #1
 800eeae:	f04f 0e16 	mov.w	lr, #22
 800eeb2:	4684      	mov	ip, r0
 800eeb4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800eeb8:	eb0c 0401 	add.w	r4, ip, r1
 800eebc:	4294      	cmp	r4, r2
 800eebe:	bfde      	ittt	le
 800eec0:	1b12      	suble	r2, r2, r4
 800eec2:	eb04 0c01 	addle.w	ip, r4, r1
 800eec6:	1840      	addle	r0, r0, r1
 800eec8:	0052      	lsls	r2, r2, #1
 800eeca:	f1be 0e01 	subs.w	lr, lr, #1
 800eece:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800eed2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800eed6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800eeda:	d1ed      	bne.n	800eeb8 <__ieee754_sqrt+0x94>
 800eedc:	4671      	mov	r1, lr
 800eede:	2720      	movs	r7, #32
 800eee0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800eee4:	4562      	cmp	r2, ip
 800eee6:	eb04 060e 	add.w	r6, r4, lr
 800eeea:	dc02      	bgt.n	800eef2 <__ieee754_sqrt+0xce>
 800eeec:	d113      	bne.n	800ef16 <__ieee754_sqrt+0xf2>
 800eeee:	429e      	cmp	r6, r3
 800eef0:	d811      	bhi.n	800ef16 <__ieee754_sqrt+0xf2>
 800eef2:	2e00      	cmp	r6, #0
 800eef4:	eb06 0e04 	add.w	lr, r6, r4
 800eef8:	da43      	bge.n	800ef82 <__ieee754_sqrt+0x15e>
 800eefa:	f1be 0f00 	cmp.w	lr, #0
 800eefe:	db40      	blt.n	800ef82 <__ieee754_sqrt+0x15e>
 800ef00:	f10c 0801 	add.w	r8, ip, #1
 800ef04:	eba2 020c 	sub.w	r2, r2, ip
 800ef08:	429e      	cmp	r6, r3
 800ef0a:	bf88      	it	hi
 800ef0c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ef10:	1b9b      	subs	r3, r3, r6
 800ef12:	4421      	add	r1, r4
 800ef14:	46c4      	mov	ip, r8
 800ef16:	0052      	lsls	r2, r2, #1
 800ef18:	3f01      	subs	r7, #1
 800ef1a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ef1e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ef22:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ef26:	d1dd      	bne.n	800eee4 <__ieee754_sqrt+0xc0>
 800ef28:	4313      	orrs	r3, r2
 800ef2a:	d006      	beq.n	800ef3a <__ieee754_sqrt+0x116>
 800ef2c:	1c4c      	adds	r4, r1, #1
 800ef2e:	bf13      	iteet	ne
 800ef30:	3101      	addne	r1, #1
 800ef32:	3001      	addeq	r0, #1
 800ef34:	4639      	moveq	r1, r7
 800ef36:	f021 0101 	bicne.w	r1, r1, #1
 800ef3a:	1043      	asrs	r3, r0, #1
 800ef3c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ef40:	0849      	lsrs	r1, r1, #1
 800ef42:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ef46:	07c2      	lsls	r2, r0, #31
 800ef48:	bf48      	it	mi
 800ef4a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800ef4e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800ef52:	460c      	mov	r4, r1
 800ef54:	463d      	mov	r5, r7
 800ef56:	e77f      	b.n	800ee58 <__ieee754_sqrt+0x34>
 800ef58:	0ada      	lsrs	r2, r3, #11
 800ef5a:	3815      	subs	r0, #21
 800ef5c:	055b      	lsls	r3, r3, #21
 800ef5e:	2a00      	cmp	r2, #0
 800ef60:	d0fa      	beq.n	800ef58 <__ieee754_sqrt+0x134>
 800ef62:	02d7      	lsls	r7, r2, #11
 800ef64:	d50a      	bpl.n	800ef7c <__ieee754_sqrt+0x158>
 800ef66:	f1c1 0420 	rsb	r4, r1, #32
 800ef6a:	fa23 f404 	lsr.w	r4, r3, r4
 800ef6e:	1e4d      	subs	r5, r1, #1
 800ef70:	408b      	lsls	r3, r1
 800ef72:	4322      	orrs	r2, r4
 800ef74:	1b41      	subs	r1, r0, r5
 800ef76:	e788      	b.n	800ee8a <__ieee754_sqrt+0x66>
 800ef78:	4608      	mov	r0, r1
 800ef7a:	e7f0      	b.n	800ef5e <__ieee754_sqrt+0x13a>
 800ef7c:	0052      	lsls	r2, r2, #1
 800ef7e:	3101      	adds	r1, #1
 800ef80:	e7ef      	b.n	800ef62 <__ieee754_sqrt+0x13e>
 800ef82:	46e0      	mov	r8, ip
 800ef84:	e7be      	b.n	800ef04 <__ieee754_sqrt+0xe0>
 800ef86:	bf00      	nop
 800ef88:	7ff00000 	.word	0x7ff00000
 800ef8c:	00000000 	.word	0x00000000

0800ef90 <__kernel_cos>:
 800ef90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef94:	ec57 6b10 	vmov	r6, r7, d0
 800ef98:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ef9c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800efa0:	ed8d 1b00 	vstr	d1, [sp]
 800efa4:	da07      	bge.n	800efb6 <__kernel_cos+0x26>
 800efa6:	ee10 0a10 	vmov	r0, s0
 800efaa:	4639      	mov	r1, r7
 800efac:	f7f1 fdfc 	bl	8000ba8 <__aeabi_d2iz>
 800efb0:	2800      	cmp	r0, #0
 800efb2:	f000 8088 	beq.w	800f0c6 <__kernel_cos+0x136>
 800efb6:	4632      	mov	r2, r6
 800efb8:	463b      	mov	r3, r7
 800efba:	4630      	mov	r0, r6
 800efbc:	4639      	mov	r1, r7
 800efbe:	f7f1 fb43 	bl	8000648 <__aeabi_dmul>
 800efc2:	4b51      	ldr	r3, [pc, #324]	; (800f108 <__kernel_cos+0x178>)
 800efc4:	2200      	movs	r2, #0
 800efc6:	4604      	mov	r4, r0
 800efc8:	460d      	mov	r5, r1
 800efca:	f7f1 fb3d 	bl	8000648 <__aeabi_dmul>
 800efce:	a340      	add	r3, pc, #256	; (adr r3, 800f0d0 <__kernel_cos+0x140>)
 800efd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efd4:	4682      	mov	sl, r0
 800efd6:	468b      	mov	fp, r1
 800efd8:	4620      	mov	r0, r4
 800efda:	4629      	mov	r1, r5
 800efdc:	f7f1 fb34 	bl	8000648 <__aeabi_dmul>
 800efe0:	a33d      	add	r3, pc, #244	; (adr r3, 800f0d8 <__kernel_cos+0x148>)
 800efe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efe6:	f7f1 f979 	bl	80002dc <__adddf3>
 800efea:	4622      	mov	r2, r4
 800efec:	462b      	mov	r3, r5
 800efee:	f7f1 fb2b 	bl	8000648 <__aeabi_dmul>
 800eff2:	a33b      	add	r3, pc, #236	; (adr r3, 800f0e0 <__kernel_cos+0x150>)
 800eff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eff8:	f7f1 f96e 	bl	80002d8 <__aeabi_dsub>
 800effc:	4622      	mov	r2, r4
 800effe:	462b      	mov	r3, r5
 800f000:	f7f1 fb22 	bl	8000648 <__aeabi_dmul>
 800f004:	a338      	add	r3, pc, #224	; (adr r3, 800f0e8 <__kernel_cos+0x158>)
 800f006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f00a:	f7f1 f967 	bl	80002dc <__adddf3>
 800f00e:	4622      	mov	r2, r4
 800f010:	462b      	mov	r3, r5
 800f012:	f7f1 fb19 	bl	8000648 <__aeabi_dmul>
 800f016:	a336      	add	r3, pc, #216	; (adr r3, 800f0f0 <__kernel_cos+0x160>)
 800f018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f01c:	f7f1 f95c 	bl	80002d8 <__aeabi_dsub>
 800f020:	4622      	mov	r2, r4
 800f022:	462b      	mov	r3, r5
 800f024:	f7f1 fb10 	bl	8000648 <__aeabi_dmul>
 800f028:	a333      	add	r3, pc, #204	; (adr r3, 800f0f8 <__kernel_cos+0x168>)
 800f02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f02e:	f7f1 f955 	bl	80002dc <__adddf3>
 800f032:	4622      	mov	r2, r4
 800f034:	462b      	mov	r3, r5
 800f036:	f7f1 fb07 	bl	8000648 <__aeabi_dmul>
 800f03a:	4622      	mov	r2, r4
 800f03c:	462b      	mov	r3, r5
 800f03e:	f7f1 fb03 	bl	8000648 <__aeabi_dmul>
 800f042:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f046:	4604      	mov	r4, r0
 800f048:	460d      	mov	r5, r1
 800f04a:	4630      	mov	r0, r6
 800f04c:	4639      	mov	r1, r7
 800f04e:	f7f1 fafb 	bl	8000648 <__aeabi_dmul>
 800f052:	460b      	mov	r3, r1
 800f054:	4602      	mov	r2, r0
 800f056:	4629      	mov	r1, r5
 800f058:	4620      	mov	r0, r4
 800f05a:	f7f1 f93d 	bl	80002d8 <__aeabi_dsub>
 800f05e:	4b2b      	ldr	r3, [pc, #172]	; (800f10c <__kernel_cos+0x17c>)
 800f060:	4598      	cmp	r8, r3
 800f062:	4606      	mov	r6, r0
 800f064:	460f      	mov	r7, r1
 800f066:	dc10      	bgt.n	800f08a <__kernel_cos+0xfa>
 800f068:	4602      	mov	r2, r0
 800f06a:	460b      	mov	r3, r1
 800f06c:	4650      	mov	r0, sl
 800f06e:	4659      	mov	r1, fp
 800f070:	f7f1 f932 	bl	80002d8 <__aeabi_dsub>
 800f074:	460b      	mov	r3, r1
 800f076:	4926      	ldr	r1, [pc, #152]	; (800f110 <__kernel_cos+0x180>)
 800f078:	4602      	mov	r2, r0
 800f07a:	2000      	movs	r0, #0
 800f07c:	f7f1 f92c 	bl	80002d8 <__aeabi_dsub>
 800f080:	ec41 0b10 	vmov	d0, r0, r1
 800f084:	b003      	add	sp, #12
 800f086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f08a:	4b22      	ldr	r3, [pc, #136]	; (800f114 <__kernel_cos+0x184>)
 800f08c:	4920      	ldr	r1, [pc, #128]	; (800f110 <__kernel_cos+0x180>)
 800f08e:	4598      	cmp	r8, r3
 800f090:	bfcc      	ite	gt
 800f092:	4d21      	ldrgt	r5, [pc, #132]	; (800f118 <__kernel_cos+0x188>)
 800f094:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800f098:	2400      	movs	r4, #0
 800f09a:	4622      	mov	r2, r4
 800f09c:	462b      	mov	r3, r5
 800f09e:	2000      	movs	r0, #0
 800f0a0:	f7f1 f91a 	bl	80002d8 <__aeabi_dsub>
 800f0a4:	4622      	mov	r2, r4
 800f0a6:	4680      	mov	r8, r0
 800f0a8:	4689      	mov	r9, r1
 800f0aa:	462b      	mov	r3, r5
 800f0ac:	4650      	mov	r0, sl
 800f0ae:	4659      	mov	r1, fp
 800f0b0:	f7f1 f912 	bl	80002d8 <__aeabi_dsub>
 800f0b4:	4632      	mov	r2, r6
 800f0b6:	463b      	mov	r3, r7
 800f0b8:	f7f1 f90e 	bl	80002d8 <__aeabi_dsub>
 800f0bc:	4602      	mov	r2, r0
 800f0be:	460b      	mov	r3, r1
 800f0c0:	4640      	mov	r0, r8
 800f0c2:	4649      	mov	r1, r9
 800f0c4:	e7da      	b.n	800f07c <__kernel_cos+0xec>
 800f0c6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800f100 <__kernel_cos+0x170>
 800f0ca:	e7db      	b.n	800f084 <__kernel_cos+0xf4>
 800f0cc:	f3af 8000 	nop.w
 800f0d0:	be8838d4 	.word	0xbe8838d4
 800f0d4:	bda8fae9 	.word	0xbda8fae9
 800f0d8:	bdb4b1c4 	.word	0xbdb4b1c4
 800f0dc:	3e21ee9e 	.word	0x3e21ee9e
 800f0e0:	809c52ad 	.word	0x809c52ad
 800f0e4:	3e927e4f 	.word	0x3e927e4f
 800f0e8:	19cb1590 	.word	0x19cb1590
 800f0ec:	3efa01a0 	.word	0x3efa01a0
 800f0f0:	16c15177 	.word	0x16c15177
 800f0f4:	3f56c16c 	.word	0x3f56c16c
 800f0f8:	5555554c 	.word	0x5555554c
 800f0fc:	3fa55555 	.word	0x3fa55555
 800f100:	00000000 	.word	0x00000000
 800f104:	3ff00000 	.word	0x3ff00000
 800f108:	3fe00000 	.word	0x3fe00000
 800f10c:	3fd33332 	.word	0x3fd33332
 800f110:	3ff00000 	.word	0x3ff00000
 800f114:	3fe90000 	.word	0x3fe90000
 800f118:	3fd20000 	.word	0x3fd20000
 800f11c:	00000000 	.word	0x00000000

0800f120 <__kernel_rem_pio2>:
 800f120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f124:	ed2d 8b02 	vpush	{d8}
 800f128:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800f12c:	f112 0f14 	cmn.w	r2, #20
 800f130:	9308      	str	r3, [sp, #32]
 800f132:	9101      	str	r1, [sp, #4]
 800f134:	4bc6      	ldr	r3, [pc, #792]	; (800f450 <__kernel_rem_pio2+0x330>)
 800f136:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800f138:	9009      	str	r0, [sp, #36]	; 0x24
 800f13a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f13e:	9304      	str	r3, [sp, #16]
 800f140:	9b08      	ldr	r3, [sp, #32]
 800f142:	f103 33ff 	add.w	r3, r3, #4294967295
 800f146:	bfa8      	it	ge
 800f148:	1ed4      	subge	r4, r2, #3
 800f14a:	9306      	str	r3, [sp, #24]
 800f14c:	bfb2      	itee	lt
 800f14e:	2400      	movlt	r4, #0
 800f150:	2318      	movge	r3, #24
 800f152:	fb94 f4f3 	sdivge	r4, r4, r3
 800f156:	f06f 0317 	mvn.w	r3, #23
 800f15a:	fb04 3303 	mla	r3, r4, r3, r3
 800f15e:	eb03 0a02 	add.w	sl, r3, r2
 800f162:	9b04      	ldr	r3, [sp, #16]
 800f164:	9a06      	ldr	r2, [sp, #24]
 800f166:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800f440 <__kernel_rem_pio2+0x320>
 800f16a:	eb03 0802 	add.w	r8, r3, r2
 800f16e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800f170:	1aa7      	subs	r7, r4, r2
 800f172:	ae20      	add	r6, sp, #128	; 0x80
 800f174:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f178:	2500      	movs	r5, #0
 800f17a:	4545      	cmp	r5, r8
 800f17c:	dd18      	ble.n	800f1b0 <__kernel_rem_pio2+0x90>
 800f17e:	9b08      	ldr	r3, [sp, #32]
 800f180:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800f184:	aa20      	add	r2, sp, #128	; 0x80
 800f186:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800f440 <__kernel_rem_pio2+0x320>
 800f18a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f18e:	f1c3 0301 	rsb	r3, r3, #1
 800f192:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800f196:	9307      	str	r3, [sp, #28]
 800f198:	9b07      	ldr	r3, [sp, #28]
 800f19a:	9a04      	ldr	r2, [sp, #16]
 800f19c:	4443      	add	r3, r8
 800f19e:	429a      	cmp	r2, r3
 800f1a0:	db2f      	blt.n	800f202 <__kernel_rem_pio2+0xe2>
 800f1a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f1a6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f1aa:	462f      	mov	r7, r5
 800f1ac:	2600      	movs	r6, #0
 800f1ae:	e01b      	b.n	800f1e8 <__kernel_rem_pio2+0xc8>
 800f1b0:	42ef      	cmn	r7, r5
 800f1b2:	d407      	bmi.n	800f1c4 <__kernel_rem_pio2+0xa4>
 800f1b4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f1b8:	f7f1 f9dc 	bl	8000574 <__aeabi_i2d>
 800f1bc:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f1c0:	3501      	adds	r5, #1
 800f1c2:	e7da      	b.n	800f17a <__kernel_rem_pio2+0x5a>
 800f1c4:	ec51 0b18 	vmov	r0, r1, d8
 800f1c8:	e7f8      	b.n	800f1bc <__kernel_rem_pio2+0x9c>
 800f1ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f1ce:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f1d2:	f7f1 fa39 	bl	8000648 <__aeabi_dmul>
 800f1d6:	4602      	mov	r2, r0
 800f1d8:	460b      	mov	r3, r1
 800f1da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f1de:	f7f1 f87d 	bl	80002dc <__adddf3>
 800f1e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f1e6:	3601      	adds	r6, #1
 800f1e8:	9b06      	ldr	r3, [sp, #24]
 800f1ea:	429e      	cmp	r6, r3
 800f1ec:	f1a7 0708 	sub.w	r7, r7, #8
 800f1f0:	ddeb      	ble.n	800f1ca <__kernel_rem_pio2+0xaa>
 800f1f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f1f6:	3508      	adds	r5, #8
 800f1f8:	ecab 7b02 	vstmia	fp!, {d7}
 800f1fc:	f108 0801 	add.w	r8, r8, #1
 800f200:	e7ca      	b.n	800f198 <__kernel_rem_pio2+0x78>
 800f202:	9b04      	ldr	r3, [sp, #16]
 800f204:	aa0c      	add	r2, sp, #48	; 0x30
 800f206:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f20a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f20c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800f20e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f212:	9c04      	ldr	r4, [sp, #16]
 800f214:	930a      	str	r3, [sp, #40]	; 0x28
 800f216:	ab98      	add	r3, sp, #608	; 0x260
 800f218:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f21c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800f220:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800f224:	f8cd b008 	str.w	fp, [sp, #8]
 800f228:	4625      	mov	r5, r4
 800f22a:	2d00      	cmp	r5, #0
 800f22c:	dc78      	bgt.n	800f320 <__kernel_rem_pio2+0x200>
 800f22e:	ec47 6b10 	vmov	d0, r6, r7
 800f232:	4650      	mov	r0, sl
 800f234:	f000 fc8c 	bl	800fb50 <scalbn>
 800f238:	ec57 6b10 	vmov	r6, r7, d0
 800f23c:	2200      	movs	r2, #0
 800f23e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f242:	ee10 0a10 	vmov	r0, s0
 800f246:	4639      	mov	r1, r7
 800f248:	f7f1 f9fe 	bl	8000648 <__aeabi_dmul>
 800f24c:	ec41 0b10 	vmov	d0, r0, r1
 800f250:	f000 fb72 	bl	800f938 <floor>
 800f254:	4b7f      	ldr	r3, [pc, #508]	; (800f454 <__kernel_rem_pio2+0x334>)
 800f256:	ec51 0b10 	vmov	r0, r1, d0
 800f25a:	2200      	movs	r2, #0
 800f25c:	f7f1 f9f4 	bl	8000648 <__aeabi_dmul>
 800f260:	4602      	mov	r2, r0
 800f262:	460b      	mov	r3, r1
 800f264:	4630      	mov	r0, r6
 800f266:	4639      	mov	r1, r7
 800f268:	f7f1 f836 	bl	80002d8 <__aeabi_dsub>
 800f26c:	460f      	mov	r7, r1
 800f26e:	4606      	mov	r6, r0
 800f270:	f7f1 fc9a 	bl	8000ba8 <__aeabi_d2iz>
 800f274:	9007      	str	r0, [sp, #28]
 800f276:	f7f1 f97d 	bl	8000574 <__aeabi_i2d>
 800f27a:	4602      	mov	r2, r0
 800f27c:	460b      	mov	r3, r1
 800f27e:	4630      	mov	r0, r6
 800f280:	4639      	mov	r1, r7
 800f282:	f7f1 f829 	bl	80002d8 <__aeabi_dsub>
 800f286:	f1ba 0f00 	cmp.w	sl, #0
 800f28a:	4606      	mov	r6, r0
 800f28c:	460f      	mov	r7, r1
 800f28e:	dd70      	ble.n	800f372 <__kernel_rem_pio2+0x252>
 800f290:	1e62      	subs	r2, r4, #1
 800f292:	ab0c      	add	r3, sp, #48	; 0x30
 800f294:	9d07      	ldr	r5, [sp, #28]
 800f296:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f29a:	f1ca 0118 	rsb	r1, sl, #24
 800f29e:	fa40 f301 	asr.w	r3, r0, r1
 800f2a2:	441d      	add	r5, r3
 800f2a4:	408b      	lsls	r3, r1
 800f2a6:	1ac0      	subs	r0, r0, r3
 800f2a8:	ab0c      	add	r3, sp, #48	; 0x30
 800f2aa:	9507      	str	r5, [sp, #28]
 800f2ac:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800f2b0:	f1ca 0317 	rsb	r3, sl, #23
 800f2b4:	fa40 f303 	asr.w	r3, r0, r3
 800f2b8:	9302      	str	r3, [sp, #8]
 800f2ba:	9b02      	ldr	r3, [sp, #8]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	dd66      	ble.n	800f38e <__kernel_rem_pio2+0x26e>
 800f2c0:	9b07      	ldr	r3, [sp, #28]
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	3301      	adds	r3, #1
 800f2c6:	9307      	str	r3, [sp, #28]
 800f2c8:	4615      	mov	r5, r2
 800f2ca:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f2ce:	4294      	cmp	r4, r2
 800f2d0:	f300 8099 	bgt.w	800f406 <__kernel_rem_pio2+0x2e6>
 800f2d4:	f1ba 0f00 	cmp.w	sl, #0
 800f2d8:	dd07      	ble.n	800f2ea <__kernel_rem_pio2+0x1ca>
 800f2da:	f1ba 0f01 	cmp.w	sl, #1
 800f2de:	f000 80a5 	beq.w	800f42c <__kernel_rem_pio2+0x30c>
 800f2e2:	f1ba 0f02 	cmp.w	sl, #2
 800f2e6:	f000 80c1 	beq.w	800f46c <__kernel_rem_pio2+0x34c>
 800f2ea:	9b02      	ldr	r3, [sp, #8]
 800f2ec:	2b02      	cmp	r3, #2
 800f2ee:	d14e      	bne.n	800f38e <__kernel_rem_pio2+0x26e>
 800f2f0:	4632      	mov	r2, r6
 800f2f2:	463b      	mov	r3, r7
 800f2f4:	4958      	ldr	r1, [pc, #352]	; (800f458 <__kernel_rem_pio2+0x338>)
 800f2f6:	2000      	movs	r0, #0
 800f2f8:	f7f0 ffee 	bl	80002d8 <__aeabi_dsub>
 800f2fc:	4606      	mov	r6, r0
 800f2fe:	460f      	mov	r7, r1
 800f300:	2d00      	cmp	r5, #0
 800f302:	d044      	beq.n	800f38e <__kernel_rem_pio2+0x26e>
 800f304:	4650      	mov	r0, sl
 800f306:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800f448 <__kernel_rem_pio2+0x328>
 800f30a:	f000 fc21 	bl	800fb50 <scalbn>
 800f30e:	4630      	mov	r0, r6
 800f310:	4639      	mov	r1, r7
 800f312:	ec53 2b10 	vmov	r2, r3, d0
 800f316:	f7f0 ffdf 	bl	80002d8 <__aeabi_dsub>
 800f31a:	4606      	mov	r6, r0
 800f31c:	460f      	mov	r7, r1
 800f31e:	e036      	b.n	800f38e <__kernel_rem_pio2+0x26e>
 800f320:	4b4e      	ldr	r3, [pc, #312]	; (800f45c <__kernel_rem_pio2+0x33c>)
 800f322:	2200      	movs	r2, #0
 800f324:	4630      	mov	r0, r6
 800f326:	4639      	mov	r1, r7
 800f328:	f7f1 f98e 	bl	8000648 <__aeabi_dmul>
 800f32c:	f7f1 fc3c 	bl	8000ba8 <__aeabi_d2iz>
 800f330:	f7f1 f920 	bl	8000574 <__aeabi_i2d>
 800f334:	4b4a      	ldr	r3, [pc, #296]	; (800f460 <__kernel_rem_pio2+0x340>)
 800f336:	2200      	movs	r2, #0
 800f338:	4680      	mov	r8, r0
 800f33a:	4689      	mov	r9, r1
 800f33c:	f7f1 f984 	bl	8000648 <__aeabi_dmul>
 800f340:	4602      	mov	r2, r0
 800f342:	460b      	mov	r3, r1
 800f344:	4630      	mov	r0, r6
 800f346:	4639      	mov	r1, r7
 800f348:	f7f0 ffc6 	bl	80002d8 <__aeabi_dsub>
 800f34c:	f7f1 fc2c 	bl	8000ba8 <__aeabi_d2iz>
 800f350:	9b02      	ldr	r3, [sp, #8]
 800f352:	f843 0b04 	str.w	r0, [r3], #4
 800f356:	3d01      	subs	r5, #1
 800f358:	9302      	str	r3, [sp, #8]
 800f35a:	ab70      	add	r3, sp, #448	; 0x1c0
 800f35c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f364:	4640      	mov	r0, r8
 800f366:	4649      	mov	r1, r9
 800f368:	f7f0 ffb8 	bl	80002dc <__adddf3>
 800f36c:	4606      	mov	r6, r0
 800f36e:	460f      	mov	r7, r1
 800f370:	e75b      	b.n	800f22a <__kernel_rem_pio2+0x10a>
 800f372:	d105      	bne.n	800f380 <__kernel_rem_pio2+0x260>
 800f374:	1e63      	subs	r3, r4, #1
 800f376:	aa0c      	add	r2, sp, #48	; 0x30
 800f378:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f37c:	15c3      	asrs	r3, r0, #23
 800f37e:	e79b      	b.n	800f2b8 <__kernel_rem_pio2+0x198>
 800f380:	4b38      	ldr	r3, [pc, #224]	; (800f464 <__kernel_rem_pio2+0x344>)
 800f382:	2200      	movs	r2, #0
 800f384:	f7f1 fbe6 	bl	8000b54 <__aeabi_dcmpge>
 800f388:	2800      	cmp	r0, #0
 800f38a:	d139      	bne.n	800f400 <__kernel_rem_pio2+0x2e0>
 800f38c:	9002      	str	r0, [sp, #8]
 800f38e:	2200      	movs	r2, #0
 800f390:	2300      	movs	r3, #0
 800f392:	4630      	mov	r0, r6
 800f394:	4639      	mov	r1, r7
 800f396:	f7f1 fbbf 	bl	8000b18 <__aeabi_dcmpeq>
 800f39a:	2800      	cmp	r0, #0
 800f39c:	f000 80b4 	beq.w	800f508 <__kernel_rem_pio2+0x3e8>
 800f3a0:	f104 3bff 	add.w	fp, r4, #4294967295
 800f3a4:	465b      	mov	r3, fp
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	9904      	ldr	r1, [sp, #16]
 800f3aa:	428b      	cmp	r3, r1
 800f3ac:	da65      	bge.n	800f47a <__kernel_rem_pio2+0x35a>
 800f3ae:	2a00      	cmp	r2, #0
 800f3b0:	d07b      	beq.n	800f4aa <__kernel_rem_pio2+0x38a>
 800f3b2:	ab0c      	add	r3, sp, #48	; 0x30
 800f3b4:	f1aa 0a18 	sub.w	sl, sl, #24
 800f3b8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	f000 80a0 	beq.w	800f502 <__kernel_rem_pio2+0x3e2>
 800f3c2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800f448 <__kernel_rem_pio2+0x328>
 800f3c6:	4650      	mov	r0, sl
 800f3c8:	f000 fbc2 	bl	800fb50 <scalbn>
 800f3cc:	4f23      	ldr	r7, [pc, #140]	; (800f45c <__kernel_rem_pio2+0x33c>)
 800f3ce:	ec55 4b10 	vmov	r4, r5, d0
 800f3d2:	46d8      	mov	r8, fp
 800f3d4:	2600      	movs	r6, #0
 800f3d6:	f1b8 0f00 	cmp.w	r8, #0
 800f3da:	f280 80cf 	bge.w	800f57c <__kernel_rem_pio2+0x45c>
 800f3de:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800f440 <__kernel_rem_pio2+0x320>
 800f3e2:	465f      	mov	r7, fp
 800f3e4:	f04f 0800 	mov.w	r8, #0
 800f3e8:	2f00      	cmp	r7, #0
 800f3ea:	f2c0 80fd 	blt.w	800f5e8 <__kernel_rem_pio2+0x4c8>
 800f3ee:	ab70      	add	r3, sp, #448	; 0x1c0
 800f3f0:	f8df a074 	ldr.w	sl, [pc, #116]	; 800f468 <__kernel_rem_pio2+0x348>
 800f3f4:	ec55 4b18 	vmov	r4, r5, d8
 800f3f8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800f3fc:	2600      	movs	r6, #0
 800f3fe:	e0e5      	b.n	800f5cc <__kernel_rem_pio2+0x4ac>
 800f400:	2302      	movs	r3, #2
 800f402:	9302      	str	r3, [sp, #8]
 800f404:	e75c      	b.n	800f2c0 <__kernel_rem_pio2+0x1a0>
 800f406:	f8db 3000 	ldr.w	r3, [fp]
 800f40a:	b955      	cbnz	r5, 800f422 <__kernel_rem_pio2+0x302>
 800f40c:	b123      	cbz	r3, 800f418 <__kernel_rem_pio2+0x2f8>
 800f40e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f412:	f8cb 3000 	str.w	r3, [fp]
 800f416:	2301      	movs	r3, #1
 800f418:	3201      	adds	r2, #1
 800f41a:	f10b 0b04 	add.w	fp, fp, #4
 800f41e:	461d      	mov	r5, r3
 800f420:	e755      	b.n	800f2ce <__kernel_rem_pio2+0x1ae>
 800f422:	1acb      	subs	r3, r1, r3
 800f424:	f8cb 3000 	str.w	r3, [fp]
 800f428:	462b      	mov	r3, r5
 800f42a:	e7f5      	b.n	800f418 <__kernel_rem_pio2+0x2f8>
 800f42c:	1e62      	subs	r2, r4, #1
 800f42e:	ab0c      	add	r3, sp, #48	; 0x30
 800f430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f434:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f438:	a90c      	add	r1, sp, #48	; 0x30
 800f43a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f43e:	e754      	b.n	800f2ea <__kernel_rem_pio2+0x1ca>
	...
 800f44c:	3ff00000 	.word	0x3ff00000
 800f450:	08010450 	.word	0x08010450
 800f454:	40200000 	.word	0x40200000
 800f458:	3ff00000 	.word	0x3ff00000
 800f45c:	3e700000 	.word	0x3e700000
 800f460:	41700000 	.word	0x41700000
 800f464:	3fe00000 	.word	0x3fe00000
 800f468:	08010410 	.word	0x08010410
 800f46c:	1e62      	subs	r2, r4, #1
 800f46e:	ab0c      	add	r3, sp, #48	; 0x30
 800f470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f474:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f478:	e7de      	b.n	800f438 <__kernel_rem_pio2+0x318>
 800f47a:	a90c      	add	r1, sp, #48	; 0x30
 800f47c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f480:	3b01      	subs	r3, #1
 800f482:	430a      	orrs	r2, r1
 800f484:	e790      	b.n	800f3a8 <__kernel_rem_pio2+0x288>
 800f486:	3301      	adds	r3, #1
 800f488:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f48c:	2900      	cmp	r1, #0
 800f48e:	d0fa      	beq.n	800f486 <__kernel_rem_pio2+0x366>
 800f490:	9a08      	ldr	r2, [sp, #32]
 800f492:	18e3      	adds	r3, r4, r3
 800f494:	18a6      	adds	r6, r4, r2
 800f496:	aa20      	add	r2, sp, #128	; 0x80
 800f498:	1c65      	adds	r5, r4, #1
 800f49a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800f49e:	9302      	str	r3, [sp, #8]
 800f4a0:	9b02      	ldr	r3, [sp, #8]
 800f4a2:	42ab      	cmp	r3, r5
 800f4a4:	da04      	bge.n	800f4b0 <__kernel_rem_pio2+0x390>
 800f4a6:	461c      	mov	r4, r3
 800f4a8:	e6b5      	b.n	800f216 <__kernel_rem_pio2+0xf6>
 800f4aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f4ac:	2301      	movs	r3, #1
 800f4ae:	e7eb      	b.n	800f488 <__kernel_rem_pio2+0x368>
 800f4b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f4b6:	f7f1 f85d 	bl	8000574 <__aeabi_i2d>
 800f4ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f4be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4c0:	46b3      	mov	fp, r6
 800f4c2:	461c      	mov	r4, r3
 800f4c4:	2700      	movs	r7, #0
 800f4c6:	f04f 0800 	mov.w	r8, #0
 800f4ca:	f04f 0900 	mov.w	r9, #0
 800f4ce:	9b06      	ldr	r3, [sp, #24]
 800f4d0:	429f      	cmp	r7, r3
 800f4d2:	dd06      	ble.n	800f4e2 <__kernel_rem_pio2+0x3c2>
 800f4d4:	ab70      	add	r3, sp, #448	; 0x1c0
 800f4d6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f4da:	e9c3 8900 	strd	r8, r9, [r3]
 800f4de:	3501      	adds	r5, #1
 800f4e0:	e7de      	b.n	800f4a0 <__kernel_rem_pio2+0x380>
 800f4e2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f4e6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f4ea:	f7f1 f8ad 	bl	8000648 <__aeabi_dmul>
 800f4ee:	4602      	mov	r2, r0
 800f4f0:	460b      	mov	r3, r1
 800f4f2:	4640      	mov	r0, r8
 800f4f4:	4649      	mov	r1, r9
 800f4f6:	f7f0 fef1 	bl	80002dc <__adddf3>
 800f4fa:	3701      	adds	r7, #1
 800f4fc:	4680      	mov	r8, r0
 800f4fe:	4689      	mov	r9, r1
 800f500:	e7e5      	b.n	800f4ce <__kernel_rem_pio2+0x3ae>
 800f502:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f506:	e754      	b.n	800f3b2 <__kernel_rem_pio2+0x292>
 800f508:	ec47 6b10 	vmov	d0, r6, r7
 800f50c:	f1ca 0000 	rsb	r0, sl, #0
 800f510:	f000 fb1e 	bl	800fb50 <scalbn>
 800f514:	ec57 6b10 	vmov	r6, r7, d0
 800f518:	4b9f      	ldr	r3, [pc, #636]	; (800f798 <__kernel_rem_pio2+0x678>)
 800f51a:	ee10 0a10 	vmov	r0, s0
 800f51e:	2200      	movs	r2, #0
 800f520:	4639      	mov	r1, r7
 800f522:	f7f1 fb17 	bl	8000b54 <__aeabi_dcmpge>
 800f526:	b300      	cbz	r0, 800f56a <__kernel_rem_pio2+0x44a>
 800f528:	4b9c      	ldr	r3, [pc, #624]	; (800f79c <__kernel_rem_pio2+0x67c>)
 800f52a:	2200      	movs	r2, #0
 800f52c:	4630      	mov	r0, r6
 800f52e:	4639      	mov	r1, r7
 800f530:	f7f1 f88a 	bl	8000648 <__aeabi_dmul>
 800f534:	f7f1 fb38 	bl	8000ba8 <__aeabi_d2iz>
 800f538:	4605      	mov	r5, r0
 800f53a:	f7f1 f81b 	bl	8000574 <__aeabi_i2d>
 800f53e:	4b96      	ldr	r3, [pc, #600]	; (800f798 <__kernel_rem_pio2+0x678>)
 800f540:	2200      	movs	r2, #0
 800f542:	f7f1 f881 	bl	8000648 <__aeabi_dmul>
 800f546:	460b      	mov	r3, r1
 800f548:	4602      	mov	r2, r0
 800f54a:	4639      	mov	r1, r7
 800f54c:	4630      	mov	r0, r6
 800f54e:	f7f0 fec3 	bl	80002d8 <__aeabi_dsub>
 800f552:	f7f1 fb29 	bl	8000ba8 <__aeabi_d2iz>
 800f556:	f104 0b01 	add.w	fp, r4, #1
 800f55a:	ab0c      	add	r3, sp, #48	; 0x30
 800f55c:	f10a 0a18 	add.w	sl, sl, #24
 800f560:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f564:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800f568:	e72b      	b.n	800f3c2 <__kernel_rem_pio2+0x2a2>
 800f56a:	4630      	mov	r0, r6
 800f56c:	4639      	mov	r1, r7
 800f56e:	f7f1 fb1b 	bl	8000ba8 <__aeabi_d2iz>
 800f572:	ab0c      	add	r3, sp, #48	; 0x30
 800f574:	46a3      	mov	fp, r4
 800f576:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f57a:	e722      	b.n	800f3c2 <__kernel_rem_pio2+0x2a2>
 800f57c:	ab70      	add	r3, sp, #448	; 0x1c0
 800f57e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800f582:	ab0c      	add	r3, sp, #48	; 0x30
 800f584:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f588:	f7f0 fff4 	bl	8000574 <__aeabi_i2d>
 800f58c:	4622      	mov	r2, r4
 800f58e:	462b      	mov	r3, r5
 800f590:	f7f1 f85a 	bl	8000648 <__aeabi_dmul>
 800f594:	4632      	mov	r2, r6
 800f596:	e9c9 0100 	strd	r0, r1, [r9]
 800f59a:	463b      	mov	r3, r7
 800f59c:	4620      	mov	r0, r4
 800f59e:	4629      	mov	r1, r5
 800f5a0:	f7f1 f852 	bl	8000648 <__aeabi_dmul>
 800f5a4:	f108 38ff 	add.w	r8, r8, #4294967295
 800f5a8:	4604      	mov	r4, r0
 800f5aa:	460d      	mov	r5, r1
 800f5ac:	e713      	b.n	800f3d6 <__kernel_rem_pio2+0x2b6>
 800f5ae:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800f5b2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800f5b6:	f7f1 f847 	bl	8000648 <__aeabi_dmul>
 800f5ba:	4602      	mov	r2, r0
 800f5bc:	460b      	mov	r3, r1
 800f5be:	4620      	mov	r0, r4
 800f5c0:	4629      	mov	r1, r5
 800f5c2:	f7f0 fe8b 	bl	80002dc <__adddf3>
 800f5c6:	3601      	adds	r6, #1
 800f5c8:	4604      	mov	r4, r0
 800f5ca:	460d      	mov	r5, r1
 800f5cc:	9b04      	ldr	r3, [sp, #16]
 800f5ce:	429e      	cmp	r6, r3
 800f5d0:	dc01      	bgt.n	800f5d6 <__kernel_rem_pio2+0x4b6>
 800f5d2:	45b0      	cmp	r8, r6
 800f5d4:	daeb      	bge.n	800f5ae <__kernel_rem_pio2+0x48e>
 800f5d6:	ab48      	add	r3, sp, #288	; 0x120
 800f5d8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f5dc:	e9c3 4500 	strd	r4, r5, [r3]
 800f5e0:	3f01      	subs	r7, #1
 800f5e2:	f108 0801 	add.w	r8, r8, #1
 800f5e6:	e6ff      	b.n	800f3e8 <__kernel_rem_pio2+0x2c8>
 800f5e8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f5ea:	2b02      	cmp	r3, #2
 800f5ec:	dc0b      	bgt.n	800f606 <__kernel_rem_pio2+0x4e6>
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	dc6e      	bgt.n	800f6d0 <__kernel_rem_pio2+0x5b0>
 800f5f2:	d045      	beq.n	800f680 <__kernel_rem_pio2+0x560>
 800f5f4:	9b07      	ldr	r3, [sp, #28]
 800f5f6:	f003 0007 	and.w	r0, r3, #7
 800f5fa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f5fe:	ecbd 8b02 	vpop	{d8}
 800f602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f606:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f608:	2b03      	cmp	r3, #3
 800f60a:	d1f3      	bne.n	800f5f4 <__kernel_rem_pio2+0x4d4>
 800f60c:	ab48      	add	r3, sp, #288	; 0x120
 800f60e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800f612:	46d0      	mov	r8, sl
 800f614:	46d9      	mov	r9, fp
 800f616:	f1b9 0f00 	cmp.w	r9, #0
 800f61a:	f1a8 0808 	sub.w	r8, r8, #8
 800f61e:	dc64      	bgt.n	800f6ea <__kernel_rem_pio2+0x5ca>
 800f620:	465c      	mov	r4, fp
 800f622:	2c01      	cmp	r4, #1
 800f624:	f1aa 0a08 	sub.w	sl, sl, #8
 800f628:	dc7e      	bgt.n	800f728 <__kernel_rem_pio2+0x608>
 800f62a:	2000      	movs	r0, #0
 800f62c:	2100      	movs	r1, #0
 800f62e:	f1bb 0f01 	cmp.w	fp, #1
 800f632:	f300 8097 	bgt.w	800f764 <__kernel_rem_pio2+0x644>
 800f636:	9b02      	ldr	r3, [sp, #8]
 800f638:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800f63c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800f640:	2b00      	cmp	r3, #0
 800f642:	f040 8099 	bne.w	800f778 <__kernel_rem_pio2+0x658>
 800f646:	9b01      	ldr	r3, [sp, #4]
 800f648:	e9c3 5600 	strd	r5, r6, [r3]
 800f64c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800f650:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f654:	e7ce      	b.n	800f5f4 <__kernel_rem_pio2+0x4d4>
 800f656:	ab48      	add	r3, sp, #288	; 0x120
 800f658:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f660:	f7f0 fe3c 	bl	80002dc <__adddf3>
 800f664:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f668:	f1bb 0f00 	cmp.w	fp, #0
 800f66c:	daf3      	bge.n	800f656 <__kernel_rem_pio2+0x536>
 800f66e:	9b02      	ldr	r3, [sp, #8]
 800f670:	b113      	cbz	r3, 800f678 <__kernel_rem_pio2+0x558>
 800f672:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f676:	4619      	mov	r1, r3
 800f678:	9b01      	ldr	r3, [sp, #4]
 800f67a:	e9c3 0100 	strd	r0, r1, [r3]
 800f67e:	e7b9      	b.n	800f5f4 <__kernel_rem_pio2+0x4d4>
 800f680:	2000      	movs	r0, #0
 800f682:	2100      	movs	r1, #0
 800f684:	e7f0      	b.n	800f668 <__kernel_rem_pio2+0x548>
 800f686:	ab48      	add	r3, sp, #288	; 0x120
 800f688:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f690:	f7f0 fe24 	bl	80002dc <__adddf3>
 800f694:	3c01      	subs	r4, #1
 800f696:	2c00      	cmp	r4, #0
 800f698:	daf5      	bge.n	800f686 <__kernel_rem_pio2+0x566>
 800f69a:	9b02      	ldr	r3, [sp, #8]
 800f69c:	b1e3      	cbz	r3, 800f6d8 <__kernel_rem_pio2+0x5b8>
 800f69e:	4602      	mov	r2, r0
 800f6a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f6a4:	9c01      	ldr	r4, [sp, #4]
 800f6a6:	e9c4 2300 	strd	r2, r3, [r4]
 800f6aa:	4602      	mov	r2, r0
 800f6ac:	460b      	mov	r3, r1
 800f6ae:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800f6b2:	f7f0 fe11 	bl	80002d8 <__aeabi_dsub>
 800f6b6:	ad4a      	add	r5, sp, #296	; 0x128
 800f6b8:	2401      	movs	r4, #1
 800f6ba:	45a3      	cmp	fp, r4
 800f6bc:	da0f      	bge.n	800f6de <__kernel_rem_pio2+0x5be>
 800f6be:	9b02      	ldr	r3, [sp, #8]
 800f6c0:	b113      	cbz	r3, 800f6c8 <__kernel_rem_pio2+0x5a8>
 800f6c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f6c6:	4619      	mov	r1, r3
 800f6c8:	9b01      	ldr	r3, [sp, #4]
 800f6ca:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f6ce:	e791      	b.n	800f5f4 <__kernel_rem_pio2+0x4d4>
 800f6d0:	465c      	mov	r4, fp
 800f6d2:	2000      	movs	r0, #0
 800f6d4:	2100      	movs	r1, #0
 800f6d6:	e7de      	b.n	800f696 <__kernel_rem_pio2+0x576>
 800f6d8:	4602      	mov	r2, r0
 800f6da:	460b      	mov	r3, r1
 800f6dc:	e7e2      	b.n	800f6a4 <__kernel_rem_pio2+0x584>
 800f6de:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800f6e2:	f7f0 fdfb 	bl	80002dc <__adddf3>
 800f6e6:	3401      	adds	r4, #1
 800f6e8:	e7e7      	b.n	800f6ba <__kernel_rem_pio2+0x59a>
 800f6ea:	e9d8 4500 	ldrd	r4, r5, [r8]
 800f6ee:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800f6f2:	4620      	mov	r0, r4
 800f6f4:	4632      	mov	r2, r6
 800f6f6:	463b      	mov	r3, r7
 800f6f8:	4629      	mov	r1, r5
 800f6fa:	f7f0 fdef 	bl	80002dc <__adddf3>
 800f6fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f702:	4602      	mov	r2, r0
 800f704:	460b      	mov	r3, r1
 800f706:	4620      	mov	r0, r4
 800f708:	4629      	mov	r1, r5
 800f70a:	f7f0 fde5 	bl	80002d8 <__aeabi_dsub>
 800f70e:	4632      	mov	r2, r6
 800f710:	463b      	mov	r3, r7
 800f712:	f7f0 fde3 	bl	80002dc <__adddf3>
 800f716:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f71a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800f71e:	ed88 7b00 	vstr	d7, [r8]
 800f722:	f109 39ff 	add.w	r9, r9, #4294967295
 800f726:	e776      	b.n	800f616 <__kernel_rem_pio2+0x4f6>
 800f728:	e9da 8900 	ldrd	r8, r9, [sl]
 800f72c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f730:	4640      	mov	r0, r8
 800f732:	4632      	mov	r2, r6
 800f734:	463b      	mov	r3, r7
 800f736:	4649      	mov	r1, r9
 800f738:	f7f0 fdd0 	bl	80002dc <__adddf3>
 800f73c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f740:	4602      	mov	r2, r0
 800f742:	460b      	mov	r3, r1
 800f744:	4640      	mov	r0, r8
 800f746:	4649      	mov	r1, r9
 800f748:	f7f0 fdc6 	bl	80002d8 <__aeabi_dsub>
 800f74c:	4632      	mov	r2, r6
 800f74e:	463b      	mov	r3, r7
 800f750:	f7f0 fdc4 	bl	80002dc <__adddf3>
 800f754:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f758:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f75c:	ed8a 7b00 	vstr	d7, [sl]
 800f760:	3c01      	subs	r4, #1
 800f762:	e75e      	b.n	800f622 <__kernel_rem_pio2+0x502>
 800f764:	ab48      	add	r3, sp, #288	; 0x120
 800f766:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f76e:	f7f0 fdb5 	bl	80002dc <__adddf3>
 800f772:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f776:	e75a      	b.n	800f62e <__kernel_rem_pio2+0x50e>
 800f778:	9b01      	ldr	r3, [sp, #4]
 800f77a:	9a01      	ldr	r2, [sp, #4]
 800f77c:	601d      	str	r5, [r3, #0]
 800f77e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800f782:	605c      	str	r4, [r3, #4]
 800f784:	609f      	str	r7, [r3, #8]
 800f786:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800f78a:	60d3      	str	r3, [r2, #12]
 800f78c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f790:	6110      	str	r0, [r2, #16]
 800f792:	6153      	str	r3, [r2, #20]
 800f794:	e72e      	b.n	800f5f4 <__kernel_rem_pio2+0x4d4>
 800f796:	bf00      	nop
 800f798:	41700000 	.word	0x41700000
 800f79c:	3e700000 	.word	0x3e700000

0800f7a0 <__kernel_sin>:
 800f7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7a4:	ed2d 8b04 	vpush	{d8-d9}
 800f7a8:	eeb0 8a41 	vmov.f32	s16, s2
 800f7ac:	eef0 8a61 	vmov.f32	s17, s3
 800f7b0:	ec55 4b10 	vmov	r4, r5, d0
 800f7b4:	b083      	sub	sp, #12
 800f7b6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f7ba:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f7be:	9001      	str	r0, [sp, #4]
 800f7c0:	da06      	bge.n	800f7d0 <__kernel_sin+0x30>
 800f7c2:	ee10 0a10 	vmov	r0, s0
 800f7c6:	4629      	mov	r1, r5
 800f7c8:	f7f1 f9ee 	bl	8000ba8 <__aeabi_d2iz>
 800f7cc:	2800      	cmp	r0, #0
 800f7ce:	d051      	beq.n	800f874 <__kernel_sin+0xd4>
 800f7d0:	4622      	mov	r2, r4
 800f7d2:	462b      	mov	r3, r5
 800f7d4:	4620      	mov	r0, r4
 800f7d6:	4629      	mov	r1, r5
 800f7d8:	f7f0 ff36 	bl	8000648 <__aeabi_dmul>
 800f7dc:	4682      	mov	sl, r0
 800f7de:	468b      	mov	fp, r1
 800f7e0:	4602      	mov	r2, r0
 800f7e2:	460b      	mov	r3, r1
 800f7e4:	4620      	mov	r0, r4
 800f7e6:	4629      	mov	r1, r5
 800f7e8:	f7f0 ff2e 	bl	8000648 <__aeabi_dmul>
 800f7ec:	a341      	add	r3, pc, #260	; (adr r3, 800f8f4 <__kernel_sin+0x154>)
 800f7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f2:	4680      	mov	r8, r0
 800f7f4:	4689      	mov	r9, r1
 800f7f6:	4650      	mov	r0, sl
 800f7f8:	4659      	mov	r1, fp
 800f7fa:	f7f0 ff25 	bl	8000648 <__aeabi_dmul>
 800f7fe:	a33f      	add	r3, pc, #252	; (adr r3, 800f8fc <__kernel_sin+0x15c>)
 800f800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f804:	f7f0 fd68 	bl	80002d8 <__aeabi_dsub>
 800f808:	4652      	mov	r2, sl
 800f80a:	465b      	mov	r3, fp
 800f80c:	f7f0 ff1c 	bl	8000648 <__aeabi_dmul>
 800f810:	a33c      	add	r3, pc, #240	; (adr r3, 800f904 <__kernel_sin+0x164>)
 800f812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f816:	f7f0 fd61 	bl	80002dc <__adddf3>
 800f81a:	4652      	mov	r2, sl
 800f81c:	465b      	mov	r3, fp
 800f81e:	f7f0 ff13 	bl	8000648 <__aeabi_dmul>
 800f822:	a33a      	add	r3, pc, #232	; (adr r3, 800f90c <__kernel_sin+0x16c>)
 800f824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f828:	f7f0 fd56 	bl	80002d8 <__aeabi_dsub>
 800f82c:	4652      	mov	r2, sl
 800f82e:	465b      	mov	r3, fp
 800f830:	f7f0 ff0a 	bl	8000648 <__aeabi_dmul>
 800f834:	a337      	add	r3, pc, #220	; (adr r3, 800f914 <__kernel_sin+0x174>)
 800f836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f83a:	f7f0 fd4f 	bl	80002dc <__adddf3>
 800f83e:	9b01      	ldr	r3, [sp, #4]
 800f840:	4606      	mov	r6, r0
 800f842:	460f      	mov	r7, r1
 800f844:	b9eb      	cbnz	r3, 800f882 <__kernel_sin+0xe2>
 800f846:	4602      	mov	r2, r0
 800f848:	460b      	mov	r3, r1
 800f84a:	4650      	mov	r0, sl
 800f84c:	4659      	mov	r1, fp
 800f84e:	f7f0 fefb 	bl	8000648 <__aeabi_dmul>
 800f852:	a325      	add	r3, pc, #148	; (adr r3, 800f8e8 <__kernel_sin+0x148>)
 800f854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f858:	f7f0 fd3e 	bl	80002d8 <__aeabi_dsub>
 800f85c:	4642      	mov	r2, r8
 800f85e:	464b      	mov	r3, r9
 800f860:	f7f0 fef2 	bl	8000648 <__aeabi_dmul>
 800f864:	4602      	mov	r2, r0
 800f866:	460b      	mov	r3, r1
 800f868:	4620      	mov	r0, r4
 800f86a:	4629      	mov	r1, r5
 800f86c:	f7f0 fd36 	bl	80002dc <__adddf3>
 800f870:	4604      	mov	r4, r0
 800f872:	460d      	mov	r5, r1
 800f874:	ec45 4b10 	vmov	d0, r4, r5
 800f878:	b003      	add	sp, #12
 800f87a:	ecbd 8b04 	vpop	{d8-d9}
 800f87e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f882:	4b1b      	ldr	r3, [pc, #108]	; (800f8f0 <__kernel_sin+0x150>)
 800f884:	ec51 0b18 	vmov	r0, r1, d8
 800f888:	2200      	movs	r2, #0
 800f88a:	f7f0 fedd 	bl	8000648 <__aeabi_dmul>
 800f88e:	4632      	mov	r2, r6
 800f890:	ec41 0b19 	vmov	d9, r0, r1
 800f894:	463b      	mov	r3, r7
 800f896:	4640      	mov	r0, r8
 800f898:	4649      	mov	r1, r9
 800f89a:	f7f0 fed5 	bl	8000648 <__aeabi_dmul>
 800f89e:	4602      	mov	r2, r0
 800f8a0:	460b      	mov	r3, r1
 800f8a2:	ec51 0b19 	vmov	r0, r1, d9
 800f8a6:	f7f0 fd17 	bl	80002d8 <__aeabi_dsub>
 800f8aa:	4652      	mov	r2, sl
 800f8ac:	465b      	mov	r3, fp
 800f8ae:	f7f0 fecb 	bl	8000648 <__aeabi_dmul>
 800f8b2:	ec53 2b18 	vmov	r2, r3, d8
 800f8b6:	f7f0 fd0f 	bl	80002d8 <__aeabi_dsub>
 800f8ba:	a30b      	add	r3, pc, #44	; (adr r3, 800f8e8 <__kernel_sin+0x148>)
 800f8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8c0:	4606      	mov	r6, r0
 800f8c2:	460f      	mov	r7, r1
 800f8c4:	4640      	mov	r0, r8
 800f8c6:	4649      	mov	r1, r9
 800f8c8:	f7f0 febe 	bl	8000648 <__aeabi_dmul>
 800f8cc:	4602      	mov	r2, r0
 800f8ce:	460b      	mov	r3, r1
 800f8d0:	4630      	mov	r0, r6
 800f8d2:	4639      	mov	r1, r7
 800f8d4:	f7f0 fd02 	bl	80002dc <__adddf3>
 800f8d8:	4602      	mov	r2, r0
 800f8da:	460b      	mov	r3, r1
 800f8dc:	4620      	mov	r0, r4
 800f8de:	4629      	mov	r1, r5
 800f8e0:	f7f0 fcfa 	bl	80002d8 <__aeabi_dsub>
 800f8e4:	e7c4      	b.n	800f870 <__kernel_sin+0xd0>
 800f8e6:	bf00      	nop
 800f8e8:	55555549 	.word	0x55555549
 800f8ec:	3fc55555 	.word	0x3fc55555
 800f8f0:	3fe00000 	.word	0x3fe00000
 800f8f4:	5acfd57c 	.word	0x5acfd57c
 800f8f8:	3de5d93a 	.word	0x3de5d93a
 800f8fc:	8a2b9ceb 	.word	0x8a2b9ceb
 800f900:	3e5ae5e6 	.word	0x3e5ae5e6
 800f904:	57b1fe7d 	.word	0x57b1fe7d
 800f908:	3ec71de3 	.word	0x3ec71de3
 800f90c:	19c161d5 	.word	0x19c161d5
 800f910:	3f2a01a0 	.word	0x3f2a01a0
 800f914:	1110f8a6 	.word	0x1110f8a6
 800f918:	3f811111 	.word	0x3f811111

0800f91c <finite>:
 800f91c:	b082      	sub	sp, #8
 800f91e:	ed8d 0b00 	vstr	d0, [sp]
 800f922:	9801      	ldr	r0, [sp, #4]
 800f924:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f928:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f92c:	0fc0      	lsrs	r0, r0, #31
 800f92e:	b002      	add	sp, #8
 800f930:	4770      	bx	lr
 800f932:	0000      	movs	r0, r0
 800f934:	0000      	movs	r0, r0
	...

0800f938 <floor>:
 800f938:	ec51 0b10 	vmov	r0, r1, d0
 800f93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f940:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f944:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f948:	2e13      	cmp	r6, #19
 800f94a:	ee10 5a10 	vmov	r5, s0
 800f94e:	ee10 8a10 	vmov	r8, s0
 800f952:	460c      	mov	r4, r1
 800f954:	dc32      	bgt.n	800f9bc <floor+0x84>
 800f956:	2e00      	cmp	r6, #0
 800f958:	da14      	bge.n	800f984 <floor+0x4c>
 800f95a:	a333      	add	r3, pc, #204	; (adr r3, 800fa28 <floor+0xf0>)
 800f95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f960:	f7f0 fcbc 	bl	80002dc <__adddf3>
 800f964:	2200      	movs	r2, #0
 800f966:	2300      	movs	r3, #0
 800f968:	f7f1 f8fe 	bl	8000b68 <__aeabi_dcmpgt>
 800f96c:	b138      	cbz	r0, 800f97e <floor+0x46>
 800f96e:	2c00      	cmp	r4, #0
 800f970:	da57      	bge.n	800fa22 <floor+0xea>
 800f972:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f976:	431d      	orrs	r5, r3
 800f978:	d001      	beq.n	800f97e <floor+0x46>
 800f97a:	4c2d      	ldr	r4, [pc, #180]	; (800fa30 <floor+0xf8>)
 800f97c:	2500      	movs	r5, #0
 800f97e:	4621      	mov	r1, r4
 800f980:	4628      	mov	r0, r5
 800f982:	e025      	b.n	800f9d0 <floor+0x98>
 800f984:	4f2b      	ldr	r7, [pc, #172]	; (800fa34 <floor+0xfc>)
 800f986:	4137      	asrs	r7, r6
 800f988:	ea01 0307 	and.w	r3, r1, r7
 800f98c:	4303      	orrs	r3, r0
 800f98e:	d01f      	beq.n	800f9d0 <floor+0x98>
 800f990:	a325      	add	r3, pc, #148	; (adr r3, 800fa28 <floor+0xf0>)
 800f992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f996:	f7f0 fca1 	bl	80002dc <__adddf3>
 800f99a:	2200      	movs	r2, #0
 800f99c:	2300      	movs	r3, #0
 800f99e:	f7f1 f8e3 	bl	8000b68 <__aeabi_dcmpgt>
 800f9a2:	2800      	cmp	r0, #0
 800f9a4:	d0eb      	beq.n	800f97e <floor+0x46>
 800f9a6:	2c00      	cmp	r4, #0
 800f9a8:	bfbe      	ittt	lt
 800f9aa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f9ae:	fa43 f606 	asrlt.w	r6, r3, r6
 800f9b2:	19a4      	addlt	r4, r4, r6
 800f9b4:	ea24 0407 	bic.w	r4, r4, r7
 800f9b8:	2500      	movs	r5, #0
 800f9ba:	e7e0      	b.n	800f97e <floor+0x46>
 800f9bc:	2e33      	cmp	r6, #51	; 0x33
 800f9be:	dd0b      	ble.n	800f9d8 <floor+0xa0>
 800f9c0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f9c4:	d104      	bne.n	800f9d0 <floor+0x98>
 800f9c6:	ee10 2a10 	vmov	r2, s0
 800f9ca:	460b      	mov	r3, r1
 800f9cc:	f7f0 fc86 	bl	80002dc <__adddf3>
 800f9d0:	ec41 0b10 	vmov	d0, r0, r1
 800f9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9d8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f9dc:	f04f 33ff 	mov.w	r3, #4294967295
 800f9e0:	fa23 f707 	lsr.w	r7, r3, r7
 800f9e4:	4207      	tst	r7, r0
 800f9e6:	d0f3      	beq.n	800f9d0 <floor+0x98>
 800f9e8:	a30f      	add	r3, pc, #60	; (adr r3, 800fa28 <floor+0xf0>)
 800f9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ee:	f7f0 fc75 	bl	80002dc <__adddf3>
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	f7f1 f8b7 	bl	8000b68 <__aeabi_dcmpgt>
 800f9fa:	2800      	cmp	r0, #0
 800f9fc:	d0bf      	beq.n	800f97e <floor+0x46>
 800f9fe:	2c00      	cmp	r4, #0
 800fa00:	da02      	bge.n	800fa08 <floor+0xd0>
 800fa02:	2e14      	cmp	r6, #20
 800fa04:	d103      	bne.n	800fa0e <floor+0xd6>
 800fa06:	3401      	adds	r4, #1
 800fa08:	ea25 0507 	bic.w	r5, r5, r7
 800fa0c:	e7b7      	b.n	800f97e <floor+0x46>
 800fa0e:	2301      	movs	r3, #1
 800fa10:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800fa14:	fa03 f606 	lsl.w	r6, r3, r6
 800fa18:	4435      	add	r5, r6
 800fa1a:	4545      	cmp	r5, r8
 800fa1c:	bf38      	it	cc
 800fa1e:	18e4      	addcc	r4, r4, r3
 800fa20:	e7f2      	b.n	800fa08 <floor+0xd0>
 800fa22:	2500      	movs	r5, #0
 800fa24:	462c      	mov	r4, r5
 800fa26:	e7aa      	b.n	800f97e <floor+0x46>
 800fa28:	8800759c 	.word	0x8800759c
 800fa2c:	7e37e43c 	.word	0x7e37e43c
 800fa30:	bff00000 	.word	0xbff00000
 800fa34:	000fffff 	.word	0x000fffff

0800fa38 <rint>:
 800fa38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fa3a:	ec51 0b10 	vmov	r0, r1, d0
 800fa3e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fa42:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800fa46:	2e13      	cmp	r6, #19
 800fa48:	ee10 4a10 	vmov	r4, s0
 800fa4c:	460b      	mov	r3, r1
 800fa4e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800fa52:	dc58      	bgt.n	800fb06 <rint+0xce>
 800fa54:	2e00      	cmp	r6, #0
 800fa56:	da2b      	bge.n	800fab0 <rint+0x78>
 800fa58:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800fa5c:	4302      	orrs	r2, r0
 800fa5e:	d023      	beq.n	800faa8 <rint+0x70>
 800fa60:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800fa64:	4302      	orrs	r2, r0
 800fa66:	4254      	negs	r4, r2
 800fa68:	4314      	orrs	r4, r2
 800fa6a:	0c4b      	lsrs	r3, r1, #17
 800fa6c:	0b24      	lsrs	r4, r4, #12
 800fa6e:	045b      	lsls	r3, r3, #17
 800fa70:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800fa74:	ea44 0103 	orr.w	r1, r4, r3
 800fa78:	4b32      	ldr	r3, [pc, #200]	; (800fb44 <rint+0x10c>)
 800fa7a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800fa7e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800fa82:	4602      	mov	r2, r0
 800fa84:	460b      	mov	r3, r1
 800fa86:	4630      	mov	r0, r6
 800fa88:	4639      	mov	r1, r7
 800fa8a:	f7f0 fc27 	bl	80002dc <__adddf3>
 800fa8e:	e9cd 0100 	strd	r0, r1, [sp]
 800fa92:	463b      	mov	r3, r7
 800fa94:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa98:	4632      	mov	r2, r6
 800fa9a:	f7f0 fc1d 	bl	80002d8 <__aeabi_dsub>
 800fa9e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800faa2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800faa6:	4639      	mov	r1, r7
 800faa8:	ec41 0b10 	vmov	d0, r0, r1
 800faac:	b003      	add	sp, #12
 800faae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fab0:	4a25      	ldr	r2, [pc, #148]	; (800fb48 <rint+0x110>)
 800fab2:	4132      	asrs	r2, r6
 800fab4:	ea01 0702 	and.w	r7, r1, r2
 800fab8:	4307      	orrs	r7, r0
 800faba:	d0f5      	beq.n	800faa8 <rint+0x70>
 800fabc:	0851      	lsrs	r1, r2, #1
 800fabe:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800fac2:	4314      	orrs	r4, r2
 800fac4:	d00c      	beq.n	800fae0 <rint+0xa8>
 800fac6:	ea23 0201 	bic.w	r2, r3, r1
 800faca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800face:	2e13      	cmp	r6, #19
 800fad0:	fa43 f606 	asr.w	r6, r3, r6
 800fad4:	bf0c      	ite	eq
 800fad6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800fada:	2400      	movne	r4, #0
 800fadc:	ea42 0306 	orr.w	r3, r2, r6
 800fae0:	4918      	ldr	r1, [pc, #96]	; (800fb44 <rint+0x10c>)
 800fae2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800fae6:	4622      	mov	r2, r4
 800fae8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800faec:	4620      	mov	r0, r4
 800faee:	4629      	mov	r1, r5
 800faf0:	f7f0 fbf4 	bl	80002dc <__adddf3>
 800faf4:	e9cd 0100 	strd	r0, r1, [sp]
 800faf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fafc:	4622      	mov	r2, r4
 800fafe:	462b      	mov	r3, r5
 800fb00:	f7f0 fbea 	bl	80002d8 <__aeabi_dsub>
 800fb04:	e7d0      	b.n	800faa8 <rint+0x70>
 800fb06:	2e33      	cmp	r6, #51	; 0x33
 800fb08:	dd07      	ble.n	800fb1a <rint+0xe2>
 800fb0a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800fb0e:	d1cb      	bne.n	800faa8 <rint+0x70>
 800fb10:	ee10 2a10 	vmov	r2, s0
 800fb14:	f7f0 fbe2 	bl	80002dc <__adddf3>
 800fb18:	e7c6      	b.n	800faa8 <rint+0x70>
 800fb1a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800fb1e:	f04f 36ff 	mov.w	r6, #4294967295
 800fb22:	40d6      	lsrs	r6, r2
 800fb24:	4230      	tst	r0, r6
 800fb26:	d0bf      	beq.n	800faa8 <rint+0x70>
 800fb28:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800fb2c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800fb30:	bf1f      	itttt	ne
 800fb32:	ea24 0101 	bicne.w	r1, r4, r1
 800fb36:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800fb3a:	fa44 f202 	asrne.w	r2, r4, r2
 800fb3e:	ea41 0402 	orrne.w	r4, r1, r2
 800fb42:	e7cd      	b.n	800fae0 <rint+0xa8>
 800fb44:	08010460 	.word	0x08010460
 800fb48:	000fffff 	.word	0x000fffff
 800fb4c:	00000000 	.word	0x00000000

0800fb50 <scalbn>:
 800fb50:	b570      	push	{r4, r5, r6, lr}
 800fb52:	ec55 4b10 	vmov	r4, r5, d0
 800fb56:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800fb5a:	4606      	mov	r6, r0
 800fb5c:	462b      	mov	r3, r5
 800fb5e:	b99a      	cbnz	r2, 800fb88 <scalbn+0x38>
 800fb60:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fb64:	4323      	orrs	r3, r4
 800fb66:	d036      	beq.n	800fbd6 <scalbn+0x86>
 800fb68:	4b39      	ldr	r3, [pc, #228]	; (800fc50 <scalbn+0x100>)
 800fb6a:	4629      	mov	r1, r5
 800fb6c:	ee10 0a10 	vmov	r0, s0
 800fb70:	2200      	movs	r2, #0
 800fb72:	f7f0 fd69 	bl	8000648 <__aeabi_dmul>
 800fb76:	4b37      	ldr	r3, [pc, #220]	; (800fc54 <scalbn+0x104>)
 800fb78:	429e      	cmp	r6, r3
 800fb7a:	4604      	mov	r4, r0
 800fb7c:	460d      	mov	r5, r1
 800fb7e:	da10      	bge.n	800fba2 <scalbn+0x52>
 800fb80:	a32b      	add	r3, pc, #172	; (adr r3, 800fc30 <scalbn+0xe0>)
 800fb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb86:	e03a      	b.n	800fbfe <scalbn+0xae>
 800fb88:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800fb8c:	428a      	cmp	r2, r1
 800fb8e:	d10c      	bne.n	800fbaa <scalbn+0x5a>
 800fb90:	ee10 2a10 	vmov	r2, s0
 800fb94:	4620      	mov	r0, r4
 800fb96:	4629      	mov	r1, r5
 800fb98:	f7f0 fba0 	bl	80002dc <__adddf3>
 800fb9c:	4604      	mov	r4, r0
 800fb9e:	460d      	mov	r5, r1
 800fba0:	e019      	b.n	800fbd6 <scalbn+0x86>
 800fba2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fba6:	460b      	mov	r3, r1
 800fba8:	3a36      	subs	r2, #54	; 0x36
 800fbaa:	4432      	add	r2, r6
 800fbac:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800fbb0:	428a      	cmp	r2, r1
 800fbb2:	dd08      	ble.n	800fbc6 <scalbn+0x76>
 800fbb4:	2d00      	cmp	r5, #0
 800fbb6:	a120      	add	r1, pc, #128	; (adr r1, 800fc38 <scalbn+0xe8>)
 800fbb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbbc:	da1c      	bge.n	800fbf8 <scalbn+0xa8>
 800fbbe:	a120      	add	r1, pc, #128	; (adr r1, 800fc40 <scalbn+0xf0>)
 800fbc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbc4:	e018      	b.n	800fbf8 <scalbn+0xa8>
 800fbc6:	2a00      	cmp	r2, #0
 800fbc8:	dd08      	ble.n	800fbdc <scalbn+0x8c>
 800fbca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fbce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fbd2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fbd6:	ec45 4b10 	vmov	d0, r4, r5
 800fbda:	bd70      	pop	{r4, r5, r6, pc}
 800fbdc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800fbe0:	da19      	bge.n	800fc16 <scalbn+0xc6>
 800fbe2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800fbe6:	429e      	cmp	r6, r3
 800fbe8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800fbec:	dd0a      	ble.n	800fc04 <scalbn+0xb4>
 800fbee:	a112      	add	r1, pc, #72	; (adr r1, 800fc38 <scalbn+0xe8>)
 800fbf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d1e2      	bne.n	800fbbe <scalbn+0x6e>
 800fbf8:	a30f      	add	r3, pc, #60	; (adr r3, 800fc38 <scalbn+0xe8>)
 800fbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbfe:	f7f0 fd23 	bl	8000648 <__aeabi_dmul>
 800fc02:	e7cb      	b.n	800fb9c <scalbn+0x4c>
 800fc04:	a10a      	add	r1, pc, #40	; (adr r1, 800fc30 <scalbn+0xe0>)
 800fc06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d0b8      	beq.n	800fb80 <scalbn+0x30>
 800fc0e:	a10e      	add	r1, pc, #56	; (adr r1, 800fc48 <scalbn+0xf8>)
 800fc10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc14:	e7b4      	b.n	800fb80 <scalbn+0x30>
 800fc16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fc1a:	3236      	adds	r2, #54	; 0x36
 800fc1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fc20:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800fc24:	4620      	mov	r0, r4
 800fc26:	4b0c      	ldr	r3, [pc, #48]	; (800fc58 <scalbn+0x108>)
 800fc28:	2200      	movs	r2, #0
 800fc2a:	e7e8      	b.n	800fbfe <scalbn+0xae>
 800fc2c:	f3af 8000 	nop.w
 800fc30:	c2f8f359 	.word	0xc2f8f359
 800fc34:	01a56e1f 	.word	0x01a56e1f
 800fc38:	8800759c 	.word	0x8800759c
 800fc3c:	7e37e43c 	.word	0x7e37e43c
 800fc40:	8800759c 	.word	0x8800759c
 800fc44:	fe37e43c 	.word	0xfe37e43c
 800fc48:	c2f8f359 	.word	0xc2f8f359
 800fc4c:	81a56e1f 	.word	0x81a56e1f
 800fc50:	43500000 	.word	0x43500000
 800fc54:	ffff3cb0 	.word	0xffff3cb0
 800fc58:	3c900000 	.word	0x3c900000

0800fc5c <_init>:
 800fc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc5e:	bf00      	nop
 800fc60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc62:	bc08      	pop	{r3}
 800fc64:	469e      	mov	lr, r3
 800fc66:	4770      	bx	lr

0800fc68 <_fini>:
 800fc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc6a:	bf00      	nop
 800fc6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc6e:	bc08      	pop	{r3}
 800fc70:	469e      	mov	lr, r3
 800fc72:	4770      	bx	lr
